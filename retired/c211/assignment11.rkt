#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 6.2.1 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 32 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsi"
 #"s-snip-wxme.rkt\" \"drracket\" \"private\"))\0"
) 2 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 97 0 1 #"\0"
0 75 1 #"\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 12 #"Inconsolata\0"
0 14 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 213 213 213 49 51 55 -1 -1
2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 142 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 92 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 254 252 120 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 169 169 169 0 0 0 -1 -1 2
37 #"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 213 213 213 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 132 230 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 132 230 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 212 251 120 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 212 251 120 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 101 187 226 0 0 0 -1 -1 2
37 #"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 101 187 226 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 254 252 120 0 0 0 -1 -1 2
39 #"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 254 252 120 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 234 234 234 0 0 0 -1 -1 2
42 #"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 92 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 145 146 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 16
#"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 147 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 192 192 192 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 192 192 192 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 0 0 0 94 94 94 255 212 120 -1 -1
2 27 #"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 0 0 0 94 94 94 255 212 120 -1 -1
4 1 #"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 0 1 #"\0"
0 75 12 #"Inconsolata\0"
0.0 14 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 191 191 191
49 51 55 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 142 0 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 93 -1 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 147 0 0
0 0 -1 -1 0 1 #"\0"
0 -1 1 #"\0"
0.0 13 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
0.0 13 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 18 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 28 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 49 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 51 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 0 1 #"\0"
0 75 7 #"Monaco\0"
0.0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 150 0 150 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 175 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 38 38 128 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 194 116 31 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 0 1 #"\0"
0 75 6 #"Menlo\0"
0.0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 65 105 225 0
0 0 -1 -1 16 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 14 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 200 0 0 0 0
0 -1 -1 20 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 24 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 0 1 #"\0"
0 75 1 #"\0"
0.0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 0 1 #"\0"
0 75 12 #"Courier New\0"
0.0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 2 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 100 0 0 0
0 -1 -1 2 1 #"\0"
0 70 1 #"\0"
0.0 0 90 90 90 90 0 0 0 0 0 0 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 0 0 0 0
0 0 1 #"\0"
0 70 1 #"\0"
0.0 0 90 90 90 90 0 0 0 0 0 0 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 0 0 0 0
0 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 213 213 213
49 51 55 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 213 213 213
0 0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 145 146 0
0 0 -1 -1           0 1352 0 4 3 85
(
 #";; The first three lines of this file were inserted by DrRacket. The"
 #"y record metadata"
) 0 0 4 29 1 #"\n"
0 0 4 3 85
(
 #";; about the language level of this file in a form that our tools ca"
 #"n easily process."
) 0 0 4 29 1 #"\n"
0 0 4 3 193
(
 #"#reader(lib \"htdp-intermediate-lambda-reader.ss\" \"lang\")((modnam"
 #"e assignment11) (read-case-sensitive #t) (teachpacks ()) (htdp-setti"
 #"ngs #(#t constructor repeating-decimal #f #t none #f () #f)))"
) 0 0 4 29 1 #"\n"
0 0 18 3 59
#"; The following definitions are from the book, but slightly"
0 0 28 29 1 #"\n"
0 0 18 3 53 #"; changed with the use of concat in place of implode."
0 0 28 29 1 #"\n"
0 0 18 3 25 #"; Concat is from lecture."
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 18 3 28 #"; [List-of String] -> String"
0 0 28 29 1 #"\n"
0 0 18 3 36 #"; Concatenate some strings into one."
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 16 3 6 #"define"
0 0 28 3 2 #" ("
0 0 14 3 6 #"concat"
0 0 28 3 1 #" "
0 0 14 3 2 #"xs"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 14 3 5 #"foldr"
0 0 28 3 1 #" "
0 0 14 3 13 #"string-append"
0 0 28 3 1 #" "
0 0 20 3 2 #"\"\""
0 0 28 3 1 #" "
0 0 14 3 2 #"xs"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 18 3 41 #"; [List-of 1String] N -> [List-of String]"
0 0 28 29 1 #"\n"
0 0 18 3 53 #"; bundles sub-sequences of s into strings of length n"
0 0 28 29 1 #"\n"
0 0 18 3 38 #"; idea take and drop n items at a time"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 16 3 6 #"define"
0 0 28 3 2 #" ("
0 0 14 3 6 #"bundle"
0 0 28 3 1 #" "
0 0 14 3 1 #"s"
0 0 28 3 1 #" "
0 0 14 3 1 #"n"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 16 3 4 #"cond"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"    [("
0 0 14 3 6 #"empty?"
0 0 28 3 1 #" "
0 0 14 3 1 #"s"
0 0 28 3 2 #") "
0 0 24 3 1 #"'"
0 0 28 3 3 #"()]"
0 0 28 29 1 #"\n"
0 0 28 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 28 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 28 3 2 #" ("
0 0 14 3 6 #"concat"
0 0 28 3 2 #" ("
0 0 14 3 4 #"take"
0 0 28 3 1 #" "
0 0 14 3 1 #"s"
0 0 28 3 1 #" "
0 0 14 3 1 #"n"
0 0 28 3 4 #")) ("
0 0 14 3 6 #"bundle"
0 0 28 3 2 #" ("
0 0 14 3 4 #"drop"
0 0 28 3 1 #" "
0 0 14 3 1 #"s"
0 0 28 3 1 #" "
0 0 14 3 1 #"n"
0 0 28 3 2 #") "
0 0 14 3 1 #"n"
0 0 28 3 5 #"))]))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 18 3 30 #"; [List-of X] N -> [List-of X]"
0 0 28 29 1 #"\n"
0 0 18 3 61
#"; retrieves the first n items in l if possible or everything "
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 16 3 6 #"define"
0 0 28 3 2 #" ("
0 0 14 3 4 #"take"
0 0 28 3 1 #" "
0 0 14 3 1 #"l"
0 0 28 3 1 #" "
0 0 14 3 1 #"n"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 16 3 4 #"cond"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"    [("
0 0 14 3 5 #"zero?"
0 0 28 3 1 #" "
0 0 14 3 1 #"n"
0 0 28 3 2 #") "
0 0 24 3 1 #"'"
0 0 28 3 3 #"()]"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"    [("
0 0 14 3 6 #"empty?"
0 0 28 3 1 #" "
0 0 14 3 1 #"l"
0 0 28 3 2 #") "
0 0 24 3 1 #"'"
0 0 28 3 3 #"()]"
0 0 28 29 1 #"\n"
0 0 28 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 28 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 28 3 2 #" ("
0 0 14 3 5 #"first"
0 0 28 3 1 #" "
0 0 14 3 1 #"l"
0 0 28 3 3 #") ("
0 0 14 3 4 #"take"
0 0 28 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 28 3 1 #" "
0 0 14 3 1 #"l"
0 0 28 3 3 #") ("
0 0 14 3 4 #"sub1"
0 0 28 3 1 #" "
0 0 14 3 1 #"n"
0 0 28 3 6 #")))]))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 18 3 30 #"; [List-of X] N -> [List-of X]"
0 0 28 29 1 #"\n"
0 0 18 3 60
#"; remove the first n items from l if possible or everything "
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 16 3 6 #"define"
0 0 28 3 2 #" ("
0 0 14 3 4 #"drop"
0 0 28 3 1 #" "
0 0 14 3 1 #"l"
0 0 28 3 1 #" "
0 0 14 3 1 #"n"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 16 3 4 #"cond"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"    [("
0 0 14 3 5 #"zero?"
0 0 28 3 1 #" "
0 0 14 3 1 #"n"
0 0 28 3 2 #") "
0 0 14 3 1 #"l"
0 0 28 3 1 #"]"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"    [("
0 0 14 3 6 #"empty?"
0 0 28 3 1 #" "
0 0 14 3 1 #"l"
0 0 28 3 2 #") "
0 0 14 3 1 #"l"
0 0 28 3 1 #"]"
0 0 28 29 1 #"\n"
0 0 28 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 28 3 2 #" ("
0 0 14 3 4 #"drop"
0 0 28 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 28 3 1 #" "
0 0 14 3 1 #"l"
0 0 28 3 3 #") ("
0 0 14 3 4 #"sub1"
0 0 28 3 1 #" "
0 0 14 3 1 #"n"
0 0 28 3 5 #"))]))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 18 3 14 #"; Exercise 397"
0 0 28 29 1 #"\n"
0 0 18 3 35 #"; [List-of X] N -> [List-of String]"
0 0 28 29 1 #"\n"
0 0 18 3 63
#"; consumes a list of arbitrary data and a number, then converts"
0 0 28 29 1 #"\n"
0 0 18 3 43 #"; the data into a list of chunks of size N."
0 0 28 29 1 #"\n"
0 0 18 3 11 #"; Template:"
0 0 28 29 1 #"\n"
0 0 18 3 10 #"; --------"
0 0 28 29 1 #"\n"
0 7         133 68           0 0           0 21 0 28 3 1 #"("
0 0 16 3 6 #"define"
0 0 28 3 2 #" ("
0 0 14 3 12 #"list->chunks"
0 0 28 3 1 #" "
0 0 14 3 6 #"a-list"
0 0 28 3 1 #" "
0 0 14 3 1 #"n"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 14 3 3 #"..."
0 0 28 3 2 #" ("
0 0 14 3 6 #"bundle"
0 0 28 3 2 #" ("
0 0 14 3 3 #"..."
0 0 28 3 1 #" "
0 0 14 3 6 #"a-list"
0 0 28 3 2 #") "
0 0 14 3 1 #"n"
0 0 28 3 3 #")))"
0           0 0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 16 3 6 #"define"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 14 3 12 #"list->chunks"
0 0 28 3 1 #" "
0 0 14 3 6 #"a-list"
0 0 28 3 1 #" "
0 0 14 3 1 #"n"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 16 3 5 #"local"
0 0 28 3 3 #" [("
0 0 16 3 6 #"define"
0 0 28 3 2 #" ("
0 0 14 3 6 #"bundle"
0 0 28 3 1 #" "
0 0 14 3 1 #"s"
0 0 28 3 1 #" "
0 0 14 3 1 #"n"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 13 #"            ("
0 0 16 3 4 #"cond"
0 0 28 29 1 #"\n"
0 0 28 3 16 #"              [("
0 0 14 3 6 #"empty?"
0 0 28 3 1 #" "
0 0 14 3 1 #"s"
0 0 28 3 2 #") "
0 0 24 3 1 #"'"
0 0 28 3 3 #"()]"
0 0 28 29 1 #"\n"
0 0 28 3 15 #"              ["
0 0 14 3 4 #"else"
0 0 28 29 1 #"\n"
0 0 28 3 16 #"               ("
0 0 14 3 4 #"cons"
0 0 28 3 2 #" ("
0 0 14 3 4 #"list"
0 0 28 29 1 #"\n"
0 0 28 3 23 #"                      ("
0 0 14 3 6 #"concat"
0 0 28 3 2 #" ("
0 0 14 3 4 #"take"
0 0 28 3 1 #" "
0 0 14 3 1 #"s"
0 0 28 3 1 #" "
0 0 14 3 1 #"n"
0 0 28 3 3 #")))"
0 0 28 29 1 #"\n"
0 0 28 3 22 #"                     ("
0 0 14 3 6 #"bundle"
0 0 28 3 2 #" ("
0 0 14 3 4 #"drop"
0 0 28 3 1 #" "
0 0 14 3 1 #"s"
0 0 28 3 1 #" "
0 0 14 3 1 #"n"
0 0 28 3 2 #") "
0 0 14 3 1 #"n"
0 0 28 3 6 #"))]))]"
0 0 28 29 1 #"\n"
0 0 28 3 5 #"    ("
0 0 14 3 5 #"foldr"
0 0 28 3 1 #" "
0 0 14 3 6 #"append"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 28 3 4 #"() ("
0 0 14 3 3 #"map"
0 0 28 3 2 #" ("
0 0 16 3 6 #"lambda"
0 0 28 3 2 #" ("
0 0 14 3 1 #"x"
0 0 28 3 3 #") ("
0 0 14 3 6 #"bundle"
0 0 28 3 2 #" ("
0 0 14 3 7 #"explode"
0 0 28 3 1 #" "
0 0 14 3 1 #"x"
0 0 28 3 2 #") "
0 0 14 3 1 #"n"
0 0 28 3 3 #")) "
0 0 14 3 6 #"a-list"
0 0 28 3 3 #")))"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  )"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 28 3 2 #" ("
0 0 14 3 12 #"list->chunks"
0 0 28 3 2 #" ("
0 0 14 3 4 #"list"
0 0 28 3 1 #" "
0 0 20 3 8 #"\"12ab34\""
0 0 28 3 1 #" "
0 0 20 3 8 #"\"56de30\""
0 0 28 3 2 #") "
0 0 24 3 1 #"2"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 15 #"              ("
0 0 14 3 4 #"list"
0 0 28 29 1 #"\n"
0 0 28 3 16 #"               ("
0 0 14 3 4 #"list"
0 0 28 3 1 #" "
0 0 20 3 4 #"\"12\""
0 0 28 3 3 #") ("
0 0 14 3 4 #"list"
0 0 28 3 1 #" "
0 0 20 3 4 #"\"ab\""
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 16 #"               ("
0 0 14 3 4 #"list"
0 0 28 3 1 #" "
0 0 20 3 4 #"\"34\""
0 0 28 3 3 #") ("
0 0 14 3 4 #"list"
0 0 28 3 1 #" "
0 0 20 3 4 #"\"56\""
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 16 #"               ("
0 0 14 3 4 #"list"
0 0 28 3 1 #" "
0 0 20 3 4 #"\"de\""
0 0 28 3 3 #") ("
0 0 14 3 4 #"list"
0 0 28 3 1 #" "
0 0 20 3 4 #"\"30\""
0 0 28 3 3 #")))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 18 3 14 #"; Exercise 398"
0 0 28 29 1 #"\n"
0 0 18 3 34 #"; String Number -> [Listof Chunks]"
0 0 28 29 1 #"\n"
0 0 18 3 71
(
 #"; Given a string and a number, this produces a list of string chunks"
 #" of"
) 0 0 28 29 1 #"\n"
0 0 18 3 9 #"; size n."
0 0 28 29 1 #"\n"
0 0 18 3 11 #"; Template:"
0 0 28 29 1 #"\n"
0 0 18 3 10 #"; --------"
0 0 28 29 1 #"\n"
0 7         271 68           0 0           0 44 0 28 3 1 #"("
0 0 16 3 6 #"define"
0 0 28 3 2 #" ("
0 0 14 3 9 #"partition"
0 0 28 3 1 #" "
0 0 14 3 1 #"s"
0 0 28 3 1 #" "
0 0 14 3 1 #"n"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 16 3 4 #"cond"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"    [("
0 0 14 3 2 #"or"
0 0 28 3 2 #" ("
0 0 14 3 6 #"empty?"
0 0 28 3 1 #" "
0 0 14 3 1 #"s"
0 0 28 3 3 #") ("
0 0 14 3 6 #"empty?"
0 0 28 3 1 #" "
0 0 14 3 1 #"n"
0 0 28 3 3 #")) "
0 0 14 3 3 #"..."
0 0 28 3 1 #"]"
0 0 28 29 1 #"\n"
0 0 28 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 28 3 2 #" ("
0 0 14 3 3 #"..."
0 0 28 3 1 #" "
0 0 14 3 1 #"s"
0 0 28 3 2 #" ("
0 0 14 3 9 #"partition"
0 0 28 3 2 #" ("
0 0 14 3 3 #"..."
0 0 28 3 1 #" "
0 0 14 3 1 #"s"
0 0 28 3 3 #") ("
0 0 14 3 3 #"..."
0 0 28 3 1 #" "
0 0 14 3 1 #"n"
0 0 28 3 6 #")))]))"
0           0 0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 16 3 6 #"define"
0 0 28 3 2 #" ("
0 0 14 3 9 #"partition"
0 0 28 3 1 #" "
0 0 14 3 1 #"s"
0 0 28 3 1 #" "
0 0 14 3 1 #"n"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 16 3 4 #"cond"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"    [("
0 0 14 3 2 #"or"
0 0 28 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 28 3 1 #" "
0 0 20 3 2 #"\"\""
0 0 28 3 1 #" "
0 0 14 3 1 #"s"
0 0 28 3 3 #") ("
0 0 14 3 6 #"empty?"
0 0 28 3 1 #" "
0 0 14 3 1 #"n"
0 0 28 3 3 #")) "
0 0 24 3 1 #"'"
0 0 28 3 3 #"()]"
0 0 28 29 1 #"\n"
0 0 28 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 28 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 28 3 2 #" ("
0 0 14 3 9 #"substring"
0 0 28 3 1 #" "
0 0 14 3 1 #"s"
0 0 28 3 1 #" "
0 0 24 3 1 #"0"
0 0 28 3 1 #" "
0 0 14 3 1 #"n"
0 0 28 3 3 #") ("
0 0 14 3 9 #"partition"
0 0 28 3 2 #" ("
0 0 14 3 9 #"substring"
0 0 28 3 1 #" "
0 0 14 3 1 #"s"
0 0 28 3 1 #" "
0 0 14 3 1 #"n"
0 0 28 3 2 #") "
0 0 14 3 1 #"n"
0 0 28 3 5 #"))]))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 28 3 2 #" ("
0 0 14 3 9 #"partition"
0 0 28 3 1 #" "
0 0 20 3 14 #"\"itisoktobeme\""
0 0 28 3 1 #" "
0 0 24 3 1 #"2"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 15 #"              ("
0 0 14 3 4 #"list"
0 0 28 3 1 #" "
0 0 20 3 4 #"\"it\""
0 0 28 3 1 #" "
0 0 20 3 4 #"\"is\""
0 0 28 3 1 #" "
0 0 20 3 4 #"\"ok\""
0 0 28 3 1 #" "
0 0 20 3 4 #"\"to\""
0 0 28 3 1 #" "
0 0 20 3 4 #"\"be\""
0 0 28 3 1 #" "
0 0 20 3 4 #"\"me\""
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 18 3 14 #"; Exercise 399"
0 0 28 29 1 #"\n"
0 0 18 3 2 #"; "
0 0 18 3 4 #"Draw"
0 0 18 3 1 #" "
0 0 18 3 1 #"a"
0 0 18 3 1 #" "
0 0 18 3 10 #"quick-sort"
0 0 18 3 40 #" diagram for (list 11 9 2 18 12 14 4 1)."
0 0 28 29 1 #"\n"
0 0 18 3 51 #"; 1) Pivot on 11 -> '( '(9 2 4 1) '(11) '(18 12 14)"
0 0 28 29 1 #"\n"
0 0 18 3 43 #"; 2) Work the left -> '( '(2 4 1) '(9) '())"
0 0 28 29 1 #"\n"
0 0 18 3 56 #"; 3) Left reduced further -> '( '(1) '(2) '(4) '(9) '())"
0 0 28 29 1 #"\n"
0 0 18 3 45 #"; 4) Work the right -> '( '(12 14) '(18) '())"
0 0 28 29 1 #"\n"
0 0 18 3 55 #"; 5) Right reduced further -> '( '(12) '(14) '(18) '())"
0 0 28 29 1 #"\n"
0 0 18 3 62
#"; 6) Combine left, 11, and right -> (list 1 2 3 9 11 12 14 18)"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 18 3 58
#"; The following quick-sort algorithm is given in the text:"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 18 3 38 #"; [List-of Number] -> [List-of Number]"
0 0 28 29 1 #"\n"
0 0 18 3 52 #"; creates a list of numbers with the same numbers as"
0 0 28 29 1 #"\n"
0 0 18 3 33 #"; alon, sorted in ascending order"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 16 3 6 #"define"
0 0 28 3 2 #" ("
0 0 14 3 10 #"quick-sort"
0 0 28 3 1 #" "
0 0 14 3 4 #"alon"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 16 3 4 #"cond"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"    [("
0 0 14 3 6 #"empty?"
0 0 28 3 1 #" "
0 0 14 3 4 #"alon"
0 0 28 3 2 #") "
0 0 24 3 1 #"'"
0 0 28 3 3 #"()]"
0 0 28 29 1 #"\n"
0 0 28 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 28 3 2 #" ("
0 0 16 3 5 #"local"
0 0 28 3 3 #" (("
0 0 16 3 6 #"define"
0 0 28 3 1 #" "
0 0 14 3 5 #"pivot"
0 0 28 3 2 #" ("
0 0 14 3 5 #"first"
0 0 28 3 1 #" "
0 0 14 3 4 #"alon"
0 0 28 3 3 #")))"
0 0 28 29 1 #"\n"
0 0 28 3 13 #"            ("
0 0 14 3 6 #"append"
0 0 28 3 2 #" ("
0 0 14 3 10 #"quick-sort"
0 0 28 3 2 #" ("
0 0 14 3 13 #"smaller-items"
0 0 28 3 1 #" "
0 0 14 3 4 #"alon"
0 0 28 3 1 #" "
0 0 14 3 5 #"pivot"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 3 21 #"                    ("
0 0 14 3 4 #"list"
0 0 28 3 1 #" "
0 0 14 3 5 #"pivot"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 21 #"                    ("
0 0 14 3 10 #"quick-sort"
0 0 28 3 2 #" ("
0 0 14 3 12 #"larger-items"
0 0 28 3 1 #" "
0 0 14 3 4 #"alon"
0 0 28 3 1 #" "
0 0 14 3 5 #"pivot"
0 0 28 3 7 #"))))]))"
0 0 28 29 1 #"\n"
0 0 28 3 1 #" "
0 0 28 29 1 #"\n"
0 0 18 3 45 #"; [List-of Number] Number -> [List-of Number]"
0 0 28 29 1 #"\n"
0 0 18 3 49 #"; creates a list with all those numbers on alon  "
0 0 28 29 1 #"\n"
0 0 18 3 24 #"; that are larger than n"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 16 3 6 #"define"
0 0 28 3 2 #" ("
0 0 14 3 12 #"larger-items"
0 0 28 3 1 #" "
0 0 14 3 4 #"alon"
0 0 28 3 1 #" "
0 0 14 3 1 #"n"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 16 3 4 #"cond"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"    [("
0 0 14 3 6 #"empty?"
0 0 28 3 1 #" "
0 0 14 3 4 #"alon"
0 0 28 3 2 #") "
0 0 24 3 1 #"'"
0 0 28 3 3 #"()]"
0 0 28 29 1 #"\n"
0 0 28 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 28 3 2 #" ("
0 0 14 3 2 #"if"
0 0 28 3 2 #" ("
0 0 14 3 1 #">"
0 0 28 3 2 #" ("
0 0 14 3 5 #"first"
0 0 28 3 1 #" "
0 0 14 3 4 #"alon"
0 0 28 3 2 #") "
0 0 14 3 1 #"n"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 15 #"              ("
0 0 14 3 4 #"cons"
0 0 28 3 2 #" ("
0 0 14 3 5 #"first"
0 0 28 3 1 #" "
0 0 14 3 4 #"alon"
0 0 28 3 3 #") ("
0 0 14 3 12 #"larger-items"
0 0 28 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 28 3 1 #" "
0 0 14 3 4 #"alon"
0 0 28 3 2 #") "
0 0 14 3 1 #"n"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 3 15 #"              ("
0 0 14 3 12 #"larger-items"
0 0 28 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 28 3 1 #" "
0 0 14 3 4 #"alon"
0 0 28 3 2 #") "
0 0 14 3 1 #"n"
0 0 28 3 5 #"))]))"
0 0 28 29 1 #"\n"
0 0 28 3 1 #" "
0 0 28 29 1 #"\n"
0 0 18 3 45 #"; [List-of Number] Number -> [List-of Number]"
0 0 28 29 1 #"\n"
0 0 18 3 49 #"; creates a list with all those numbers on alon  "
0 0 28 29 1 #"\n"
0 0 18 3 25 #"; that are smaller than n"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 16 3 6 #"define"
0 0 28 3 2 #" ("
0 0 14 3 13 #"smaller-items"
0 0 28 3 1 #" "
0 0 14 3 4 #"alon"
0 0 28 3 1 #" "
0 0 14 3 1 #"n"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 16 3 4 #"cond"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"    [("
0 0 14 3 6 #"empty?"
0 0 28 3 1 #" "
0 0 14 3 4 #"alon"
0 0 28 3 2 #") "
0 0 24 3 1 #"'"
0 0 28 3 3 #"()]"
0 0 28 29 1 #"\n"
0 0 28 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 28 3 2 #" ("
0 0 14 3 2 #"if"
0 0 28 3 2 #" ("
0 0 14 3 1 #"<"
0 0 28 3 2 #" ("
0 0 14 3 5 #"first"
0 0 28 3 1 #" "
0 0 14 3 4 #"alon"
0 0 28 3 2 #") "
0 0 14 3 1 #"n"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 15 #"              ("
0 0 14 3 4 #"cons"
0 0 28 3 2 #" ("
0 0 14 3 5 #"first"
0 0 28 3 1 #" "
0 0 14 3 4 #"alon"
0 0 28 3 3 #") ("
0 0 14 3 13 #"smaller-items"
0 0 28 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 28 3 1 #" "
0 0 14 3 4 #"alon"
0 0 28 3 2 #") "
0 0 14 3 1 #"n"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 3 15 #"              ("
0 0 14 3 13 #"smaller-items"
0 0 28 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 28 3 1 #" "
0 0 14 3 4 #"alon"
0 0 28 3 2 #") "
0 0 14 3 1 #"n"
0 0 28 3 5 #"))]))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 18 3 14 #"; Exercise 400"
0 0 28 29 1 #"\n"
0 0 18 3 22 #"; Modified quick-sort:"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 16 3 6 #"define"
0 0 28 3 2 #" ("
0 0 14 3 18 #"quicker-quick-sort"
0 0 28 3 1 #" "
0 0 14 3 4 #"alon"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 16 3 4 #"cond"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"    [("
0 0 14 3 6 #"empty?"
0 0 28 3 1 #" "
0 0 14 3 4 #"alon"
0 0 28 3 2 #") "
0 0 24 3 1 #"'"
0 0 28 3 3 #"()]"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"    [("
0 0 14 3 6 #"empty?"
0 0 28 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 28 3 1 #" "
0 0 14 3 4 #"alon"
0 0 28 3 3 #")) "
0 0 14 3 4 #"alon"
0 0 28 3 1 #"]"
0 0 28 29 1 #"\n"
0 0 28 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 28 3 2 #" ("
0 0 16 3 5 #"local"
0 0 28 3 3 #" (("
0 0 16 3 6 #"define"
0 0 28 3 1 #" "
0 0 14 3 5 #"pivot"
0 0 28 3 2 #" ("
0 0 14 3 5 #"first"
0 0 28 3 1 #" "
0 0 14 3 4 #"alon"
0 0 28 3 3 #")))"
0 0 28 29 1 #"\n"
0 0 28 3 13 #"            ("
0 0 14 3 6 #"append"
0 0 28 3 2 #" ("
0 0 14 3 10 #"quick-sort"
0 0 28 3 2 #" ("
0 0 14 3 13 #"smaller-items"
0 0 28 3 1 #" "
0 0 14 3 4 #"alon"
0 0 28 3 1 #" "
0 0 14 3 5 #"pivot"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 3 21 #"                    ("
0 0 14 3 4 #"list"
0 0 28 3 1 #" "
0 0 14 3 5 #"pivot"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 21 #"                    ("
0 0 14 3 10 #"quick-sort"
0 0 28 3 2 #" ("
0 0 14 3 12 #"larger-items"
0 0 28 3 1 #" "
0 0 14 3 4 #"alon"
0 0 28 3 1 #" "
0 0 14 3 5 #"pivot"
0 0 28 3 7 #"))))]))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 28 3 2 #" ("
0 0 14 3 18 #"quicker-quick-sort"
0 0 28 3 2 #" ("
0 0 14 3 4 #"list"
0 0 28 3 1 #" "
0 0 24 3 2 #"11"
0 0 28 3 1 #" "
0 0 24 3 1 #"8"
0 0 28 3 1 #" "
0 0 24 3 2 #"14"
0 0 28 3 1 #" "
0 0 24 3 1 #"7"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 3 15 #"              ("
0 0 14 3 4 #"list"
0 0 28 3 1 #" "
0 0 24 3 1 #"7"
0 0 28 3 1 #" "
0 0 24 3 1 #"8"
0 0 28 3 1 #" "
0 0 24 3 2 #"11"
0 0 28 3 1 #" "
0 0 24 3 2 #"14"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 18 3 71
(
 #"; For (quick-sort (list 11 8 14 7)), quicker-quick-sort saves two st"
 #"eps"
) 0 0 28 29 1 #"\n"
0 0 18 3 65
#"; for every quicksort on a list which contains only one item. For"
0 0 28 29 1 #"\n"
0 0 18 3 40 #"; our example problem, it saves 4 steps."
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 18 3 14 #"; Exercise 408"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 18 3 41 #"; [List-of 1String] N -> [List-of String]"
0 0 28 29 1 #"\n"
0 0 18 3 53 #"; bundles sub-sequences of s into strings of length n"
0 0 28 29 1 #"\n"
0 0 18 3 38 #"; idea take and drop n items at a time"
0 0 28 29 1 #"\n"
0 0 18 3 48 #"; termination (bundle s 0) loops unless s is '()"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 16 3 6 #"define"
0 0 28 3 2 #" ("
0 0 14 3 14 #"checked-bundle"
0 0 28 3 1 #" "
0 0 14 3 1 #"s"
0 0 28 3 1 #" "
0 0 14 3 1 #"n"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 16 3 4 #"cond"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"    [("
0 0 14 3 1 #"="
0 0 28 3 1 #" "
0 0 14 3 1 #"n"
0 0 28 3 1 #" "
0 0 24 3 1 #"0"
0 0 28 3 3 #") ("
0 0 14 3 5 #"error"
0 0 28 3 1 #" "
0 0 20 3 16 #"\"Infinite Loop!\""
0 0 28 3 2 #")]"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"    [("
0 0 14 3 6 #"empty?"
0 0 28 3 1 #" "
0 0 14 3 1 #"s"
0 0 28 3 2 #") "
0 0 24 3 1 #"'"
0 0 28 3 3 #"()]"
0 0 28 29 1 #"\n"
0 0 28 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 28 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 28 3 2 #" ("
0 0 14 3 6 #"concat"
0 0 28 3 2 #" ("
0 0 14 3 4 #"take"
0 0 28 3 1 #" "
0 0 14 3 1 #"s"
0 0 28 3 1 #" "
0 0 14 3 1 #"n"
0 0 28 3 4 #")) ("
0 0 14 3 6 #"bundle"
0 0 28 3 2 #" ("
0 0 14 3 4 #"drop"
0 0 28 3 1 #" "
0 0 14 3 1 #"s"
0 0 28 3 1 #" "
0 0 14 3 1 #"n"
0 0 28 3 2 #") "
0 0 14 3 1 #"n"
0 0 28 3 5 #"))]))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 18 3 66
(
 #"; (check-expect (checked-bundle \"foo\" 0) (error \"Infinite Loop!\""
 #"))"
) 0 0 28 29 1 #"\n"
0 0 18 3 22 #"; End of book problems"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 18 3 12 #"; Exercise 1"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 16 3 13 #"define-struct"
0 0 28 3 1 #" "
0 0 14 3 4 #"ball"
0 0 28 3 2 #" ("
0 0 14 3 1 #"x"
0 0 28 3 1 #" "
0 0 14 3 1 #"y"
0 0 28 3 1 #" "
0 0 14 3 2 #"vx"
0 0 28 3 1 #" "
0 0 14 3 2 #"vy"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 18 3 13 #"; A ball is a"
0 0 28 29 1 #"\n"
0 0 18 3 41 #"; (make-ball Number Number Number Number)"
0 0 28 29 1 #"\n"
0 0 18 3 65
#"; where x is the horizontal position, y is the vertical position,"
0 0 28 29 1 #"\n"
0 0 18 3 67
#"; vx is the horizontal velocity, and y is in the vertical velocity."
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 18 3 12 #"; Exercise 2"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 16 3 13 #"define-struct"
0 0 28 3 1 #" "
0 0 14 3 5 #"table"
0 0 28 3 2 #" ("
0 0 14 3 1 #"r"
0 0 28 3 1 #" "
0 0 14 3 6 #"center"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 18 3 15 #"; A table is a:"
0 0 28 29 1 #"\n"
0 0 18 3 28 #"; (make-table (Number Posn))"
0 0 28 29 1 #"\n"
0 0 18 3 44 #"; where r is the radius of the table and the"
0 0 28 29 1 #"\n"
0 0 18 3 51 #"; center is the location of the center of the table"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 18 3 23 #"; Ball Table -> Boolean"
0 0 28 29 1 #"\n"
0 0 18 3 40 #"; tells whether the ball is on the table"
0 0 28 29 1 #"\n"
0 0 18 3 10 #"; Template"
0 0 28 29 1 #"\n"
0 0 18 3 10 #"; --------"
0 0 28 29 1 #"\n"
0 7         277 68           0 0           0 45 0 28 3 1 #"("
0 0 16 3 6 #"define"
0 0 28 3 2 #" ("
0 0 14 3 9 #"on-table?"
0 0 28 3 1 #" "
0 0 14 3 1 #"b"
0 0 28 3 1 #" "
0 0 14 3 1 #"t"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 14 3 3 #"..."
0 0 28 3 2 #" ("
0 0 14 3 3 #"..."
0 0 28 29 1 #"\n"
0 0 28 3 9 #"        ("
0 0 14 3 6 #"ball-x"
0 0 28 3 1 #" "
0 0 14 3 1 #"b"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 9 #"        ("
0 0 14 3 6 #"posn-x"
0 0 28 3 2 #" ("
0 0 14 3 12 #"table-center"
0 0 28 3 1 #" "
0 0 14 3 1 #"t"
0 0 28 3 3 #")))"
0 0 28 29 1 #"\n"
0 0 28 3 8 #"       ("
0 0 14 3 3 #"..."
0 0 28 29 1 #"\n"
0 0 28 3 9 #"        ("
0 0 14 3 6 #"ball-y"
0 0 28 3 1 #" "
0 0 14 3 1 #"b"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 9 #"        ("
0 0 14 3 6 #"posn-y"
0 0 28 3 2 #" ("
0 0 14 3 12 #"table-center"
0 0 28 3 1 #" "
0 0 14 3 1 #"t"
0 0 28 3 5 #")))))"
0           0 0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 16 3 6 #"define"
0 0 28 3 2 #" ("
0 0 14 3 9 #"on-table?"
0 0 28 3 1 #" "
0 0 14 3 1 #"b"
0 0 28 3 1 #" "
0 0 14 3 1 #"t"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 28 3 2 #" ("
0 0 14 3 1 #">"
0 0 28 3 2 #" ("
0 0 14 3 4 #"sqrt"
0 0 28 3 2 #" ("
0 0 14 3 1 #"+"
0 0 28 29 1 #"\n"
0 0 28 3 8 #"       ("
0 0 14 3 4 #"expt"
0 0 28 3 2 #" ("
0 0 14 3 1 #"-"
0 0 28 29 1 #"\n"
0 0 28 3 9 #"        ("
0 0 14 3 6 #"ball-x"
0 0 28 3 1 #" "
0 0 14 3 1 #"b"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 9 #"        ("
0 0 14 3 6 #"posn-x"
0 0 28 3 2 #" ("
0 0 14 3 12 #"table-center"
0 0 28 3 1 #" "
0 0 14 3 1 #"t"
0 0 28 3 4 #"))) "
0 0 24 3 1 #"2"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 8 #"       ("
0 0 14 3 4 #"expt"
0 0 28 3 2 #" ("
0 0 14 3 1 #"-"
0 0 28 29 1 #"\n"
0 0 28 3 9 #"        ("
0 0 14 3 6 #"ball-y"
0 0 28 3 1 #" "
0 0 14 3 1 #"b"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 9 #"        ("
0 0 14 3 6 #"posn-y"
0 0 28 3 2 #" ("
0 0 14 3 12 #"table-center"
0 0 28 3 1 #" "
0 0 14 3 1 #"t"
0 0 28 3 4 #"))) "
0 0 24 3 1 #"2"
0 0 28 3 5 #"))) ("
0 0 14 3 7 #"table-r"
0 0 28 3 1 #" "
0 0 14 3 1 #"t"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"      "
0 0 24 3 6 #"#false"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"      "
0 0 24 3 5 #"#true"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 28 29 1 #"\n"
0 0 28 3 2 #" ("
0 0 14 3 9 #"on-table?"
0 0 28 3 2 #" ("
0 0 14 3 9 #"make-ball"
0 0 28 3 1 #" "
0 0 24 3 2 #"10"
0 0 28 3 1 #" "
0 0 24 3 2 #"10"
0 0 28 3 1 #" "
0 0 24 3 1 #"0"
0 0 28 3 1 #" "
0 0 24 3 1 #"0"
0 0 28 3 3 #") ("
0 0 14 3 10 #"make-table"
0 0 28 3 1 #" "
0 0 24 3 2 #"20"
0 0 28 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 28 3 1 #" "
0 0 24 3 1 #"0"
0 0 28 3 1 #" "
0 0 24 3 1 #"0"
0 0 28 3 3 #")))"
0 0 28 29 1 #"\n"
0 0 28 3 1 #" "
0 0 24 3 5 #"#true"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 28 29 1 #"\n"
0 0 28 3 2 #" ("
0 0 14 3 9 #"on-table?"
0 0 28 3 2 #" ("
0 0 14 3 9 #"make-ball"
0 0 28 3 1 #" "
0 0 24 3 2 #"50"
0 0 28 3 1 #" "
0 0 24 3 2 #"10"
0 0 28 3 1 #" "
0 0 24 3 1 #"0"
0 0 28 3 1 #" "
0 0 24 3 1 #"0"
0 0 28 3 3 #") ("
0 0 14 3 10 #"make-table"
0 0 28 3 1 #" "
0 0 24 3 2 #"20"
0 0 28 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 28 3 1 #" "
0 0 24 3 1 #"0"
0 0 28 3 1 #" "
0 0 24 3 1 #"0"
0 0 28 3 3 #")))"
0 0 28 29 1 #"\n"
0 0 28 3 1 #" "
0 0 24 3 6 #"#false"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 18 3 12 #"; Exercise 3"
0 0 28 29 1 #"\n"
0 0 18 3 14 #"; Ball -> Ball"
0 0 28 29 1 #"\n"
0 0 18 3 54 #"; Inputs a Ball and outputs a new Ball which moves its"
0 0 28 29 1 #"\n"
0 0 18 3 70
(
 #"; x & y coordinates according to the ball's velocity for one time un"
 #"it"
) 0 0 28 29 1 #"\n"
0 0 18 3 11 #"; Template:"
0 0 28 29 1 #"\n"
0 0 18 3 10 #"; --------"
0 0 28 29 1 #"\n"
0 7         229 68           0 0           0 37 0 28 3 1 #"("
0 0 16 3 6 #"define"
0 0 28 3 2 #" ("
0 0 14 3 9 #"move-ball"
0 0 28 3 1 #" "
0 0 14 3 1 #"b"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 14 3 9 #"make-ball"
0 0 28 3 2 #" ("
0 0 14 3 3 #"..."
0 0 28 3 2 #" ("
0 0 14 3 6 #"ball-x"
0 0 28 3 1 #" "
0 0 14 3 1 #"b"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 3 14 #"             ("
0 0 14 3 3 #"..."
0 0 28 3 2 #" ("
0 0 14 3 6 #"ball-y"
0 0 28 3 1 #" "
0 0 14 3 1 #"b"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 3 14 #"             ("
0 0 14 3 7 #"ball-vx"
0 0 28 3 1 #" "
0 0 14 3 1 #"b"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 14 #"             ("
0 0 14 3 7 #"ball-vy"
0 0 28 3 1 #" "
0 0 14 3 1 #"b"
0 0 28 3 3 #")))"
0           0 0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 16 3 6 #"define"
0 0 28 3 2 #" ("
0 0 14 3 9 #"move-ball"
0 0 28 3 1 #" "
0 0 14 3 1 #"b"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 14 3 9 #"make-ball"
0 0 28 3 2 #" ("
0 0 14 3 1 #"+"
0 0 28 3 2 #" ("
0 0 14 3 6 #"ball-x"
0 0 28 3 1 #" "
0 0 14 3 1 #"b"
0 0 28 3 3 #") ("
0 0 14 3 1 #"*"
0 0 28 3 1 #" "
0 0 24 3 1 #"1"
0 0 28 3 2 #" ("
0 0 14 3 7 #"ball-vx"
0 0 28 3 1 #" "
0 0 14 3 1 #"b"
0 0 28 3 3 #")))"
0 0 28 29 1 #"\n"
0 0 28 3 14 #"             ("
0 0 14 3 1 #"+"
0 0 28 3 2 #" ("
0 0 14 3 6 #"ball-y"
0 0 28 3 1 #" "
0 0 14 3 1 #"b"
0 0 28 3 3 #") ("
0 0 14 3 1 #"*"
0 0 28 3 1 #" "
0 0 24 3 1 #"1"
0 0 28 3 2 #" ("
0 0 14 3 7 #"ball-vy"
0 0 28 3 1 #" "
0 0 14 3 1 #"b"
0 0 28 3 3 #")))"
0 0 28 29 1 #"\n"
0 0 28 3 14 #"             ("
0 0 14 3 7 #"ball-vx"
0 0 28 3 1 #" "
0 0 14 3 1 #"b"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 14 #"             ("
0 0 14 3 7 #"ball-vy"
0 0 28 3 1 #" "
0 0 14 3 1 #"b"
0 0 28 3 3 #")))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 28 3 2 #" ("
0 0 14 3 9 #"move-ball"
0 0 28 3 2 #" ("
0 0 14 3 9 #"make-ball"
0 0 28 3 1 #" "
0 0 24 3 2 #"10"
0 0 28 3 1 #" "
0 0 24 3 2 #"10"
0 0 28 3 1 #" "
0 0 24 3 1 #"1"
0 0 28 3 1 #" "
0 0 24 3 1 #"1"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 3 15 #"              ("
0 0 14 3 9 #"make-ball"
0 0 28 3 1 #" "
0 0 24 3 2 #"11"
0 0 28 3 1 #" "
0 0 24 3 2 #"11"
0 0 28 3 1 #" "
0 0 24 3 1 #"1"
0 0 28 3 1 #" "
0 0 24 3 1 #"1"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 18 3 12 #"; Exercise 4"
0 0 28 29 1 #"\n"
0 0 18 3 22 #"; Ball Table -> Number"
0 0 28 29 1 #"\n"
0 0 18 3 68
#"; Return how many steps it will take for a given ball to fall off of"
0 0 28 29 1 #"\n"
0 0 18 3 18 #"; the given table."
0 0 28 29 1 #"\n"
0 7         235 68           0 0           0 38 0 28 3 1 #"("
0 0 16 3 6 #"define"
0 0 28 3 2 #" ("
0 0 14 3 8 #"how-long"
0 0 28 3 1 #" "
0 0 14 3 1 #"b"
0 0 28 3 1 #" "
0 0 14 3 1 #"t"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 16 3 4 #"cond"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"    [("
0 0 14 3 3 #"not"
0 0 28 3 2 #" ("
0 0 14 3 9 #"on-table?"
0 0 28 3 1 #" "
0 0 14 3 1 #"b"
0 0 28 3 1 #" "
0 0 14 3 1 #"t"
0 0 28 3 3 #")) "
0 0 14 3 3 #"..."
0 0 28 3 1 #"]"
0 0 28 29 1 #"\n"
0 0 28 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 28 3 2 #" ("
0 0 14 3 3 #"..."
0 0 28 3 2 #" ("
0 0 14 3 8 #"how-long"
0 0 28 3 2 #" ("
0 0 14 3 3 #"..."
0 0 28 3 1 #" "
0 0 14 3 1 #"b"
0 0 28 3 2 #") "
0 0 14 3 1 #"t"
0 0 28 3 5 #"))]))"
0           0 0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 16 3 6 #"define"
0 0 28 3 2 #" ("
0 0 14 3 8 #"how-long"
0 0 28 3 1 #" "
0 0 14 3 1 #"b"
0 0 28 3 1 #" "
0 0 14 3 1 #"t"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 16 3 4 #"cond"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"    [("
0 0 14 3 3 #"not"
0 0 28 3 2 #" ("
0 0 14 3 9 #"on-table?"
0 0 28 3 1 #" "
0 0 14 3 1 #"b"
0 0 28 3 1 #" "
0 0 14 3 1 #"t"
0 0 28 3 3 #")) "
0 0 24 3 1 #"1"
0 0 28 3 1 #"]"
0 0 28 29 1 #"\n"
0 0 28 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 28 3 2 #" ("
0 0 14 3 1 #"+"
0 0 28 3 1 #" "
0 0 24 3 1 #"1"
0 0 28 3 2 #" ("
0 0 14 3 8 #"how-long"
0 0 28 3 2 #" ("
0 0 14 3 9 #"move-ball"
0 0 28 3 1 #" "
0 0 14 3 1 #"b"
0 0 28 3 2 #") "
0 0 14 3 1 #"t"
0 0 28 3 5 #"))]))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 28 3 2 #" ("
0 0 14 3 8 #"how-long"
0 0 28 3 2 #" ("
0 0 14 3 9 #"make-ball"
0 0 28 3 1 #" "
0 0 24 3 1 #"0"
0 0 28 3 1 #" "
0 0 24 3 1 #"0"
0 0 28 3 1 #" "
0 0 24 3 1 #"1"
0 0 28 3 1 #" "
0 0 24 3 1 #"1"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 25 #"                        ("
0 0 14 3 10 #"make-table"
0 0 28 3 1 #" "
0 0 24 3 1 #"5"
0 0 28 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 28 3 1 #" "
0 0 24 3 1 #"0"
0 0 28 3 1 #" "
0 0 24 3 1 #"0"
0 0 28 3 4 #"))) "
0 0 24 3 1 #"5"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 18 3 12 #"; Exercise 5"
0 0 28 29 1 #"\n"
0 0 18 3 70
(
 #"; For the grid helper function, we will use the take and drop functi"
 #"on"
) 0 0 28 29 1 #"\n"
0 0 18 3 66
#"; defined earlier in the assignment. It is essentially the same as"
0 0 28 29 1 #"\n"
0 0 18 3 33 #"; the earlier 'bundle' function. "
0 0 28 29 1 #"\n"
0 0 18 3 33 #"; [Listof X] Number -> [Listof X]"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 16 3 6 #"define"
0 0 28 3 2 #" ("
0 0 14 3 11 #"grid-helper"
0 0 28 3 1 #" "
0 0 14 3 1 #"l"
0 0 28 3 1 #" "
0 0 14 3 1 #"n"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 5 #"    ("
0 0 16 3 4 #"cond"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"    [("
0 0 14 3 6 #"empty?"
0 0 28 3 1 #" "
0 0 14 3 1 #"l"
0 0 28 3 2 #") "
0 0 24 3 1 #"'"
0 0 28 3 3 #"()]"
0 0 28 29 1 #"\n"
0 0 28 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 28 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 28 3 2 #" ("
0 0 14 3 4 #"take"
0 0 28 3 1 #" "
0 0 14 3 1 #"l"
0 0 28 3 1 #" "
0 0 14 3 1 #"n"
0 0 28 3 3 #") ("
0 0 14 3 11 #"grid-helper"
0 0 28 3 2 #" ("
0 0 14 3 4 #"drop"
0 0 28 3 1 #" "
0 0 14 3 1 #"l"
0 0 28 3 1 #" "
0 0 14 3 1 #"n"
0 0 28 3 2 #") "
0 0 14 3 1 #"n"
0 0 28 3 5 #"))]))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 18 3 33 #"; [Listof Number] -> [Listof LoN]"
0 0 28 29 1 #"\n"
0 0 18 3 68
#"; Given a list of numbers whose length is a perfect square, return a"
0 0 28 29 1 #"\n"
0 0 18 3 7 #"; grid."
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 16 3 6 #"define"
0 0 28 3 2 #" ("
0 0 14 3 9 #"make-grid"
0 0 28 3 1 #" "
0 0 14 3 1 #"l"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 14 3 11 #"grid-helper"
0 0 28 3 1 #" "
0 0 14 3 1 #"l"
0 0 28 3 2 #" ("
0 0 14 3 4 #"sqrt"
0 0 28 3 2 #" ("
0 0 14 3 6 #"length"
0 0 28 3 1 #" "
0 0 14 3 1 #"l"
0 0 28 3 4 #"))))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 28 3 2 #" ("
0 0 14 3 9 #"make-grid"
0 0 28 3 2 #" ("
0 0 14 3 4 #"list"
0 0 28 3 1 #" "
0 0 24 3 1 #"1"
0 0 28 3 1 #" "
0 0 24 3 1 #"2"
0 0 28 3 1 #" "
0 0 24 3 1 #"3"
0 0 28 3 1 #" "
0 0 24 3 1 #"4"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 3 15 #"              ("
0 0 14 3 4 #"list"
0 0 28 3 2 #" ("
0 0 14 3 4 #"list"
0 0 28 3 1 #" "
0 0 24 3 1 #"1"
0 0 28 3 1 #" "
0 0 24 3 1 #"2"
0 0 28 3 3 #") ("
0 0 14 3 4 #"list"
0 0 28 3 1 #" "
0 0 24 3 1 #"3"
0 0 28 3 1 #" "
0 0 24 3 1 #"4"
0 0 28 3 3 #")))"
0 0 28 29 1 #"\n"
0           0
