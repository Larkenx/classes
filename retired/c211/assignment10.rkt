#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 6.2.1 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 32 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsi"
 #"s-snip-wxme.rkt\" \"drracket\" \"private\"))\0"
) 2 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 80 0 1 #"\0"
0 75 1 #"\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 12 #"Inconsolata\0"
0 14 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 191 191 191 49 51 55 -1 -1
2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 142 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 92 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 254 252 120 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 169 169 169 0 0 0 -1 -1 2
37 #"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 169 169 169 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 132 230 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 132 230 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 212 251 120 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 212 251 120 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 101 187 226 0 0 0 -1 -1 2
37 #"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 101 187 226 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 254 252 120 0 0 0 -1 -1 2
39 #"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 254 252 120 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 234 234 234 0 0 0 -1 -1 2
42 #"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 234 234 234 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 16
#"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 147 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 192 192 192 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 192 192 192 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 0 0 0 94 94 94 255 212 120 -1 -1
2 27 #"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 0 0 0 94 94 94 255 212 120 -1 -1
4 1 #"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 0 1 #"\0"
0 75 12 #"Inconsolata\0"
0.0 14 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 191 191 191
49 51 55 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 142 0 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 93 -1 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 147 0 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 49 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 28 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 16 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 18 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 51 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 0 1 #"\0"
0 -1 1 #"\0"
0.0 13 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
0.0 13 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 65 105 225 0
0 0 -1 -1 0 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
0 -1 14 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 0 -1 -1 24 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1           0 2999 0 4 3 85
(
 #";; The first three lines of this file were inserted by DrRacket. The"
 #"y record metadata"
) 0 0 4 29 1 #"\n"
0 0 4 3 85
(
 #";; about the language level of this file in a form that our tools ca"
 #"n easily process."
) 0 0 4 29 1 #"\n"
0 0 4 3 193
(
 #"#reader(lib \"htdp-intermediate-lambda-reader.ss\" \"lang\")((modnam"
 #"e assignment10) (read-case-sensitive #t) (teachpacks ()) (htdp-setti"
 #"ngs #(#t constructor repeating-decimal #f #t none #f () #f)))"
) 0 0 4 29 1 #"\n"
0 0 28 3 1 #"("
0 0 16 3 13 #"define-struct"
0 0 28 3 1 #" "
0 0 14 3 7 #"no-info"
0 0 28 3 4 #" [])"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 16 3 6 #"define"
0 0 28 3 1 #" "
0 0 14 3 4 #"NONE"
0 0 28 3 2 #" ("
0 0 14 3 12 #"make-no-info"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 16 3 13 #"define-struct"
0 0 28 3 1 #" "
0 0 14 3 4 #"node"
0 0 28 3 2 #" ["
0 0 14 3 3 #"ssn"
0 0 28 3 1 #" "
0 0 14 3 4 #"name"
0 0 28 3 1 #" "
0 0 14 3 4 #"left"
0 0 28 3 1 #" "
0 0 14 3 5 #"right"
0 0 28 3 2 #"])"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 18 3 37 #"; A BinaryTree (short: BT) is one of:"
0 0 28 29 1 #"\n"
0 0 18 3 10 #"; \342\200\223 NONE"
0 0 28 29 1 #"\n"
0 0 18 3 37 #"; \342\200\223 (make-node Number Symbol BT BT)"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 18 3 14 #"; Exercise 309"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 18 3 45 #"; search-bt: Number BT -> [Boolean or Symbol]"
0 0 28 29 1 #"\n"
0 0 18 3 67
#"; Given a number and a BT, return a name associated with the number"
0 0 28 29 1 #"\n"
0 0 18 3 53 #"; if one such number exists. Otherwise, return false."
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 18 3 11 #"; Template:"
0 0 28 29 1 #"\n"
0 0 18 3 11 #"; ---------"
0 0 28 29 1 #"\n"
0 7         367 66           0 0           0 60 0 28 3 1 #"("
0 0 16 3 6 #"define"
0 0 28 3 2 #" ("
0 0 14 3 9 #"search-bt"
0 0 28 3 1 #" "
0 0 14 3 1 #"n"
0 0 28 3 1 #" "
0 0 14 3 2 #"bt"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 16 3 4 #"cond"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"    [("
0 0 14 3 8 #"no-info?"
0 0 28 3 1 #" "
0 0 14 3 2 #"bt"
0 0 28 3 3 #") ("
0 0 14 3 3 #"..."
0 0 28 3 2 #")]"
0 0 28 29 1 #"\n"
0 0 28 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 28 3 2 #" ("
0 0 14 3 3 #"..."
0 0 28 3 2 #" ("
0 0 14 3 8 #"node-ssn"
0 0 28 3 1 #" "
0 0 14 3 2 #"bt"
0 0 28 3 2 #") "
0 0 14 3 3 #"..."
0 0 28 3 2 #" ("
0 0 14 3 9 #"node-name"
0 0 28 3 1 #" "
0 0 14 3 2 #"bt"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 16 #"               ("
0 0 14 3 3 #"..."
0 0 28 3 2 #" ("
0 0 14 3 9 #"search-bt"
0 0 28 3 1 #" "
0 0 14 3 1 #"n"
0 0 28 3 2 #" ("
0 0 14 3 9 #"node-left"
0 0 28 3 1 #" "
0 0 14 3 2 #"bt"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 3 16 #"               ("
0 0 14 3 3 #"..."
0 0 28 3 2 #" ("
0 0 14 3 9 #"search-bt"
0 0 28 3 1 #" "
0 0 14 3 1 #"n"
0 0 28 3 2 #" ("
0 0 14 3 10 #"node-right"
0 0 28 3 1 #" "
0 0 14 3 2 #"bt"
0 0 28 3 8 #")))))]))"
0           0 0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 16 3 6 #"define"
0 0 28 3 2 #" ("
0 0 14 3 9 #"search-bt"
0 0 28 3 1 #" "
0 0 14 3 1 #"n"
0 0 28 3 1 #" "
0 0 14 3 2 #"bt"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 16 3 4 #"cond"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"    [("
0 0 14 3 8 #"no-info?"
0 0 28 3 1 #" "
0 0 14 3 2 #"bt"
0 0 28 3 2 #") "
0 0 24 3 6 #"#false"
0 0 28 3 1 #"]"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"    [("
0 0 14 3 6 #"equal?"
0 0 28 3 2 #" ("
0 0 14 3 8 #"node-ssn"
0 0 28 3 1 #" "
0 0 14 3 2 #"bt"
0 0 28 3 2 #") "
0 0 14 3 1 #"n"
0 0 28 3 3 #") ("
0 0 14 3 9 #"node-name"
0 0 28 3 1 #" "
0 0 14 3 2 #"bt"
0 0 28 3 2 #")]"
0 0 28 29 1 #"\n"
0 0 28 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 28 3 2 #" ("
0 0 14 3 2 #"if"
0 0 28 3 2 #" ("
0 0 14 3 8 #"boolean?"
0 0 28 3 2 #" ("
0 0 14 3 9 #"search-bt"
0 0 28 3 1 #" "
0 0 14 3 1 #"n"
0 0 28 3 2 #" ("
0 0 14 3 9 #"node-left"
0 0 28 3 1 #" "
0 0 14 3 2 #"bt"
0 0 28 3 3 #")))"
0 0 28 29 1 #"\n"
0 0 28 3 15 #"              ("
0 0 14 3 9 #"search-bt"
0 0 28 3 1 #" "
0 0 14 3 1 #"n"
0 0 28 3 2 #" ("
0 0 14 3 10 #"node-right"
0 0 28 3 1 #" "
0 0 14 3 2 #"bt"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 3 15 #"              ("
0 0 14 3 9 #"search-bt"
0 0 28 3 1 #" "
0 0 14 3 1 #"n"
0 0 28 3 2 #" ("
0 0 14 3 9 #"node-left"
0 0 28 3 1 #" "
0 0 14 3 2 #"bt"
0 0 28 3 4 #")))]"
0 0 28 29 1 #"\n"
0 0 28 3 5 #"    )"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  )"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 16 3 6 #"define"
0 0 28 3 1 #" "
0 0 14 3 7 #"test-bt"
0 0 28 3 2 #" ("
0 0 14 3 9 #"make-node"
0 0 28 3 1 #" "
0 0 24 3 8 #"92017810"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 14 3 4 #"John"
0 0 28 3 1 #" "
0 0 14 3 4 #"NONE"
0 0 28 29 1 #"\n"
0 0 28 3 28 #"                           ("
0 0 14 3 9 #"make-node"
0 0 28 3 1 #" "
0 0 24 3 7 #"8675309"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 14 3 5 #"Stacy"
0 0 28 3 1 #" "
0 0 14 3 4 #"NONE"
0 0 28 3 1 #" "
0 0 14 3 4 #"NONE"
0 0 28 3 3 #")))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 28 3 2 #" ("
0 0 14 3 9 #"search-bt"
0 0 28 3 1 #" "
0 0 24 3 8 #"92017810"
0 0 28 3 1 #" "
0 0 14 3 7 #"test-bt"
0 0 28 3 2 #") "
0 0 24 3 1 #"'"
0 0 14 3 4 #"John"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 28 3 2 #" ("
0 0 14 3 9 #"search-bt"
0 0 28 3 1 #" "
0 0 24 3 7 #"8675309"
0 0 28 3 1 #" "
0 0 14 3 7 #"test-bt"
0 0 28 3 2 #") "
0 0 24 3 1 #"'"
0 0 14 3 5 #"Stacy"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 28 3 2 #" ("
0 0 14 3 9 #"search-bt"
0 0 28 3 1 #" "
0 0 24 3 8 #"01010101"
0 0 28 3 1 #" "
0 0 14 3 7 #"test-bt"
0 0 28 3 2 #") "
0 0 24 3 6 #"#false"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 18 3 14 #"; Exericse 310"
0 0 28 29 1 #"\n"
0 0 18 3 32 #"; inorder: BT -> [Listof Number]"
0 0 28 29 1 #"\n"
0 0 18 3 72
(
 #"; Given a binary tree, produce a sequence of the SSNs from left to r"
 #"ight"
) 0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 18 3 11 #"; Template:"
0 0 28 29 1 #"\n"
0 0 18 3 11 #"; ---------"
0 0 28 29 1 #"\n"
0 7         271 66           0 0           0 44 0 28 3 1 #"("
0 0 16 3 6 #"define"
0 0 28 3 2 #" ("
0 0 14 3 7 #"inorder"
0 0 28 3 1 #" "
0 0 14 3 2 #"bt"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 14 3 3 #"..."
0 0 28 29 1 #"\n"
0 0 28 3 6 #"    [("
0 0 14 3 8 #"no-info?"
0 0 28 3 1 #" "
0 0 14 3 2 #"bt"
0 0 28 3 2 #") "
0 0 14 3 5 #"empty"
0 0 28 3 1 #"]"
0 0 28 29 1 #"\n"
0 0 28 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 28 3 2 #" ("
0 0 14 3 3 #"..."
0 0 28 3 2 #" ("
0 0 14 3 8 #"node-ssn"
0 0 28 3 1 #" "
0 0 14 3 2 #"bt"
0 0 28 3 3 #") ("
0 0 14 3 3 #"..."
0 0 28 3 2 #" ("
0 0 14 3 7 #"inorder"
0 0 28 3 2 #" ("
0 0 14 3 9 #"node-left"
0 0 28 3 1 #" "
0 0 14 3 2 #"bt"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 3 35 #"                                  ("
0 0 14 3 7 #"inorder"
0 0 28 3 2 #" ("
0 0 14 3 10 #"node-right"
0 0 28 3 1 #" "
0 0 14 3 2 #"bt"
0 0 28 3 7 #"))))]))"
0           0 0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 16 3 6 #"define"
0 0 28 3 2 #" ("
0 0 14 3 7 #"inorder"
0 0 28 3 1 #" "
0 0 14 3 2 #"bt"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 28 3 2 #" ("
0 0 14 3 8 #"no-info?"
0 0 28 3 1 #" "
0 0 14 3 2 #"bt"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"      "
0 0 14 3 5 #"empty"
0 0 28 3 1 #" "
0 0 18 3 24 #"; empty =/= (list empty)"
0 0 28 29 1 #"\n"
0 0 28 3 7 #"      ("
0 0 14 3 6 #"append"
0 0 28 3 2 #" ("
0 0 14 3 7 #"inorder"
0 0 28 3 2 #" ("
0 0 14 3 9 #"node-left"
0 0 28 3 1 #" "
0 0 14 3 2 #"bt"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 3 15 #"              ("
0 0 14 3 4 #"cons"
0 0 28 3 2 #" ("
0 0 14 3 8 #"node-ssn"
0 0 28 3 1 #" "
0 0 14 3 2 #"bt"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 21 #"                    ("
0 0 14 3 7 #"inorder"
0 0 28 3 2 #" ("
0 0 14 3 10 #"node-right"
0 0 28 3 1 #" "
0 0 14 3 2 #"bt"
0 0 28 3 6 #"))))))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 16 3 6 #"define"
0 0 28 3 1 #" "
0 0 14 3 10 #"test-tree2"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 14 3 9 #"make-node"
0 0 28 3 1 #" "
0 0 24 3 2 #"10"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 14 3 1 #"C"
0 0 28 29 1 #"\n"
0 0 28 3 14 #"             ("
0 0 14 3 9 #"make-node"
0 0 28 3 1 #" "
0 0 24 3 1 #"5"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 14 3 1 #"B"
0 0 28 29 1 #"\n"
0 0 28 3 25 #"                        ("
0 0 14 3 9 #"make-node"
0 0 28 3 1 #" "
0 0 24 3 1 #"4"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 14 3 2 #"B1"
0 0 28 3 1 #" "
0 0 14 3 4 #"NONE"
0 0 28 3 1 #" "
0 0 14 3 4 #"NONE"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 25 #"                        ("
0 0 14 3 9 #"make-node"
0 0 28 3 1 #" "
0 0 24 3 1 #"6"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 14 3 2 #"B2"
0 0 28 3 1 #" "
0 0 14 3 4 #"NONE"
0 0 28 29 1 #"\n"
0 0 28 3 36 #"                                   ("
0 0 14 3 9 #"make-node"
0 0 28 3 1 #" "
0 0 24 3 1 #"7"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 14 3 1 #"A"
0 0 28 3 1 #" "
0 0 14 3 4 #"NONE"
0 0 28 3 1 #" "
0 0 14 3 4 #"NONE"
0 0 28 3 3 #")))"
0 0 28 29 1 #"\n"
0 0 28 3 14 #"             ("
0 0 14 3 9 #"make-node"
0 0 28 3 1 #" "
0 0 24 3 2 #"12"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 14 3 1 #"D"
0 0 28 3 1 #" "
0 0 14 3 4 #"NONE"
0 0 28 3 1 #" "
0 0 14 3 4 #"NONE"
0 0 28 3 3 #")))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 28 3 2 #" ("
0 0 14 3 7 #"inorder"
0 0 28 3 1 #" "
0 0 14 3 10 #"test-tree2"
0 0 28 3 3 #") ("
0 0 14 3 4 #"list"
0 0 28 3 1 #" "
0 0 24 3 1 #"4"
0 0 28 3 1 #" "
0 0 24 3 1 #"5"
0 0 28 3 1 #" "
0 0 24 3 1 #"6"
0 0 28 3 1 #" "
0 0 24 3 1 #"7"
0 0 28 3 1 #" "
0 0 24 3 2 #"10"
0 0 28 3 1 #" "
0 0 24 3 2 #"12"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 18 3 14 #"; Exercise 311"
0 0 28 29 1 #"\n"
0 0 18 3 47 #"; search-bst: Number BST -> [Symbol or No-info]"
0 0 28 29 1 #"\n"
0 0 18 3 61
#"; Given a SSN and a BST, return the value associated with the"
0 0 28 29 1 #"\n"
0 0 18 3 42 #"; SSN. If one does not exist, return NONE."
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 18 3 11 #"; Template:"
0 0 28 29 1 #"\n"
0 0 18 3 10 #"; --------"
0 0 28 29 1 #"\n"
0 7         421 66           0 0           0 69 0 28 3 1 #"("
0 0 16 3 6 #"define"
0 0 28 3 2 #" ("
0 0 14 3 10 #"search-bst"
0 0 28 3 1 #" "
0 0 14 3 1 #"n"
0 0 28 3 1 #" "
0 0 14 3 3 #"bst"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 14 3 3 #"..."
0 0 28 29 1 #"\n"
0 0 28 3 5 #"   [("
0 0 14 3 8 #"no-info?"
0 0 28 3 1 #" "
0 0 14 3 2 #"bt"
0 0 28 3 2 #") "
0 0 14 3 3 #"..."
0 0 28 3 1 #"]"
0 0 28 29 1 #"\n"
0 0 28 3 5 #"   [("
0 0 14 3 6 #"equal?"
0 0 28 3 2 #" ("
0 0 14 3 8 #"node-ssn"
0 0 28 3 1 #" "
0 0 14 3 3 #"bst"
0 0 28 3 2 #") "
0 0 14 3 1 #"n"
0 0 28 3 2 #") "
0 0 14 3 3 #"..."
0 0 28 3 1 #"]"
0 0 28 29 1 #"\n"
0 0 28 3 4 #"   ["
0 0 14 3 4 #"else"
0 0 28 29 1 #"\n"
0 0 28 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 28 3 2 #" ("
0 0 14 3 1 #"<"
0 0 28 3 2 #" ("
0 0 14 3 8 #"node-ssn"
0 0 28 3 2 #" ("
0 0 14 3 9 #"node-left"
0 0 28 3 1 #" "
0 0 14 3 3 #"bst"
0 0 28 3 3 #")) "
0 0 14 3 1 #"n"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 9 #"        ("
0 0 14 3 10 #"search-bst"
0 0 28 3 1 #" "
0 0 14 3 1 #"n"
0 0 28 3 2 #" ("
0 0 14 3 10 #"node-right"
0 0 28 3 1 #" "
0 0 14 3 3 #"bst"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 3 9 #"        ("
0 0 14 3 10 #"search-bst"
0 0 28 3 1 #" "
0 0 14 3 1 #"n"
0 0 28 3 2 #" ("
0 0 14 3 9 #"node-left"
0 0 28 3 1 #" "
0 0 14 3 3 #"bst"
0 0 28 3 8 #")))]))  "
0           0 0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 16 3 6 #"define"
0 0 28 3 2 #" ("
0 0 14 3 10 #"search-bst"
0 0 28 3 1 #" "
0 0 14 3 1 #"n"
0 0 28 3 1 #" "
0 0 14 3 3 #"bst"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 16 3 4 #"cond"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"    [("
0 0 14 3 8 #"no-info?"
0 0 28 3 1 #" "
0 0 14 3 3 #"bst"
0 0 28 3 2 #") "
0 0 14 3 4 #"NONE"
0 0 28 3 1 #"]"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"    [("
0 0 14 3 6 #"equal?"
0 0 28 3 2 #" ("
0 0 14 3 8 #"node-ssn"
0 0 28 3 1 #" "
0 0 14 3 3 #"bst"
0 0 28 3 2 #") "
0 0 14 3 1 #"n"
0 0 28 3 3 #") ("
0 0 14 3 9 #"node-name"
0 0 28 3 1 #" "
0 0 14 3 3 #"bst"
0 0 28 3 2 #")]"
0 0 28 29 1 #"\n"
0 0 28 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"     ("
0 0 14 3 2 #"if"
0 0 28 3 2 #" ("
0 0 14 3 1 #"<"
0 0 28 29 1 #"\n"
0 0 28 3 11 #"          ("
0 0 14 3 2 #"if"
0 0 28 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 28 3 2 #" ("
0 0 14 3 9 #"node-left"
0 0 28 3 1 #" "
0 0 14 3 3 #"bst"
0 0 28 3 2 #") "
0 0 14 3 4 #"NONE"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 15 #"              ("
0 0 14 3 4 #"sub1"
0 0 28 3 1 #" "
0 0 14 3 1 #"n"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 15 #"              ("
0 0 14 3 8 #"node-ssn"
0 0 28 3 2 #" ("
0 0 14 3 9 #"node-left"
0 0 28 3 1 #" "
0 0 14 3 3 #"bst"
0 0 28 3 4 #"))) "
0 0 14 3 1 #"n"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 10 #"         ("
0 0 14 3 10 #"search-bst"
0 0 28 3 1 #" "
0 0 14 3 1 #"n"
0 0 28 3 2 #" ("
0 0 14 3 10 #"node-right"
0 0 28 3 1 #" "
0 0 14 3 3 #"bst"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 3 10 #"         ("
0 0 14 3 10 #"search-bst"
0 0 28 3 1 #" "
0 0 14 3 1 #"n"
0 0 28 3 2 #" ("
0 0 14 3 9 #"node-left"
0 0 28 3 1 #" "
0 0 14 3 3 #"bst"
0 0 28 3 6 #")))]))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 28 29 1 #"\n"
0 0 28 3 2 #" ("
0 0 14 3 10 #"search-bst"
0 0 28 3 1 #" "
0 0 24 3 3 #"409"
0 0 28 3 2 #" ("
0 0 14 3 9 #"make-node"
0 0 28 3 1 #" "
0 0 24 3 3 #"400"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 14 3 3 #"joe"
0 0 28 29 1 #"\n"
0 0 28 3 29 #"                            ("
0 0 14 3 9 #"make-node"
0 0 28 3 1 #" "
0 0 24 3 3 #"230"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 14 3 4 #"john"
0 0 28 3 1 #" "
0 0 14 3 4 #"NONE"
0 0 28 3 1 #" "
0 0 14 3 4 #"NONE"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 29 #"                            ("
0 0 14 3 9 #"make-node"
0 0 28 3 1 #" "
0 0 24 3 3 #"409"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 14 3 4 #"mary"
0 0 28 3 1 #" "
0 0 14 3 4 #"NONE"
0 0 28 3 1 #" "
0 0 14 3 4 #"NONE"
0 0 28 3 3 #")))"
0 0 28 29 1 #"\n"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 14 3 4 #"mary"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 28 29 1 #"\n"
0 0 28 3 2 #" ("
0 0 14 3 10 #"search-bst"
0 0 28 3 1 #" "
0 0 24 3 3 #"409"
0 0 28 3 2 #" ("
0 0 14 3 9 #"make-node"
0 0 28 3 1 #" "
0 0 24 3 3 #"400"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 14 3 3 #"joe"
0 0 28 29 1 #"\n"
0 0 28 3 29 #"                            ("
0 0 14 3 9 #"make-node"
0 0 28 3 1 #" "
0 0 24 3 3 #"230"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 14 3 4 #"john"
0 0 28 3 1 #" "
0 0 14 3 4 #"NONE"
0 0 28 3 1 #" "
0 0 14 3 4 #"NONE"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 29 #"                            ("
0 0 14 3 9 #"make-node"
0 0 28 3 1 #" "
0 0 24 3 3 #"600"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 14 3 4 #"mary"
0 0 28 3 1 #" "
0 0 14 3 4 #"NONE"
0 0 28 3 1 #" "
0 0 14 3 4 #"NONE"
0 0 28 3 3 #")))"
0 0 28 29 1 #"\n"
0 0 28 3 1 #" "
0 0 14 3 4 #"NONE"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 18 3 14 #"; Exercise 372"
0 0 28 29 1 #"\n"
0 0 18 3 8 #"; cross:"
0 0 28 29 1 #"\n"
0 0 18 3 68
#"; [Listof Symbols] [Listof Numbers] -> [Listof [List Symbol Number]]"
0 0 28 29 1 #"\n"
0 0 18 3 11 #"; Template:"
0 0 28 29 1 #"\n"
0 0 18 3 11 #"; ---------"
0 0 28 29 1 #"\n"
0 7         223 66           0 0           0 36 0 28 3 1 #"("
0 0 16 3 6 #"define"
0 0 28 3 2 #" ("
0 0 14 3 5 #"cross"
0 0 28 3 1 #" "
0 0 14 3 4 #"syms"
0 0 28 3 1 #" "
0 0 14 3 4 #"nums"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 14 3 3 #"..."
0 0 28 29 1 #"\n"
0 0 28 3 12 #"           ("
0 0 14 3 5 #"first"
0 0 28 3 1 #" "
0 0 14 3 4 #"syms"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 12 #"           ("
0 0 14 3 3 #"..."
0 0 28 3 1 #" "
0 0 14 3 4 #"nums"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 12 #"           ("
0 0 14 3 5 #"cross"
0 0 28 3 2 #" ("
0 0 14 3 3 #"..."
0 0 28 3 1 #" "
0 0 14 3 4 #"syms"
0 0 28 3 3 #") ("
0 0 14 3 3 #"..."
0 0 28 3 1 #" "
0 0 14 3 4 #"nums"
0 0 28 3 4 #"))))"
0           0 0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 16 3 6 #"define"
0 0 28 3 2 #" ("
0 0 14 3 5 #"cross"
0 0 28 3 1 #" "
0 0 14 3 4 #"syms"
0 0 28 3 1 #" "
0 0 14 3 4 #"nums"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 28 3 2 #" ("
0 0 14 3 6 #"empty?"
0 0 28 3 1 #" "
0 0 14 3 4 #"syms"
0 0 28 3 2 #") "
0 0 14 3 5 #"empty"
0 0 28 29 1 #"\n"
0 0 28 3 7 #"      ("
0 0 14 3 6 #"append"
0 0 28 29 1 #"\n"
0 0 28 3 8 #"       ("
0 0 14 3 3 #"map"
0 0 28 3 2 #" ("
0 0 16 3 6 #"lambda"
0 0 28 3 2 #" ("
0 0 14 3 1 #"x"
0 0 28 3 3 #") ("
0 0 14 3 4 #"list"
0 0 28 3 2 #" ("
0 0 14 3 5 #"first"
0 0 28 3 1 #" "
0 0 14 3 4 #"syms"
0 0 28 3 2 #") "
0 0 14 3 1 #"x"
0 0 28 3 3 #")) "
0 0 14 3 4 #"nums"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 8 #"       ("
0 0 14 3 5 #"cross"
0 0 28 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 28 3 1 #" "
0 0 14 3 4 #"syms"
0 0 28 3 2 #") "
0 0 14 3 4 #"nums"
0 0 28 3 4 #"))))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 28 3 2 #" ("
0 0 14 3 5 #"cross"
0 0 28 3 2 #" ("
0 0 14 3 4 #"list"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 14 3 1 #"a"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 14 3 1 #"b"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 14 3 1 #"c"
0 0 28 3 2 #") "
0 0 24 3 1 #"'"
0 0 28 3 1 #"("
0 0 24 3 1 #"1"
0 0 28 3 1 #" "
0 0 24 3 1 #"2"
0 0 28 3 1 #" "
0 0 24 3 1 #"3"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 3 15 #"              ("
0 0 14 3 4 #"list"
0 0 28 29 1 #"\n"
0 0 28 3 16 #"               ("
0 0 14 3 4 #"list"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 14 3 1 #"a"
0 0 28 3 1 #" "
0 0 24 3 1 #"1"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 16 #"               ("
0 0 14 3 4 #"list"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 14 3 1 #"a"
0 0 28 3 1 #" "
0 0 24 3 1 #"2"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 16 #"               ("
0 0 14 3 4 #"list"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 14 3 1 #"a"
0 0 28 3 1 #" "
0 0 24 3 1 #"3"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 16 #"               ("
0 0 14 3 4 #"list"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 14 3 1 #"b"
0 0 28 3 1 #" "
0 0 24 3 1 #"1"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 16 #"               ("
0 0 14 3 4 #"list"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 14 3 1 #"b"
0 0 28 3 1 #" "
0 0 24 3 1 #"2"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 16 #"               ("
0 0 14 3 4 #"list"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 14 3 1 #"b"
0 0 28 3 1 #" "
0 0 24 3 1 #"3"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 16 #"               ("
0 0 14 3 4 #"list"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 14 3 1 #"c"
0 0 28 3 1 #" "
0 0 24 3 1 #"1"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 16 #"               ("
0 0 14 3 4 #"list"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 14 3 1 #"c"
0 0 28 3 1 #" "
0 0 24 3 1 #"2"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 16 #"               ("
0 0 14 3 4 #"list"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 14 3 1 #"c"
0 0 28 3 1 #" "
0 0 24 3 1 #"3"
0 0 28 3 3 #")))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 18 3 14 #"; Exercise 373"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 16 3 13 #"define-struct"
0 0 28 3 1 #" "
0 0 14 3 8 #"employee"
0 0 28 3 2 #" ["
0 0 14 3 4 #"name"
0 0 28 3 1 #" "
0 0 14 3 3 #"ssn"
0 0 28 3 1 #" "
0 0 14 3 7 #"payrate"
0 0 28 3 2 #"])"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 16 3 13 #"define-struct"
0 0 28 3 1 #" "
0 0 14 3 7 #"records"
0 0 28 3 2 #" ["
0 0 14 3 4 #"name"
0 0 28 3 1 #" "
0 0 14 3 5 #"hours"
0 0 28 3 2 #"])"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 18 3 19 #"; An Employee is a:"
0 0 28 29 1 #"\n"
0 0 18 3 38 #"; (make-employee String Number Number)"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 18 3 32 #"; A list of Employees is one of:"
0 0 28 29 1 #"\n"
0 0 18 3 10 #"; 1) empty"
0 0 28 29 1 #"\n"
0 0 18 3 24 #"; 2) (cons Employee LoE)"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 18 3 17 #"; A records is a:"
0 0 28 29 1 #"\n"
0 0 18 3 29 #"; (make-record String Number)"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 18 3 30 #"; A list of records is one of:"
0 0 28 29 1 #"\n"
0 0 18 3 10 #"; 1) empty"
0 0 28 29 1 #"\n"
0 0 18 3 27 #"; 2) (cons records records)"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 18 3 50 #"; The following wages functions are from the book:"
0 0 28 29 1 #"\n"
0 7         409 66           0 0           0 67 0 28 3 1 #"("
0 0 16 3 6 #"define"
0 0 28 3 2 #" ("
0 0 14 3 11 #"weekly-wage"
0 0 28 3 1 #" "
0 0 14 3 8 #"pay-rate"
0 0 28 3 1 #" "
0 0 14 3 12 #"hours-worked"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 14 3 1 #"*"
0 0 28 3 1 #" "
0 0 14 3 8 #"pay-rate"
0 0 28 3 1 #" "
0 0 14 3 12 #"hours-worked"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 16 3 6 #"define"
0 0 28 3 2 #" ("
0 0 14 3 9 #"wages*.v2"
0 0 28 3 1 #" "
0 0 14 3 5 #"hours"
0 0 28 3 1 #" "
0 0 14 3 12 #"hourly-wages"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 16 3 4 #"cond"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"    [("
0 0 14 3 6 #"empty?"
0 0 28 3 1 #" "
0 0 14 3 5 #"hours"
0 0 28 3 2 #") "
0 0 24 3 1 #"'"
0 0 28 3 3 #"()]"
0 0 28 29 1 #"\n"
0 0 28 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 28 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 28 3 2 #" ("
0 0 14 3 11 #"weekly-wage"
0 0 28 3 2 #" ("
0 0 14 3 5 #"first"
0 0 28 3 1 #" "
0 0 14 3 5 #"hours"
0 0 28 3 3 #") ("
0 0 14 3 5 #"first"
0 0 28 3 1 #" "
0 0 14 3 12 #"hourly-wages"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 3 17 #"                ("
0 0 14 3 9 #"wages*.v2"
0 0 28 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 28 3 1 #" "
0 0 14 3 5 #"hours"
0 0 28 3 3 #") ("
0 0 14 3 4 #"rest"
0 0 28 3 1 #" "
0 0 14 3 12 #"hourly-wages"
0 0 28 3 6 #")))]))"
0           0 0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 18 3 53 #"; Now we will modify the above functions to work with"
0 0 28 29 1 #"\n"
0 0 18 3 49 #"; our newly created employee and records structs."
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 16 3 6 #"define"
0 0 28 3 2 #" ("
0 0 14 3 11 #"weekly-wage"
0 0 28 3 1 #" "
0 0 14 3 8 #"pay-rate"
0 0 28 3 1 #" "
0 0 14 3 12 #"hours-worked"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 14 3 1 #"*"
0 0 28 3 1 #" "
0 0 14 3 8 #"pay-rate"
0 0 28 3 1 #" "
0 0 14 3 12 #"hours-worked"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 18 3 63
#"; wages: [Listof Records] [Listof Employees] -> [Listof Number]"
0 0 28 29 1 #"\n"
0 0 18 3 68
#"; Given a list of records and a list of employees, compute the wages"
0 0 28 29 1 #"\n"
0 0 18 3 60
#"; of each employee based on his/her hours worked and payrate"
0 0 28 29 1 #"\n"
0 0 18 3 11 #"; Template:"
0 0 28 29 1 #"\n"
0 0 18 3 10 #"; --------"
0 0 28 29 1 #"\n"
0 7         445 66           0 0           0 73 0 28 3 1 #"("
0 0 16 3 6 #"define"
0 0 28 3 2 #" ("
0 0 14 3 5 #"wages"
0 0 28 3 1 #" "
0 0 14 3 7 #"records"
0 0 28 3 1 #" "
0 0 14 3 9 #"employees"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 16 3 4 #"cond"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"    [("
0 0 14 3 5 #"empy?"
0 0 28 3 1 #" "
0 0 14 3 7 #"records"
0 0 28 3 3 #") ("
0 0 14 3 3 #"..."
0 0 28 3 2 #")]"
0 0 28 29 1 #"\n"
0 0 28 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 28 3 2 #" ("
0 0 14 3 3 #"..."
0 0 28 29 1 #"\n"
0 0 28 3 12 #"           ("
0 0 14 3 13 #"employee-name"
0 0 28 3 1 #" "
0 0 14 3 3 #"..."
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 12 #"           ("
0 0 14 3 12 #"employee-ssn"
0 0 28 3 1 #" "
0 0 14 3 3 #"..."
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 12 #"           ("
0 0 14 3 16 #"employee-payrate"
0 0 28 3 1 #" "
0 0 14 3 3 #"..."
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 12 #"           ("
0 0 14 3 3 #"..."
0 0 28 29 1 #"\n"
0 0 28 3 13 #"            ("
0 0 14 3 12 #"records-name"
0 0 28 3 1 #" "
0 0 14 3 3 #"..."
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 13 #"            ("
0 0 14 3 13 #"records-hours"
0 0 28 3 1 #" "
0 0 14 3 3 #"..."
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 13 #"            ("
0 0 14 3 3 #"..."
0 0 28 29 1 #"\n"
0 0 28 3 14 #"             ("
0 0 14 3 5 #"wages"
0 0 28 3 2 #" ("
0 0 14 3 3 #"..."
0 0 28 3 1 #" "
0 0 14 3 7 #"records"
0 0 28 3 3 #") ("
0 0 14 3 3 #"..."
0 0 28 3 1 #" "
0 0 14 3 9 #"employees"
0 0 28 3 8 #")))))]))"
0           0 0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 16 3 6 #"define"
0 0 28 3 2 #" ("
0 0 14 3 5 #"wages"
0 0 28 3 1 #" "
0 0 14 3 7 #"records"
0 0 28 3 1 #" "
0 0 14 3 9 #"employees"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 16 3 4 #"cond"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"    [("
0 0 14 3 6 #"empty?"
0 0 28 3 1 #" "
0 0 14 3 7 #"records"
0 0 28 3 2 #") "
0 0 24 3 1 #"'"
0 0 28 3 3 #"()]"
0 0 28 29 1 #"\n"
0 0 28 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 28 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 28 29 1 #"\n"
0 0 28 3 12 #"           ("
0 0 14 3 11 #"weekly-wage"
0 0 28 3 2 #" ("
0 0 14 3 16 #"employee-payrate"
0 0 28 3 2 #" ("
0 0 14 3 5 #"first"
0 0 28 3 1 #" "
0 0 14 3 9 #"employees"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 3 25 #"                        ("
0 0 14 3 13 #"records-hours"
0 0 28 3 2 #" ("
0 0 14 3 5 #"first"
0 0 28 3 1 #" "
0 0 14 3 7 #"records"
0 0 28 3 3 #")))"
0 0 28 29 1 #"\n"
0 0 28 3 12 #"           ("
0 0 14 3 5 #"wages"
0 0 28 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 28 3 1 #" "
0 0 14 3 7 #"records"
0 0 28 3 3 #") ("
0 0 14 3 4 #"rest"
0 0 28 3 1 #" "
0 0 14 3 9 #"employees"
0 0 28 3 6 #")))]))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 16 3 6 #"define"
0 0 28 3 1 #" "
0 0 14 3 8 #"test-loe"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 14 3 4 #"list"
0 0 28 29 1 #"\n"
0 0 28 3 4 #"   ("
0 0 14 3 13 #"make-employee"
0 0 28 3 1 #" "
0 0 20 3 6 #"\"John\""
0 0 28 3 1 #" "
0 0 24 3 6 #"103291"
0 0 28 3 1 #" "
0 0 24 3 1 #"8"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 4 #"   ("
0 0 14 3 13 #"make-employee"
0 0 28 3 1 #" "
0 0 20 3 9 #"\"Madison\""
0 0 28 3 1 #" "
0 0 24 3 6 #"102083"
0 0 28 3 1 #" "
0 0 24 3 2 #"10"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 4 #"   ("
0 0 14 3 13 #"make-employee"
0 0 28 3 1 #" "
0 0 20 3 6 #"\"Matt\""
0 0 28 3 1 #" "
0 0 24 3 6 #"102345"
0 0 28 3 1 #" "
0 0 24 3 2 #"12"
0 0 28 3 3 #")))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 16 3 6 #"define"
0 0 28 3 1 #" "
0 0 14 3 8 #"test-lor"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 14 3 4 #"list"
0 0 28 29 1 #"\n"
0 0 28 3 4 #"   ("
0 0 14 3 12 #"make-records"
0 0 28 3 1 #" "
0 0 20 3 6 #"\"John\""
0 0 28 3 1 #" "
0 0 24 3 2 #"40"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 4 #"   ("
0 0 14 3 12 #"make-records"
0 0 28 3 1 #" "
0 0 20 3 9 #"\"Madison\""
0 0 28 3 1 #" "
0 0 24 3 2 #"35"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 4 #"   ("
0 0 14 3 12 #"make-records"
0 0 28 3 1 #" "
0 0 20 3 6 #"\"Matt\""
0 0 28 3 1 #" "
0 0 24 3 2 #"25"
0 0 28 3 3 #")))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 28 3 2 #" ("
0 0 14 3 5 #"wages"
0 0 28 3 1 #" "
0 0 14 3 8 #"test-lor"
0 0 28 3 1 #" "
0 0 14 3 8 #"test-loe"
0 0 28 3 3 #") ("
0 0 14 3 4 #"list"
0 0 28 3 1 #" "
0 0 24 3 3 #"320"
0 0 28 3 1 #" "
0 0 24 3 3 #"350"
0 0 28 3 1 #" "
0 0 24 3 3 #"300"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 18 3 14 #"; Exercise 374"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 16 3 13 #"define-struct"
0 0 28 3 1 #" "
0 0 14 3 12 #"phone-record"
0 0 28 3 2 #" ["
0 0 14 3 4 #"name"
0 0 28 3 1 #" "
0 0 14 3 6 #"number"
0 0 28 3 2 #"])"
0 0 28 29 1 #"\n"
0 0 18 3 53 #"; A PhoneRecord is (make-phone-record String String)."
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 18 3 34 #";A list of phone-record is one of:"
0 0 28 29 1 #"\n"
0 0 18 3 10 #"; 1) empty"
0 0 28 29 1 #"\n"
0 0 18 3 29 #"; 2) (cons phone-record LoPR)"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 18 3 63
#"; zip: [Listof String] [Listof String] -> [Listof phone-record]"
0 0 28 29 1 #"\n"
0 0 18 3 66
#"; Given a list of names and a list of phone numbers, return a list"
0 0 28 29 1 #"\n"
0 0 18 3 36 #"; containing a list of phone-records"
0 0 28 29 1 #"\n"
0 0 18 3 11 #"; Template:"
0 0 28 29 1 #"\n"
0 0 18 3 11 #"; ---------"
0 0 28 29 1 #"\n"
0 7         319 66           0 0           0 52 0 28 3 1 #"("
0 0 16 3 6 #"define"
0 0 28 3 2 #" ("
0 0 14 3 3 #"zip"
0 0 28 3 1 #" "
0 0 14 3 5 #"names"
0 0 28 3 1 #" "
0 0 14 3 6 #"phones"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 16 3 4 #"cond"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"    [("
0 0 14 3 6 #"empty?"
0 0 28 3 1 #" "
0 0 14 3 5 #"names"
0 0 28 3 2 #") "
0 0 24 3 1 #"'"
0 0 28 3 3 #"()]"
0 0 28 29 1 #"\n"
0 0 28 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 28 3 2 #" ("
0 0 14 3 3 #"..."
0 0 28 29 1 #"\n"
0 0 28 3 12 #"           ("
0 0 14 3 3 #"..."
0 0 28 29 1 #"\n"
0 0 28 3 13 #"            ("
0 0 14 3 5 #"first"
0 0 28 3 1 #" "
0 0 14 3 5 #"names"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 13 #"            ("
0 0 14 3 5 #"first"
0 0 28 3 1 #" "
0 0 14 3 6 #"phones"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 3 12 #"           ("
0 0 14 3 3 #"zip"
0 0 28 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 28 3 1 #" "
0 0 14 3 5 #"names"
0 0 28 3 3 #") ("
0 0 14 3 4 #"rest"
0 0 28 3 1 #" "
0 0 14 3 6 #"phones"
0 0 28 3 6 #")))]))"
0           0 0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 16 3 6 #"define"
0 0 28 3 2 #" ("
0 0 14 3 3 #"zip"
0 0 28 3 1 #" "
0 0 14 3 5 #"names"
0 0 28 3 1 #" "
0 0 14 3 6 #"phones"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 16 3 4 #"cond"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"    [("
0 0 14 3 6 #"empty?"
0 0 28 3 1 #" "
0 0 14 3 5 #"names"
0 0 28 3 2 #") "
0 0 24 3 1 #"'"
0 0 28 3 3 #"()]"
0 0 28 29 1 #"\n"
0 0 28 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 28 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 28 29 1 #"\n"
0 0 28 3 12 #"           ("
0 0 14 3 17 #"make-phone-record"
0 0 28 3 2 #" ("
0 0 14 3 5 #"first"
0 0 28 3 1 #" "
0 0 14 3 5 #"names"
0 0 28 3 3 #") ("
0 0 14 3 5 #"first"
0 0 28 3 1 #" "
0 0 14 3 6 #"phones"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 3 12 #"           ("
0 0 14 3 3 #"zip"
0 0 28 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 28 3 1 #" "
0 0 14 3 5 #"names"
0 0 28 3 3 #") ("
0 0 14 3 4 #"rest"
0 0 28 3 1 #" "
0 0 14 3 6 #"phones"
0 0 28 3 6 #")))]))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 16 3 6 #"define"
0 0 28 3 1 #" "
0 0 14 3 10 #"test-names"
0 0 28 3 2 #" ("
0 0 14 3 4 #"list"
0 0 28 3 1 #" "
0 0 20 3 6 #"\"Jane\""
0 0 28 3 1 #" "
0 0 20 3 5 #"\"Joe\""
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 16 3 6 #"define"
0 0 28 3 1 #" "
0 0 14 3 11 #"test-phones"
0 0 28 3 2 #" ("
0 0 14 3 4 #"list"
0 0 28 3 1 #" "
0 0 20 3 14 #"\"812-301-1020\""
0 0 28 3 1 #" "
0 0 20 3 14 #"\"765-309-1020\""
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 28 3 2 #" ("
0 0 14 3 3 #"zip"
0 0 28 3 1 #" "
0 0 14 3 10 #"test-names"
0 0 28 3 1 #" "
0 0 14 3 11 #"test-phones"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 15 #"              ("
0 0 14 3 4 #"list"
0 0 28 3 2 #" ("
0 0 14 3 17 #"make-phone-record"
0 0 28 3 1 #" "
0 0 20 3 6 #"\"Jane\""
0 0 28 3 1 #" "
0 0 20 3 14 #"\"812-301-1020\""
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 21 #"                    ("
0 0 14 3 17 #"make-phone-record"
0 0 28 3 1 #" "
0 0 20 3 5 #"\"Joe\""
0 0 28 3 1 #" "
0 0 20 3 14 #"\"765-309-1020\""
0 0 28 3 3 #")))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 18 3 24 #";;; End of book problems"
0 0 28 29 1 #"\n"
0 0 18 3 12 #"; Exercise 1"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 18 3 25 #"; A Nucleotide is one of:"
0 0 28 29 1 #"\n"
0 0 18 3 8 #"; 1) \"A\""
0 0 28 29 1 #"\n"
0 0 18 3 8 #"; 2) \"C\""
0 0 28 29 1 #"\n"
0 0 18 3 8 #"; 3) \"G\""
0 0 28 29 1 #"\n"
0 0 18 3 8 #"; 4) \"T\""
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 18 3 25 #"; A DNA-strand is one of:"
0 0 28 29 1 #"\n"
0 0 18 3 10 #"; 1) empty"
0 0 28 29 1 #"\n"
0 0 18 3 33 #"; 2) (cons Nucleotide DNA-strand)"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 18 3 12 #"; Exercise 2"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 18 3 45 #"; DNAprefix: DNA-strand DNA-strand -> Boolean"
0 0 28 29 1 #"\n"
0 0 18 3 61
#"; Given a prefix DNA-strand and a DNA-strand, check to see if"
0 0 28 29 1 #"\n"
0 0 18 3 59
#"; the latter strand contains the former strand as a prefix."
0 0 28 29 1 #"\n"
0 0 18 3 11 #"; Template:"
0 0 28 29 1 #"\n"
0 0 18 3 11 #"; ---------"
0 0 28 29 1 #"\n"
0 7         313 66           0 0           0 51 0 28 3 1 #"("
0 0 16 3 6 #"define"
0 0 28 3 2 #" ("
0 0 14 3 9 #"DNAprefix"
0 0 28 3 1 #" "
0 0 14 3 6 #"prefix"
0 0 28 3 1 #" "
0 0 14 3 6 #"strand"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 16 3 4 #"cond"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"    [("
0 0 14 3 6 #"empty?"
0 0 28 3 1 #" "
0 0 14 3 6 #"prefix"
0 0 28 3 3 #") ("
0 0 14 3 3 #"..."
0 0 28 3 2 #")]"
0 0 28 29 1 #"\n"
0 0 28 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 28 3 2 #" ("
0 0 14 3 3 #"..."
0 0 28 29 1 #"\n"
0 0 28 3 13 #"            ("
0 0 14 3 3 #"..."
0 0 28 3 2 #" ("
0 0 14 3 5 #"first"
0 0 28 3 1 #" "
0 0 14 3 6 #"prefix"
0 0 28 3 3 #") ("
0 0 14 3 5 #"first"
0 0 28 3 1 #" "
0 0 14 3 6 #"strand"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 3 13 #"            ("
0 0 14 3 3 #"..."
0 0 28 3 2 #" ("
0 0 14 3 9 #"DNAprefix"
0 0 28 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 28 3 1 #" "
0 0 14 3 6 #"prefix"
0 0 28 3 3 #") ("
0 0 14 3 4 #"rest"
0 0 28 3 1 #" "
0 0 14 3 6 #"strand"
0 0 28 3 8 #")))))]))"
0           0 0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 16 3 6 #"define"
0 0 28 3 2 #" ("
0 0 14 3 9 #"DNAprefix"
0 0 28 3 1 #" "
0 0 14 3 6 #"prefix"
0 0 28 3 1 #" "
0 0 14 3 6 #"strand"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 16 3 4 #"cond"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"    [("
0 0 14 3 6 #"empty?"
0 0 28 3 1 #" "
0 0 14 3 6 #"prefix"
0 0 28 3 2 #") "
0 0 24 3 5 #"#true"
0 0 28 3 1 #"]"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"    [("
0 0 14 3 3 #"and"
0 0 28 3 2 #" ("
0 0 14 3 6 #"empty?"
0 0 28 3 1 #" "
0 0 14 3 6 #"strand"
0 0 28 3 3 #") ("
0 0 14 3 3 #"not"
0 0 28 3 2 #" ("
0 0 14 3 6 #"empty?"
0 0 28 3 1 #" "
0 0 14 3 6 #"prefix"
0 0 28 3 4 #"))) "
0 0 24 3 6 #"#false"
0 0 28 3 1 #"]"
0 0 28 29 1 #"\n"
0 0 28 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 28 3 2 #" ("
0 0 14 3 3 #"and"
0 0 28 29 1 #"\n"
0 0 28 3 12 #"           ("
0 0 14 3 6 #"equal?"
0 0 28 3 2 #" ("
0 0 14 3 5 #"first"
0 0 28 3 1 #" "
0 0 14 3 6 #"prefix"
0 0 28 3 3 #") ("
0 0 14 3 5 #"first"
0 0 28 3 1 #" "
0 0 14 3 6 #"strand"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 3 12 #"           ("
0 0 14 3 9 #"DNAprefix"
0 0 28 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 28 3 1 #" "
0 0 14 3 6 #"prefix"
0 0 28 3 3 #") ("
0 0 14 3 4 #"rest"
0 0 28 3 1 #" "
0 0 14 3 6 #"strand"
0 0 28 3 6 #")))]))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 28 3 2 #" ("
0 0 14 3 9 #"DNAprefix"
0 0 28 3 2 #" ("
0 0 14 3 4 #"list"
0 0 28 3 1 #" "
0 0 20 3 3 #"\"A\""
0 0 28 3 1 #" "
0 0 20 3 3 #"\"G\""
0 0 28 3 1 #" "
0 0 20 3 3 #"\"A\""
0 0 28 3 3 #") ("
0 0 14 3 4 #"list"
0 0 28 3 1 #" "
0 0 20 3 3 #"\"A\""
0 0 28 3 1 #" "
0 0 20 3 3 #"\"G\""
0 0 28 3 1 #" "
0 0 20 3 3 #"\"A\""
0 0 28 3 1 #" "
0 0 20 3 3 #"\"C\""
0 0 28 3 3 #")) "
0 0 24 3 2 #"#t"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 28 3 2 #" ("
0 0 14 3 9 #"DNAprefix"
0 0 28 3 2 #" ("
0 0 14 3 4 #"list"
0 0 28 3 1 #" "
0 0 20 3 3 #"\"A\""
0 0 28 3 1 #" "
0 0 20 3 3 #"\"G\""
0 0 28 3 1 #" "
0 0 20 3 3 #"\"C\""
0 0 28 3 3 #") ("
0 0 14 3 4 #"list"
0 0 28 3 1 #" "
0 0 20 3 3 #"\"A\""
0 0 28 3 1 #" "
0 0 20 3 3 #"\"G\""
0 0 28 3 1 #" "
0 0 20 3 3 #"\"A\""
0 0 28 3 1 #" "
0 0 20 3 3 #"\"C\""
0 0 28 3 3 #")) "
0 0 24 3 2 #"#f"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 28 3 2 #" ("
0 0 14 3 9 #"DNAprefix"
0 0 28 3 2 #" ("
0 0 14 3 4 #"list"
0 0 28 3 1 #" "
0 0 20 3 3 #"\"A\""
0 0 28 3 1 #" "
0 0 20 3 3 #"\"G\""
0 0 28 3 1 #" "
0 0 20 3 3 #"\"C\""
0 0 28 3 3 #") ("
0 0 14 3 4 #"list"
0 0 28 3 1 #" "
0 0 20 3 3 #"\"A\""
0 0 28 3 1 #" "
0 0 20 3 3 #"\"G\""
0 0 28 3 3 #")) "
0 0 24 3 2 #"#f"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 18 3 12 #"; Exercise 3"
0 0 28 29 1 #"\n"
0 0 18 3 56 #"; DNAprefix-overlap: DNA-strand DNA-strand -> DNA-strand"
0 0 28 29 1 #"\n"
0 0 18 3 66
#"; Given two strands, return a strand which is the shared prefix of"
0 0 28 29 1 #"\n"
0 0 18 3 18 #"; the two strands."
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 18 3 11 #"; Template:"
0 0 28 29 1 #"\n"
0 0 18 3 11 #"; ---------"
0 0 28 29 1 #"\n"
0 7         313 66           0 0           0 51 0 28 3 1 #"("
0 0 16 3 6 #"define"
0 0 28 3 2 #" ("
0 0 14 3 17 #"DNAprefix-overlap"
0 0 28 3 1 #" "
0 0 14 3 6 #"prefix"
0 0 28 3 1 #" "
0 0 14 3 6 #"strand"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 16 3 4 #"cond"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"    [("
0 0 14 3 6 #"empty?"
0 0 28 3 1 #" "
0 0 14 3 6 #"prefix"
0 0 28 3 3 #") ("
0 0 14 3 3 #"..."
0 0 28 3 2 #")]"
0 0 28 29 1 #"\n"
0 0 28 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 28 3 2 #" ("
0 0 14 3 3 #"..."
0 0 28 29 1 #"\n"
0 0 28 3 12 #"           ("
0 0 14 3 3 #"..."
0 0 28 3 2 #" ("
0 0 14 3 5 #"first"
0 0 28 3 1 #" "
0 0 14 3 6 #"prefix"
0 0 28 3 3 #") ("
0 0 14 3 5 #"first"
0 0 28 3 1 #" "
0 0 14 3 6 #"strand"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 3 12 #"           ("
0 0 14 3 3 #"..."
0 0 28 3 2 #" ("
0 0 14 3 18 #"DNA-prefix-overlap"
0 0 28 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 28 3 1 #" "
0 0 14 3 6 #"prefix"
0 0 28 3 3 #") ("
0 0 14 3 4 #"rest"
0 0 28 3 1 #" "
0 0 14 3 6 #"strand"
0 0 28 3 7 #"))))]))"
0           0 0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 16 3 6 #"define"
0 0 28 3 2 #" ("
0 0 14 3 17 #"DNAprefix-overlap"
0 0 28 3 1 #" "
0 0 14 3 6 #"prefix"
0 0 28 3 1 #" "
0 0 14 3 6 #"strand"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 16 3 4 #"cond"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"    [("
0 0 14 3 6 #"empty?"
0 0 28 3 1 #" "
0 0 14 3 6 #"prefix"
0 0 28 3 2 #") "
0 0 24 3 1 #"'"
0 0 28 3 3 #"()]"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"    [("
0 0 14 3 6 #"equal?"
0 0 28 3 2 #" ("
0 0 14 3 5 #"first"
0 0 28 3 1 #" "
0 0 14 3 6 #"prefix"
0 0 28 3 3 #") ("
0 0 14 3 5 #"first"
0 0 28 3 1 #" "
0 0 14 3 6 #"strand"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"     ("
0 0 14 3 4 #"cons"
0 0 28 3 2 #" ("
0 0 14 3 5 #"first"
0 0 28 3 1 #" "
0 0 14 3 6 #"prefix"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 12 #"           ("
0 0 14 3 17 #"DNAprefix-overlap"
0 0 28 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 28 3 1 #" "
0 0 14 3 6 #"prefix"
0 0 28 3 3 #") ("
0 0 14 3 4 #"rest"
0 0 28 3 1 #" "
0 0 14 3 6 #"strand"
0 0 28 3 4 #")))]"
0 0 28 29 1 #"\n"
0 0 28 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 28 3 5 #"()]))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 28 3 2 #" ("
0 0 14 3 17 #"DNAprefix-overlap"
0 0 28 3 2 #" ("
0 0 14 3 4 #"list"
0 0 28 3 1 #" "
0 0 20 3 3 #"\"A\""
0 0 28 3 1 #" "
0 0 20 3 3 #"\"G\""
0 0 28 3 1 #" "
0 0 20 3 3 #"\"C\""
0 0 28 3 3 #") ("
0 0 14 3 4 #"list"
0 0 28 3 1 #" "
0 0 20 3 3 #"\"A\""
0 0 28 3 1 #" "
0 0 20 3 3 #"\"G\""
0 0 28 3 1 #" "
0 0 20 3 3 #"\"T\""
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 3 15 #"              ("
0 0 14 3 4 #"list"
0 0 28 3 1 #" "
0 0 20 3 3 #"\"A\""
0 0 28 3 1 #" "
0 0 20 3 3 #"\"G\""
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 28 3 2 #" ("
0 0 14 3 17 #"DNAprefix-overlap"
0 0 28 3 2 #" ("
0 0 14 3 4 #"list"
0 0 28 3 1 #" "
0 0 20 3 3 #"\"A\""
0 0 28 3 1 #" "
0 0 20 3 3 #"\"G\""
0 0 28 3 1 #" "
0 0 20 3 3 #"\"C\""
0 0 28 3 3 #") ("
0 0 14 3 4 #"list"
0 0 28 3 1 #" "
0 0 20 3 3 #"\"C\""
0 0 28 3 1 #" "
0 0 20 3 3 #"\"G\""
0 0 28 3 1 #" "
0 0 20 3 3 #"\"A\""
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 3 14 #"              "
0 0 24 3 1 #"'"
0 0 28 3 3 #"())"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 18 3 12 #"; Exercise 4"
0 0 28 29 1 #"\n"
0 0 18 3 45 #"; DNAsearch: DNA-strand DNA-strand -> Boolean"
0 0 28 29 1 #"\n"
0 0 18 3 64
#"; Given two strands, determine if the former strand is contained"
0 0 28 29 1 #"\n"
0 0 18 3 56 #"; within the latter strand at any point in its sequence."
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 18 3 11 #"; Template:"
0 0 28 29 1 #"\n"
0 0 18 3 10 #"; --------"
0 0 28 29 1 #"\n"
0 7         289 66           0 0           0 47 0 28 3 1 #"("
0 0 16 3 6 #"define"
0 0 28 3 2 #" ("
0 0 14 3 9 #"DNAsearch"
0 0 28 3 1 #" "
0 0 14 3 6 #"prefix"
0 0 28 3 1 #" "
0 0 14 3 6 #"strand"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 16 3 4 #"cond"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"    [("
0 0 14 3 6 #"empty?"
0 0 28 3 1 #" "
0 0 14 3 6 #"strand"
0 0 28 3 3 #") ("
0 0 14 3 3 #"..."
0 0 28 3 2 #")]"
0 0 28 29 1 #"\n"
0 0 28 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 28 3 2 #" ("
0 0 14 3 3 #"..."
0 0 28 29 1 #"\n"
0 0 28 3 12 #"           ("
0 0 14 3 3 #"..."
0 0 28 3 2 #" ("
0 0 14 3 5 #"first"
0 0 28 3 1 #" "
0 0 14 3 6 #"strand"
0 0 28 3 3 #") ("
0 0 14 3 5 #"first"
0 0 28 3 1 #" "
0 0 14 3 6 #"prefix"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 3 12 #"           ("
0 0 14 3 3 #"..."
0 0 28 3 2 #" ("
0 0 14 3 9 #"DNAsearch"
0 0 28 3 1 #" "
0 0 14 3 6 #"prefix"
0 0 28 3 1 #" "
0 0 14 3 6 #"strand"
0 0 28 3 6 #")))]))"
0           0 0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 16 3 6 #"define"
0 0 28 3 2 #" ("
0 0 14 3 9 #"DNAsearch"
0 0 28 3 1 #" "
0 0 14 3 6 #"prefix"
0 0 28 3 1 #" "
0 0 14 3 6 #"strand"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 16 3 4 #"cond"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"    [("
0 0 14 3 6 #"empty?"
0 0 28 3 1 #" "
0 0 14 3 6 #"strand"
0 0 28 3 2 #") "
0 0 24 3 2 #"#f"
0 0 28 3 1 #"]"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"    [("
0 0 14 3 6 #"empty?"
0 0 28 3 1 #" "
0 0 14 3 6 #"prefix"
0 0 28 3 2 #") "
0 0 24 3 2 #"#t"
0 0 28 3 1 #"]"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"    [("
0 0 14 3 3 #"and"
0 0 28 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 28 3 2 #" ("
0 0 14 3 5 #"first"
0 0 28 3 1 #" "
0 0 14 3 6 #"prefix"
0 0 28 3 3 #") ("
0 0 14 3 5 #"first"
0 0 28 3 1 #" "
0 0 14 3 6 #"strand"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 3 11 #"          ("
0 0 14 3 9 #"DNAsearch"
0 0 28 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 28 3 1 #" "
0 0 14 3 6 #"prefix"
0 0 28 3 3 #") ("
0 0 14 3 4 #"rest"
0 0 28 3 1 #" "
0 0 14 3 6 #"strand"
0 0 28 3 4 #"))) "
0 0 24 3 2 #"#t"
0 0 28 3 1 #"]"
0 0 28 29 1 #"\n"
0 0 28 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 28 3 2 #" ("
0 0 14 3 9 #"DNAsearch"
0 0 28 3 1 #" "
0 0 14 3 6 #"prefix"
0 0 28 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 28 3 1 #" "
0 0 14 3 6 #"strand"
0 0 28 3 5 #"))]))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 28 3 2 #" ("
0 0 14 3 9 #"DNAsearch"
0 0 28 3 2 #" ("
0 0 14 3 4 #"list"
0 0 28 3 1 #" "
0 0 20 3 3 #"\"A\""
0 0 28 3 1 #" "
0 0 20 3 3 #"\"C\""
0 0 28 3 3 #") ("
0 0 14 3 4 #"list"
0 0 28 3 1 #" "
0 0 20 3 3 #"\"C\""
0 0 28 3 1 #" "
0 0 20 3 3 #"\"G\""
0 0 28 3 1 #" "
0 0 20 3 3 #"\"A\""
0 0 28 3 1 #" "
0 0 20 3 3 #"\"C\""
0 0 28 3 1 #" "
0 0 20 3 3 #"\"T\""
0 0 28 3 3 #")) "
0 0 24 3 2 #"#t"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 28 3 2 #" ("
0 0 14 3 9 #"DNAsearch"
0 0 28 3 2 #" ("
0 0 14 3 4 #"list"
0 0 28 3 1 #" "
0 0 20 3 3 #"\"C\""
0 0 28 3 1 #" "
0 0 20 3 3 #"\"G\""
0 0 28 3 3 #") ("
0 0 14 3 4 #"list"
0 0 28 3 1 #" "
0 0 20 3 3 #"\"C\""
0 0 28 3 1 #" "
0 0 20 3 3 #"\"G\""
0 0 28 3 1 #" "
0 0 20 3 3 #"\"A\""
0 0 28 3 1 #" "
0 0 20 3 3 #"\"C\""
0 0 28 3 1 #" "
0 0 20 3 3 #"\"T\""
0 0 28 3 3 #")) "
0 0 24 3 2 #"#t"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 28 3 2 #" ("
0 0 14 3 9 #"DNAsearch"
0 0 28 3 2 #" ("
0 0 14 3 4 #"list"
0 0 28 3 1 #" "
0 0 20 3 3 #"\"C\""
0 0 28 3 1 #" "
0 0 20 3 3 #"\"G\""
0 0 28 3 3 #") ("
0 0 14 3 4 #"list"
0 0 28 3 1 #" "
0 0 20 3 3 #"\"A\""
0 0 28 3 1 #" "
0 0 20 3 3 #"\"G\""
0 0 28 3 1 #" "
0 0 20 3 3 #"\"A\""
0 0 28 3 1 #" "
0 0 20 3 3 #"\"C\""
0 0 28 3 1 #" "
0 0 20 3 3 #"\"T\""
0 0 28 3 3 #")) "
0 0 24 3 2 #"#f"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 18 3 14 #";;; Exercise 5"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 18 3 63
#"; compare-first: DNA-strand DNA-strand -> [Nucleotide or Empty]"
0 0 28 29 1 #"\n"
0 0 18 3 61
#"; inputs two strands and outputs either a Nucleotide or Empty"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 16 3 6 #"define"
0 0 28 3 2 #" ("
0 0 14 3 13 #"compare-first"
0 0 28 3 1 #" "
0 0 14 3 2 #"sx"
0 0 28 3 1 #" "
0 0 14 3 2 #"sy"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 28 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 28 3 2 #" ("
0 0 14 3 5 #"first"
0 0 28 3 1 #" "
0 0 14 3 2 #"sx"
0 0 28 3 3 #") ("
0 0 14 3 5 #"first"
0 0 28 3 1 #" "
0 0 14 3 2 #"sy"
0 0 28 3 4 #")) ("
0 0 14 3 5 #"first"
0 0 28 3 1 #" "
0 0 14 3 2 #"sx"
0 0 28 3 2 #") "
0 0 24 3 1 #"'"
0 0 28 3 4 #"()))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 18 3 55 #"; build-common-seq: DNA-strand DNA-strand -> DNA-strand"
0 0 28 29 1 #"\n"
0 0 18 3 71
(
 #"; inputs two strands and checks if for equivalence. When it reaches "
 #"the"
) 0 0 28 29 1 #"\n"
0 0 18 3 65
#"; first difference between them, it returns an '() and closes the"
0 0 28 29 1 #"\n"
0 0 18 3 71
(
 #";sequence. The result is one possible common sequence between the li"
 #"sts"
) 0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 16 3 6 #"define"
0 0 28 3 2 #" ("
0 0 14 3 16 #"build-common-seq"
0 0 28 3 1 #" "
0 0 14 3 2 #"sx"
0 0 28 3 1 #" "
0 0 14 3 2 #"sy"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 28 3 2 #" ("
0 0 14 3 2 #"or"
0 0 28 3 2 #" ("
0 0 14 3 6 #"empty?"
0 0 28 3 1 #" "
0 0 14 3 2 #"sx"
0 0 28 3 3 #") ("
0 0 14 3 6 #"empty?"
0 0 28 3 1 #" "
0 0 14 3 2 #"sy"
0 0 28 3 3 #") ("
0 0 14 3 6 #"empty?"
0 0 28 3 2 #" ("
0 0 14 3 13 #"compare-first"
0 0 28 3 1 #" "
0 0 14 3 2 #"sx"
0 0 28 3 1 #" "
0 0 14 3 2 #"sy"
0 0 28 3 3 #")))"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"      "
0 0 24 3 1 #"'"
0 0 28 3 2 #"()"
0 0 28 29 1 #"\n"
0 0 28 3 7 #"      ("
0 0 14 3 4 #"cons"
0 0 28 3 2 #" ("
0 0 14 3 13 #"compare-first"
0 0 28 3 1 #" "
0 0 14 3 2 #"sx"
0 0 28 3 1 #" "
0 0 14 3 2 #"sy"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 13 #"            ("
0 0 14 3 16 #"build-common-seq"
0 0 28 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 28 3 1 #" "
0 0 14 3 2 #"sx"
0 0 28 3 3 #") ("
0 0 14 3 4 #"rest"
0 0 28 3 1 #" "
0 0 14 3 2 #"sy"
0 0 28 3 6 #"))))) "
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 18 3 64
#"; build-list-of-cs: DNA-strand DNA-strand -> [Listof DNA-strand]"
0 0 28 29 1 #"\n"
0 0 18 3 68
#"; Given two strands, compute a list of all possible common sequences"
0 0 28 29 1 #"\n"
0 0 18 3 26 #"; between the two strands."
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 16 3 6 #"define"
0 0 28 3 2 #" ("
0 0 14 3 16 #"build-list-of-cs"
0 0 28 3 1 #" "
0 0 14 3 2 #"sx"
0 0 28 3 1 #" "
0 0 14 3 2 #"sy"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 14 3 6 #"append"
0 0 28 29 1 #"\n"
0 0 28 3 4 #"   ("
0 0 14 3 2 #"if"
0 0 28 3 2 #" ("
0 0 14 3 6 #"empty?"
0 0 28 3 2 #" ("
0 0 14 3 16 #"build-common-seq"
0 0 28 3 1 #" "
0 0 14 3 2 #"sx"
0 0 28 3 1 #" "
0 0 14 3 2 #"sy"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 3 7 #"       "
0 0 24 3 1 #"'"
0 0 28 3 2 #"()"
0 0 28 29 1 #"\n"
0 0 28 3 8 #"       ("
0 0 14 3 4 #"list"
0 0 28 3 2 #" ("
0 0 14 3 16 #"build-common-seq"
0 0 28 3 1 #" "
0 0 14 3 2 #"sx"
0 0 28 3 1 #" "
0 0 14 3 2 #"sy"
0 0 28 3 3 #")))"
0 0 28 29 1 #"\n"
0 0 28 3 4 #"   ("
0 0 14 3 2 #"if"
0 0 28 3 2 #" ("
0 0 14 3 6 #"empty?"
0 0 28 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 28 3 1 #" "
0 0 14 3 2 #"sy"
0 0 28 3 3 #")) "
0 0 24 3 1 #"'"
0 0 28 3 4 #"() ("
0 0 14 3 16 #"build-list-of-cs"
0 0 28 3 1 #" "
0 0 14 3 2 #"sx"
0 0 28 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 28 3 1 #" "
0 0 14 3 2 #"sy"
0 0 28 3 3 #")))"
0 0 28 29 1 #"\n"
0 0 28 3 4 #"   ("
0 0 14 3 2 #"if"
0 0 28 3 2 #" ("
0 0 14 3 6 #"empty?"
0 0 28 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 28 3 1 #" "
0 0 14 3 2 #"sx"
0 0 28 3 3 #")) "
0 0 24 3 1 #"'"
0 0 28 3 4 #"() ("
0 0 14 3 16 #"build-list-of-cs"
0 0 28 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 28 3 1 #" "
0 0 14 3 2 #"sx"
0 0 28 3 2 #") "
0 0 14 3 2 #"sy"
0 0 28 3 4 #"))))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 18 3 55 #"; compare-common-seq: [Listof DNA-strand] -> DNA-strand"
0 0 28 29 1 #"\n"
0 0 18 3 58
#"; Given a list of all common sequences within two strands,"
0 0 28 29 1 #"\n"
0 0 18 3 61
#"; return the longest of the common sequences within the list."
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 16 3 6 #"define"
0 0 28 3 2 #" ("
0 0 14 3 18 #"compare-common-seq"
0 0 28 3 1 #" "
0 0 14 3 2 #"sl"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 14 3 5 #"foldl"
0 0 28 3 2 #" ("
0 0 16 3 6 #"lambda"
0 0 28 3 2 #" ("
0 0 14 3 4 #"prev"
0 0 28 3 1 #" "
0 0 14 3 4 #"next"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 12 #"           ("
0 0 14 3 2 #"if"
0 0 28 3 2 #" ("
0 0 14 3 1 #">"
0 0 28 3 2 #" ("
0 0 14 3 6 #"length"
0 0 28 3 1 #" "
0 0 14 3 4 #"prev"
0 0 28 3 3 #") ("
0 0 14 3 6 #"length"
0 0 28 3 1 #" "
0 0 14 3 4 #"next"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 3 15 #"               "
0 0 14 3 4 #"prev"
0 0 28 29 1 #"\n"
0 0 28 3 15 #"               "
0 0 14 3 4 #"next"
0 0 28 3 3 #")) "
0 0 24 3 1 #"'"
0 0 28 3 3 #"() "
0 0 14 3 2 #"sl"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 18 3 60
#"; DNAlongest-common-seq: DNA-Strand DNA-strand -> DNA-strand"
0 0 28 29 1 #"\n"
0 0 18 3 68
#"; Given two strands, return the longest common sequence between them"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 16 3 6 #"define"
0 0 28 3 2 #" ("
0 0 14 3 21 #"DNAlongest-common-seq"
0 0 28 3 1 #" "
0 0 14 3 2 #"sx"
0 0 28 3 1 #" "
0 0 14 3 2 #"sy"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 28 3 2 #" ("
0 0 14 3 2 #"or"
0 0 28 3 2 #" ("
0 0 14 3 6 #"empty?"
0 0 28 3 1 #" "
0 0 14 3 2 #"sx"
0 0 28 3 3 #") ("
0 0 14 3 6 #"empty?"
0 0 28 3 1 #" "
0 0 14 3 2 #"sy"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"      "
0 0 24 3 1 #"'"
0 0 28 3 2 #"()"
0 0 28 29 1 #"\n"
0 0 28 3 7 #"      ("
0 0 14 3 18 #"compare-common-seq"
0 0 28 3 2 #" ("
0 0 14 3 16 #"build-list-of-cs"
0 0 28 3 1 #" "
0 0 14 3 2 #"sx"
0 0 28 3 1 #" "
0 0 14 3 2 #"sy"
0 0 28 3 4 #"))))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 28 3 2 #" ("
0 0 14 3 21 #"DNAlongest-common-seq"
0 0 28 29 1 #"\n"
0 0 28 3 16 #"               ("
0 0 14 3 4 #"list"
0 0 28 3 1 #" "
0 0 20 3 3 #"\"A\""
0 0 28 3 1 #" "
0 0 20 3 3 #"\"G\""
0 0 28 3 1 #" "
0 0 20 3 3 #"\"A\""
0 0 28 3 1 #" "
0 0 20 3 3 #"\"C\""
0 0 28 3 1 #" "
0 0 20 3 3 #"\"T\""
0 0 28 3 1 #" "
0 0 20 3 3 #"\"A\""
0 0 28 3 1 #" "
0 0 20 3 3 #"\"G\""
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 16 #"               ("
0 0 14 3 4 #"list"
0 0 28 3 1 #" "
0 0 20 3 3 #"\"C\""
0 0 28 3 1 #" "
0 0 20 3 3 #"\"T\""
0 0 28 3 1 #" "
0 0 20 3 3 #"\"A\""
0 0 28 3 1 #" "
0 0 20 3 3 #"\"A\""
0 0 28 3 1 #" "
0 0 20 3 3 #"\"G\""
0 0 28 3 1 #" "
0 0 20 3 3 #"\"C\""
0 0 28 3 1 #" "
0 0 20 3 3 #"\"T\""
0 0 28 3 1 #" "
0 0 20 3 3 #"\"A\""
0 0 28 3 1 #" "
0 0 20 3 3 #"\"G\""
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 3 15 #"              ("
0 0 14 3 4 #"list"
0 0 28 3 1 #" "
0 0 20 3 3 #"\"C\""
0 0 28 3 1 #" "
0 0 20 3 3 #"\"T\""
0 0 28 3 1 #" "
0 0 20 3 3 #"\"A\""
0 0 28 3 1 #" "
0 0 20 3 3 #"\"G\""
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 28 3 2 #" ("
0 0 14 3 21 #"DNAlongest-common-seq"
0 0 28 29 1 #"\n"
0 0 28 3 15 #"               "
0 0 24 3 1 #"'"
0 0 28 3 1 #"("
0 0 14 3 1 #"a"
0 0 28 3 1 #" "
0 0 14 3 1 #"b"
0 0 28 3 1 #" "
0 0 14 3 1 #"b"
0 0 28 3 1 #" "
0 0 14 3 1 #"c"
0 0 28 3 1 #" "
0 0 14 3 1 #"d"
0 0 28 3 1 #" "
0 0 14 3 1 #"e"
0 0 28 3 1 #" "
0 0 14 3 1 #"f"
0 0 28 3 2 #") "
0 0 24 3 1 #"'"
0 0 28 3 1 #"("
0 0 14 3 1 #"a"
0 0 28 3 1 #" "
0 0 14 3 1 #"h"
0 0 28 3 1 #" "
0 0 14 3 1 #"c"
0 0 28 3 1 #" "
0 0 14 3 1 #"d"
0 0 28 3 1 #" "
0 0 14 3 1 #"e"
0 0 28 3 1 #" "
0 0 14 3 1 #"f"
0 0 28 3 3 #")) "
0 0 24 3 1 #"'"
0 0 28 3 1 #"("
0 0 14 3 1 #"c"
0 0 28 3 1 #" "
0 0 14 3 1 #"d"
0 0 28 3 1 #" "
0 0 14 3 1 #"e"
0 0 28 3 1 #" "
0 0 14 3 1 #"f"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 28 3 2 #" ("
0 0 14 3 21 #"DNAlongest-common-seq"
0 0 28 29 1 #"\n"
0 0 28 3 15 #"               "
0 0 24 3 1 #"'"
0 0 28 3 1 #"("
0 0 14 3 1 #"a"
0 0 28 3 1 #" "
0 0 14 3 1 #"b"
0 0 28 3 1 #" "
0 0 14 3 1 #"b"
0 0 28 3 1 #" "
0 0 14 3 1 #"c"
0 0 28 3 1 #" "
0 0 14 3 1 #"d"
0 0 28 3 1 #" "
0 0 14 3 1 #"e"
0 0 28 3 1 #" "
0 0 14 3 1 #"f"
0 0 28 3 2 #") "
0 0 24 3 1 #"'"
0 0 28 3 1 #"("
0 0 14 3 1 #"a"
0 0 28 3 1 #" "
0 0 14 3 1 #"b"
0 0 28 3 1 #" "
0 0 14 3 1 #"b"
0 0 28 3 1 #" "
0 0 14 3 1 #"c"
0 0 28 3 1 #" "
0 0 14 3 1 #"d"
0 0 28 3 1 #" "
0 0 14 3 1 #"e"
0 0 28 3 3 #")) "
0 0 24 3 1 #"'"
0 0 28 3 1 #"("
0 0 14 3 1 #"a"
0 0 28 3 1 #" "
0 0 14 3 1 #"b"
0 0 28 3 1 #" "
0 0 14 3 1 #"b"
0 0 28 3 1 #" "
0 0 14 3 1 #"c"
0 0 28 3 1 #" "
0 0 14 3 1 #"d"
0 0 28 3 1 #" "
0 0 14 3 1 #"e"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 28 3 2 #" ("
0 0 14 3 21 #"DNAlongest-common-seq"
0 0 28 29 1 #"\n"
0 0 28 3 15 #"               "
0 0 24 3 1 #"'"
0 0 28 3 1 #"("
0 0 14 3 1 #"a"
0 0 28 3 1 #" "
0 0 14 3 1 #"b"
0 0 28 3 1 #" "
0 0 14 3 1 #"b"
0 0 28 3 1 #" "
0 0 14 3 1 #"c"
0 0 28 3 1 #" "
0 0 14 3 1 #"d"
0 0 28 3 1 #" "
0 0 14 3 1 #"e"
0 0 28 3 1 #" "
0 0 14 3 1 #"f"
0 0 28 3 2 #") "
0 0 24 3 1 #"'"
0 0 28 3 4 #"()) "
0 0 24 3 1 #"'"
0 0 28 3 3 #"())"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 28 3 2 #" ("
0 0 14 3 21 #"DNAlongest-common-seq"
0 0 28 29 1 #"\n"
0 0 28 3 15 #"               "
0 0 24 3 1 #"'"
0 0 28 3 1 #"("
0 0 14 3 1 #"a"
0 0 28 3 1 #" "
0 0 14 3 1 #"b"
0 0 28 3 1 #" "
0 0 14 3 1 #"b"
0 0 28 3 1 #" "
0 0 14 3 1 #"c"
0 0 28 3 1 #" "
0 0 14 3 1 #"d"
0 0 28 3 1 #" "
0 0 14 3 1 #"e"
0 0 28 3 1 #" "
0 0 14 3 1 #"f"
0 0 28 3 2 #") "
0 0 24 3 1 #"'"
0 0 28 3 1 #"("
0 0 14 3 1 #"x"
0 0 28 3 1 #" "
0 0 14 3 1 #"x"
0 0 28 3 1 #" "
0 0 14 3 1 #"x"
0 0 28 3 1 #" "
0 0 14 3 1 #"b"
0 0 28 3 1 #" "
0 0 14 3 1 #"b"
0 0 28 3 1 #" "
0 0 14 3 1 #"c"
0 0 28 3 1 #" "
0 0 14 3 1 #"d"
0 0 28 3 1 #" "
0 0 14 3 1 #"e"
0 0 28 3 1 #" "
0 0 14 3 1 #"x"
0 0 28 3 1 #" "
0 0 14 3 1 #"x"
0 0 28 3 1 #" "
0 0 14 3 1 #"x"
0 0 28 3 3 #")) "
0 0 24 3 1 #"'"
0 0 28 3 1 #"("
0 0 14 3 1 #"b"
0 0 28 3 1 #" "
0 0 14 3 1 #"b"
0 0 28 3 1 #" "
0 0 14 3 1 #"c"
0 0 28 3 1 #" "
0 0 14 3 1 #"d"
0 0 28 3 1 #" "
0 0 14 3 1 #"e"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 28 3 2 #" ("
0 0 14 3 21 #"DNAlongest-common-seq"
0 0 28 29 1 #"\n"
0 0 28 3 15 #"               "
0 0 24 3 1 #"'"
0 0 28 3 1 #"("
0 0 14 3 1 #"a"
0 0 28 3 1 #" "
0 0 14 3 1 #"b"
0 0 28 3 1 #" "
0 0 14 3 1 #"b"
0 0 28 3 1 #" "
0 0 14 3 1 #"c"
0 0 28 3 1 #" "
0 0 14 3 1 #"d"
0 0 28 3 1 #" "
0 0 14 3 1 #"e"
0 0 28 3 1 #" "
0 0 14 3 1 #"f"
0 0 28 3 2 #") "
0 0 24 3 1 #"'"
0 0 28 3 1 #"("
0 0 14 3 1 #"b"
0 0 28 3 1 #" "
0 0 14 3 1 #"b"
0 0 28 3 1 #" "
0 0 14 3 1 #"c"
0 0 28 3 1 #" "
0 0 14 3 1 #"d"
0 0 28 3 1 #" "
0 0 14 3 1 #"e"
0 0 28 3 1 #" "
0 0 14 3 1 #"f"
0 0 28 3 3 #")) "
0 0 24 3 1 #"'"
0 0 28 3 1 #"("
0 0 14 3 1 #"b"
0 0 28 3 1 #" "
0 0 14 3 1 #"b"
0 0 28 3 1 #" "
0 0 14 3 1 #"c"
0 0 28 3 1 #" "
0 0 14 3 1 #"d"
0 0 28 3 1 #" "
0 0 14 3 1 #"e"
0 0 28 3 1 #" "
0 0 14 3 1 #"f"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 28 3 2 #" ("
0 0 14 3 21 #"DNAlongest-common-seq"
0 0 28 29 1 #"\n"
0 0 28 3 15 #"               "
0 0 24 3 1 #"'"
0 0 28 3 1 #"("
0 0 14 3 1 #"a"
0 0 28 3 1 #" "
0 0 14 3 1 #"b"
0 0 28 3 1 #" "
0 0 14 3 1 #"c"
0 0 28 3 2 #") "
0 0 24 3 1 #"'"
0 0 28 3 1 #"("
0 0 14 3 1 #"b"
0 0 28 3 1 #" "
0 0 14 3 1 #"c"
0 0 28 3 3 #")) "
0 0 24 3 1 #"'"
0 0 28 3 1 #"("
0 0 14 3 1 #"b"
0 0 28 3 1 #" "
0 0 14 3 1 #"c"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 28 3 2 #" ("
0 0 14 3 21 #"DNAlongest-common-seq"
0 0 28 29 1 #"\n"
0 0 28 3 15 #"               "
0 0 24 3 1 #"'"
0 0 28 3 1 #"("
0 0 14 3 1 #"a"
0 0 28 3 1 #" "
0 0 14 3 1 #"b"
0 0 28 3 1 #" "
0 0 14 3 1 #"c"
0 0 28 3 2 #") "
0 0 24 3 1 #"'"
0 0 28 3 1 #"("
0 0 14 3 1 #"a"
0 0 28 3 1 #" "
0 0 14 3 1 #"b"
0 0 28 3 1 #" "
0 0 14 3 1 #"c"
0 0 28 3 3 #")) "
0 0 24 3 1 #"'"
0 0 28 3 1 #"("
0 0 14 3 1 #"a"
0 0 28 3 1 #" "
0 0 14 3 1 #"b"
0 0 28 3 1 #" "
0 0 14 3 1 #"c"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 28 3 2 #" ("
0 0 14 3 21 #"DNAlongest-common-seq"
0 0 28 29 1 #"\n"
0 0 28 3 15 #"               "
0 0 24 3 1 #"'"
0 0 28 3 1 #"("
0 0 14 3 1 #"a"
0 0 28 3 1 #" "
0 0 14 3 1 #"b"
0 0 28 3 1 #" "
0 0 14 3 1 #"c"
0 0 28 3 1 #" "
0 0 14 3 1 #"d"
0 0 28 3 1 #" "
0 0 14 3 1 #"e"
0 0 28 3 1 #" "
0 0 14 3 1 #"f"
0 0 28 3 2 #") "
0 0 24 3 1 #"'"
0 0 28 3 1 #"("
0 0 14 3 1 #"a"
0 0 28 3 1 #" "
0 0 14 3 1 #"b"
0 0 28 3 1 #" "
0 0 14 3 1 #"c"
0 0 28 3 3 #")) "
0 0 24 3 1 #"'"
0 0 28 3 1 #"("
0 0 14 3 1 #"a"
0 0 28 3 1 #" "
0 0 14 3 1 #"b"
0 0 28 3 1 #" "
0 0 14 3 1 #"c"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 28 3 2 #" ("
0 0 14 3 21 #"DNAlongest-common-seq"
0 0 28 29 1 #"\n"
0 0 28 3 15 #"               "
0 0 24 3 1 #"'"
0 0 28 3 1 #"("
0 0 14 3 1 #"a"
0 0 28 3 1 #" "
0 0 14 3 1 #"b"
0 0 28 3 1 #" "
0 0 14 3 1 #"c"
0 0 28 3 1 #" "
0 0 14 3 1 #"d"
0 0 28 3 1 #" "
0 0 14 3 1 #"e"
0 0 28 3 1 #" "
0 0 14 3 1 #"f"
0 0 28 3 2 #") "
0 0 24 3 1 #"'"
0 0 28 3 1 #"("
0 0 14 3 1 #"d"
0 0 28 3 1 #" "
0 0 14 3 1 #"e"
0 0 28 3 1 #" "
0 0 14 3 1 #"f"
0 0 28 3 3 #")) "
0 0 24 3 1 #"'"
0 0 28 3 1 #"("
0 0 14 3 1 #"d"
0 0 28 3 1 #" "
0 0 14 3 1 #"e"
0 0 28 3 1 #" "
0 0 14 3 1 #"f"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 28 3 2 #" ("
0 0 14 3 21 #"DNAlongest-common-seq"
0 0 28 29 1 #"\n"
0 0 28 3 15 #"               "
0 0 24 3 1 #"'"
0 0 28 3 1 #"("
0 0 14 3 1 #"a"
0 0 28 3 1 #" "
0 0 14 3 1 #"b"
0 0 28 3 1 #" "
0 0 14 3 1 #"c"
0 0 28 3 1 #" "
0 0 14 3 1 #"d"
0 0 28 3 1 #" "
0 0 14 3 1 #"e"
0 0 28 3 1 #" "
0 0 14 3 1 #"f"
0 0 28 3 2 #") "
0 0 24 3 1 #"'"
0 0 28 3 1 #"("
0 0 14 3 1 #"d"
0 0 28 3 1 #" "
0 0 14 3 1 #"e"
0 0 28 3 4 #" )) "
0 0 24 3 1 #"'"
0 0 28 3 1 #"("
0 0 14 3 1 #"d"
0 0 28 3 1 #" "
0 0 14 3 1 #"e"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 28 3 2 #" ("
0 0 14 3 21 #"DNAlongest-common-seq"
0 0 28 29 1 #"\n"
0 0 28 3 15 #"               "
0 0 24 3 1 #"'"
0 0 28 3 1 #"("
0 0 14 3 1 #"d"
0 0 28 3 1 #" "
0 0 14 3 1 #"e"
0 0 28 3 2 #") "
0 0 24 3 1 #"'"
0 0 28 3 1 #"("
0 0 14 3 1 #"a"
0 0 28 3 1 #" "
0 0 14 3 1 #"b"
0 0 28 3 1 #" "
0 0 14 3 1 #"c"
0 0 28 3 1 #" "
0 0 14 3 1 #"d"
0 0 28 3 1 #" "
0 0 14 3 1 #"e"
0 0 28 3 1 #" "
0 0 14 3 1 #"f"
0 0 28 3 4 #") ) "
0 0 24 3 1 #"'"
0 0 28 3 1 #"("
0 0 14 3 1 #"d"
0 0 28 3 1 #" "
0 0 14 3 1 #"e"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 28 3 2 #" ("
0 0 14 3 21 #"DNAlongest-common-seq"
0 0 28 29 1 #"\n"
0 0 28 3 15 #"               "
0 0 24 3 1 #"'"
0 0 28 3 1 #"("
0 0 14 3 1 #"d"
0 0 28 3 1 #" "
0 0 14 3 1 #"e"
0 0 28 3 1 #" "
0 0 14 3 1 #"f"
0 0 28 3 2 #") "
0 0 24 3 1 #"'"
0 0 28 3 1 #"("
0 0 14 3 1 #"d"
0 0 28 3 1 #" "
0 0 14 3 1 #"e"
0 0 28 3 1 #" "
0 0 14 3 1 #"a"
0 0 28 3 1 #" "
0 0 14 3 1 #"b"
0 0 28 3 1 #" "
0 0 14 3 1 #"c"
0 0 28 3 1 #" "
0 0 14 3 1 #"d"
0 0 28 3 1 #" "
0 0 14 3 1 #"e"
0 0 28 3 1 #" "
0 0 14 3 1 #"f"
0 0 28 3 4 #") ) "
0 0 24 3 1 #"'"
0 0 28 3 1 #"("
0 0 14 3 1 #"d"
0 0 28 3 1 #" "
0 0 14 3 1 #"e"
0 0 28 3 1 #" "
0 0 14 3 1 #"f"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 18 3 14 #";;; Exercise 6"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 18 3 51 #"; build-LCS-from-sx: List DNA-strand Number -> List"
0 0 28 29 1 #"\n"
0 0 18 3 63
#"; Inputs a list to have its length determined. The given number"
0 0 28 29 1 #"\n"
0 0 18 3 71
(
 #"; determines where the listref begins its scan. The length of the fi"
 #"rst"
) 0 0 28 29 1 #"\n"
0 0 18 3 49 #"; list is constructs a list of that length by the"
0 0 28 29 1 #"\n"
0 0 18 3 41 #"; listref(0 - len(input list)) of the sx."
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 16 3 6 #"define"
0 0 28 3 2 #" ("
0 0 14 3 17 #"build-LCS-from-sx"
0 0 28 3 1 #" "
0 0 14 3 4 #"list"
0 0 28 3 1 #" "
0 0 14 3 2 #"sx"
0 0 28 3 1 #" "
0 0 14 3 1 #"n"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 16 3 4 #"cond"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"    [("
0 0 14 3 3 #"not"
0 0 28 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 28 3 2 #" ("
0 0 14 3 6 #"length"
0 0 28 3 1 #" "
0 0 14 3 4 #"list"
0 0 28 3 2 #") "
0 0 14 3 1 #"n"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"     ("
0 0 14 3 4 #"cons"
0 0 28 3 2 #" ("
0 0 14 3 8 #"list-ref"
0 0 28 3 1 #" "
0 0 14 3 2 #"sx"
0 0 28 3 1 #" "
0 0 14 3 1 #"n"
0 0 28 3 3 #") ("
0 0 14 3 17 #"build-LCS-from-sx"
0 0 28 3 1 #" "
0 0 14 3 4 #"list"
0 0 28 3 1 #" "
0 0 14 3 2 #"sx"
0 0 28 3 2 #" ("
0 0 14 3 4 #"add1"
0 0 28 3 1 #" "
0 0 14 3 1 #"n"
0 0 28 3 4 #")))]"
0 0 28 29 1 #"\n"
0 0 28 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 28 3 5 #"()]))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 28 3 2 #" ("
0 0 14 3 17 #"build-LCS-from-sx"
0 0 28 29 1 #"\n"
0 0 28 3 16 #"               ("
0 0 14 3 4 #"list"
0 0 28 3 1 #" "
0 0 20 3 18 #"\"A list of length\""
0 0 28 3 1 #" "
0 0 20 3 3 #"\"2\""
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 16 #"               ("
0 0 14 3 4 #"list"
0 0 28 3 1 #" "
0 0 20 3 3 #"\"C\""
0 0 28 3 1 #" "
0 0 20 3 3 #"\"G\""
0 0 28 3 1 #" "
0 0 20 3 3 #"\"T\""
0 0 28 3 1 #" "
0 0 20 3 3 #"\"A\""
0 0 28 3 1 #" "
0 0 20 3 3 #"\"C\""
0 0 28 3 2 #") "
0 0 24 3 1 #"0"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 15 #"              ("
0 0 14 3 4 #"list"
0 0 28 3 1 #" "
0 0 20 3 3 #"\"C\""
0 0 28 3 1 #" "
0 0 20 3 3 #"\"G\""
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 18 3 56 #"; grab-exceeding-sx: DNA-strand DNA-strand -> DNA-strand"
0 0 28 29 1 #"\n"
0 0 18 3 62
#"; We use this function in conjuction with build-LCS-from-sx to"
0 0 28 29 1 #"\n"
0 0 18 3 11 #"; determine"
0 0 18 3 54 #" whether or not we've reached the beginning of our LCS"
0 0 28 29 1 #"\n"
0 0 18 3 8 #"; within"
0 0 18 3 1 #" "
0 0 18 3 58
#"our sx strand. If so, then grab-preceding-sx will bail out"
0 0 28 29 1 #"\n"
0 0 18 3 48 #"; and return the rest of sx, including the LCS. "
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 16 3 6 #"define"
0 0 28 3 2 #" ("
0 0 14 3 17 #"grab-exceeding-sx"
0 0 28 3 1 #" "
0 0 14 3 3 #"lcs"
0 0 28 3 1 #" "
0 0 14 3 2 #"sx"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 16 3 4 #"cond"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"    [("
0 0 14 3 6 #"equal?"
0 0 28 3 2 #" ("
0 0 14 3 17 #"build-LCS-from-sx"
0 0 28 3 1 #" "
0 0 14 3 3 #"lcs"
0 0 28 3 1 #" "
0 0 14 3 2 #"sx"
0 0 28 3 1 #" "
0 0 24 3 1 #"0"
0 0 28 3 2 #") "
0 0 14 3 3 #"lcs"
0 0 28 3 2 #") "
0 0 14 3 2 #"sx"
0 0 28 3 1 #"]"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"    [("
0 0 14 3 3 #"not"
0 0 28 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 28 3 2 #" ("
0 0 14 3 17 #"build-LCS-from-sx"
0 0 28 3 1 #" "
0 0 14 3 3 #"lcs"
0 0 28 3 1 #" "
0 0 14 3 2 #"sx"
0 0 28 3 1 #" "
0 0 24 3 1 #"0"
0 0 28 3 2 #") "
0 0 14 3 3 #"lcs"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"     ("
0 0 14 3 17 #"grab-exceeding-sx"
0 0 28 3 1 #" "
0 0 14 3 3 #"lcs"
0 0 28 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 28 3 1 #" "
0 0 14 3 2 #"sx"
0 0 28 3 5 #"))]))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 28 3 2 #" ("
0 0 14 3 17 #"grab-exceeding-sx"
0 0 28 3 2 #" ("
0 0 14 3 4 #"list"
0 0 28 3 1 #" "
0 0 20 3 3 #"\"A\""
0 0 28 3 1 #" "
0 0 20 3 3 #"\"G\""
0 0 28 3 1 #" "
0 0 20 3 3 #"\"T\""
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 34 #"                                 ("
0 0 14 3 4 #"list"
0 0 28 3 1 #" "
0 0 20 3 3 #"\"A\""
0 0 28 3 1 #" "
0 0 20 3 3 #"\"C\""
0 0 28 3 1 #" "
0 0 20 3 3 #"\"A\""
0 0 28 3 1 #" "
0 0 20 3 3 #"\"G\""
0 0 28 3 1 #" "
0 0 20 3 3 #"\"T\""
0 0 28 3 1 #" "
0 0 20 3 3 #"\"A\""
0 0 28 3 1 #" "
0 0 20 3 3 #"\"C\""
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 3 15 #"              ("
0 0 14 3 4 #"list"
0 0 28 3 1 #" "
0 0 20 3 3 #"\"A\""
0 0 28 3 1 #" "
0 0 20 3 3 #"\"G\""
0 0 28 3 1 #" "
0 0 20 3 3 #"\"T\""
0 0 28 3 1 #" "
0 0 20 3 3 #"\"A\""
0 0 28 3 1 #" "
0 0 20 3 3 #"\"C\""
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 18 3 52 #"; build-sx-half: DNA-strand DNA-strand -> DNA-strand"
0 0 28 29 1 #"\n"
0 0 18 3 68
#"; We now know the length of the sx preceding the LCS, because we can"
0 0 28 29 1 #"\n"
0 0 18 3 2 #"; "
0 0 18 3 69
(
 #"subtract the lengths of the original sx and the deconstructed sx fro"
 #"m"
) 0 0 28 29 1 #"\n"
0 0 18 3 69
(
 #";'grab-exceeding-sx.' From this, we can use our poorly named functio"
 #"n"
) 0 0 28 29 1 #"\n"
0 0 18 3 3 #"; '"
0 0 18 3 69
(
 #"build-LCS-from-sx' to grab the preceding elements of our original sx"
 #"."
) 0 0 28 29 1 #"\n"
0 0 18 3 6 #"; This"
0 0 18 3 4 #" is "
0 0 18 3 12 #"accomplished"
0 0 18 3 45 #" by making a filler list of the length of the"
0 0 28 29 1 #"\n"
0 0 18 3 69
(
 #"; preceeding list, then handing it to our build-LCS-from-sx function"
 #"."
) 0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 16 3 6 #"define"
0 0 28 3 2 #" ("
0 0 14 3 13 #"build-sx-half"
0 0 28 3 1 #" "
0 0 14 3 2 #"sx"
0 0 28 3 1 #" "
0 0 14 3 2 #"sy"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 14 3 17 #"build-LCS-from-sx"
0 0 28 29 1 #"\n"
0 0 28 3 4 #"   ("
0 0 14 3 9 #"make-list"
0 0 28 29 1 #"\n"
0 0 28 3 5 #"    ("
0 0 14 3 1 #"-"
0 0 28 3 2 #" ("
0 0 14 3 6 #"length"
0 0 28 3 1 #" "
0 0 14 3 2 #"sx"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 8 #"       ("
0 0 14 3 6 #"length"
0 0 28 3 2 #" ("
0 0 14 3 17 #"grab-exceeding-sx"
0 0 28 3 2 #" ("
0 0 14 3 21 #"DNAlongest-common-seq"
0 0 28 3 1 #" "
0 0 14 3 2 #"sx"
0 0 28 3 1 #" "
0 0 14 3 2 #"sy"
0 0 28 3 2 #") "
0 0 14 3 2 #"sx"
0 0 28 3 3 #")))"
0 0 28 29 1 #"\n"
0 0 28 3 4 #"    "
0 0 24 3 1 #"'"
0 0 14 3 4 #"fill"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"   "
0 0 14 3 2 #"sx"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"   "
0 0 24 3 1 #"0"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 28 3 2 #" ("
0 0 14 3 13 #"build-sx-half"
0 0 28 29 1 #"\n"
0 0 28 3 16 #"               ("
0 0 14 3 4 #"list"
0 0 28 3 1 #" "
0 0 20 3 3 #"\"A\""
0 0 28 3 1 #" "
0 0 20 3 3 #"\"C\""
0 0 28 3 1 #" "
0 0 20 3 3 #"\"A\""
0 0 28 3 1 #" "
0 0 20 3 3 #"\"G\""
0 0 28 3 1 #" "
0 0 20 3 3 #"\"T\""
0 0 28 3 1 #" "
0 0 20 3 3 #"\"A\""
0 0 28 3 1 #" "
0 0 20 3 3 #"\"C\""
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 16 #"               ("
0 0 14 3 4 #"list"
0 0 28 3 1 #" "
0 0 20 3 3 #"\"A\""
0 0 28 3 1 #" "
0 0 20 3 3 #"\"G\""
0 0 28 3 1 #" "
0 0 20 3 3 #"\"T\""
0 0 28 3 4 #")) ("
0 0 14 3 4 #"list"
0 0 28 3 1 #" "
0 0 20 3 3 #"\"A\""
0 0 28 3 1 #" "
0 0 20 3 3 #"\"C\""
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 18 3 63
#"; build-LCS-from-sy: DNA-strand DNA-strand Number -> DNA-strand"
0 0 28 29 1 #"\n"
0 0 18 3 63
#"; Inputs a list to have its length determined. The given number"
0 0 28 29 1 #"\n"
0 0 18 3 71
(
 #"; determines where the listref begins its scan. The length of the fi"
 #"rst"
) 0 0 28 29 1 #"\n"
0 0 18 3 49 #"; list is constructs a list of that length by the"
0 0 28 29 1 #"\n"
0 0 18 3 40 #"; listref(0 - len(input list)) of the sy"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 16 3 6 #"define"
0 0 28 3 2 #" ("
0 0 14 3 17 #"build-LCS-from-sy"
0 0 28 3 1 #" "
0 0 14 3 4 #"list"
0 0 28 3 1 #" "
0 0 14 3 2 #"sy"
0 0 28 3 1 #" "
0 0 14 3 1 #"n"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 16 3 4 #"cond"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"    [("
0 0 14 3 3 #"not"
0 0 28 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 28 3 2 #" ("
0 0 14 3 6 #"length"
0 0 28 3 1 #" "
0 0 14 3 4 #"list"
0 0 28 3 2 #") "
0 0 14 3 1 #"n"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"     ("
0 0 14 3 4 #"cons"
0 0 28 3 2 #" ("
0 0 14 3 8 #"list-ref"
0 0 28 3 1 #" "
0 0 14 3 2 #"sy"
0 0 28 3 1 #" "
0 0 14 3 1 #"n"
0 0 28 3 3 #") ("
0 0 14 3 17 #"build-LCS-from-sy"
0 0 28 3 1 #" "
0 0 14 3 4 #"list"
0 0 28 3 1 #" "
0 0 14 3 2 #"sy"
0 0 28 3 2 #" ("
0 0 14 3 4 #"add1"
0 0 28 3 1 #" "
0 0 14 3 1 #"n"
0 0 28 3 4 #")))]"
0 0 28 29 1 #"\n"
0 0 28 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 28 3 5 #"()]))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 18 3 56 #"; grab-exceeding-sy: DNA-strand DNA-strand -> DNA-strand"
0 0 28 29 1 #"\n"
0 0 18 3 62
#"; We use this function in conjuction with build-LCS-from-sy to"
0 0 28 29 1 #"\n"
0 0 18 3 65
#"; determine whether or not we've reached the beginning of our LCS"
0 0 28 29 1 #"\n"
0 0 18 3 8 #"; within"
0 0 18 3 59
#" our sx strand. If so, then grab-preceding-sy will bail out"
0 0 28 29 1 #"\n"
0 0 18 3 48 #"; and return the rest of sx, including the LCS. "
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 16 3 6 #"define"
0 0 28 3 2 #" ("
0 0 14 3 17 #"grab-exceeding-sy"
0 0 28 3 1 #" "
0 0 14 3 3 #"lcs"
0 0 28 3 1 #" "
0 0 14 3 2 #"sy"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 16 3 4 #"cond"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"    [("
0 0 14 3 6 #"equal?"
0 0 28 3 2 #" ("
0 0 14 3 17 #"build-LCS-from-sy"
0 0 28 3 1 #" "
0 0 14 3 3 #"lcs"
0 0 28 3 1 #" "
0 0 14 3 2 #"sy"
0 0 28 3 1 #" "
0 0 24 3 1 #"0"
0 0 28 3 2 #") "
0 0 14 3 3 #"lcs"
0 0 28 3 2 #") "
0 0 14 3 2 #"sy"
0 0 28 3 1 #"]"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"    [("
0 0 14 3 3 #"not"
0 0 28 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 28 3 2 #" ("
0 0 14 3 17 #"build-LCS-from-sy"
0 0 28 3 1 #" "
0 0 14 3 3 #"lcs"
0 0 28 3 1 #" "
0 0 14 3 2 #"sy"
0 0 28 3 1 #" "
0 0 24 3 1 #"0"
0 0 28 3 2 #") "
0 0 14 3 3 #"lcs"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"     ("
0 0 14 3 17 #"grab-exceeding-sy"
0 0 28 3 1 #" "
0 0 14 3 3 #"lcs"
0 0 28 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 28 3 1 #" "
0 0 14 3 2 #"sy"
0 0 28 3 5 #"))]))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 18 3 46 #"; DNAjoin: DNA-strand DNA-strand -> DNA-strand"
0 0 28 29 1 #"\n"
0 0 18 3 64
#"; Inputs two strands of DNA then concatenates the first strand's"
0 0 28 29 1 #"\n"
0 0 18 3 71
(
 #"; sequence prior to the the common LCS, the LCS iitself, and the lat"
 #"ter"
) 0 0 28 29 1 #"\n"
0 0 18 3 72
(
 #"; strand's sequence following the common LCS. We use 'grab-exceeding"
 #"-sy'"
) 0 0 28 29 1 #"\n"
0 0 18 3 56 #"; because it already grabs the LCS + what follows in sy."
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 16 3 6 #"define"
0 0 28 3 2 #" ("
0 0 14 3 7 #"DNAjoin"
0 0 28 3 1 #" "
0 0 14 3 2 #"sx"
0 0 28 3 1 #" "
0 0 14 3 2 #"sy"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 28 3 2 #" ("
0 0 14 3 2 #"or"
0 0 28 3 2 #" ("
0 0 14 3 6 #"empty?"
0 0 28 3 1 #" "
0 0 14 3 2 #"sx"
0 0 28 3 3 #") ("
0 0 14 3 6 #"empty?"
0 0 28 3 1 #" "
0 0 14 3 2 #"sy"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"      "
0 0 24 3 1 #"'"
0 0 28 3 2 #"()"
0 0 28 29 1 #"\n"
0 0 28 3 7 #"      ("
0 0 14 3 6 #"append"
0 0 28 29 1 #"\n"
0 0 28 3 8 #"       ("
0 0 14 3 13 #"build-sx-half"
0 0 28 3 1 #" "
0 0 14 3 2 #"sx"
0 0 28 3 1 #" "
0 0 14 3 2 #"sy"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 8 #"       ("
0 0 14 3 17 #"grab-exceeding-sy"
0 0 28 3 2 #" ("
0 0 14 3 21 #"DNAlongest-common-seq"
0 0 28 3 1 #" "
0 0 14 3 2 #"sx"
0 0 28 3 1 #" "
0 0 14 3 2 #"sy"
0 0 28 3 2 #") "
0 0 14 3 2 #"sy"
0 0 28 3 4 #"))))"
0 0 28 29 1 #"\n"
0 0 28 3 20 #"                    "
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 28 3 2 #" ("
0 0 14 3 7 #"DNAjoin"
0 0 28 3 2 #" ("
0 0 14 3 4 #"list"
0 0 28 3 1 #" "
0 0 20 3 3 #"\"A\""
0 0 28 3 1 #" "
0 0 20 3 3 #"\"C\""
0 0 28 3 1 #" "
0 0 20 3 3 #"\"T\""
0 0 28 3 1 #" "
0 0 20 3 3 #"\"G\""
0 0 28 3 1 #" "
0 0 20 3 3 #"\"T\""
0 0 28 3 1 #" "
0 0 20 3 3 #"\"C\""
0 0 28 3 1 #" "
0 0 20 3 3 #"\"A\""
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 24 #"                       ("
0 0 14 3 4 #"list"
0 0 28 3 1 #" "
0 0 20 3 3 #"\"A\""
0 0 28 3 1 #" "
0 0 20 3 3 #"\"G\""
0 0 28 3 1 #" "
0 0 20 3 3 #"\"T\""
0 0 28 3 1 #" "
0 0 20 3 3 #"\"G\""
0 0 28 3 1 #" "
0 0 20 3 3 #"\"T\""
0 0 28 3 1 #" "
0 0 20 3 3 #"\"C\""
0 0 28 3 1 #" "
0 0 20 3 3 #"\"T\""
0 0 28 3 1 #" "
0 0 20 3 3 #"\"T\""
0 0 28 3 1 #" "
0 0 20 3 3 #"\"A\""
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 3 15 #"              ("
0 0 14 3 4 #"list"
0 0 28 3 1 #" "
0 0 20 3 3 #"\"A\""
0 0 28 3 1 #" "
0 0 20 3 3 #"\"C\""
0 0 28 3 1 #" "
0 0 20 3 3 #"\"T\""
0 0 28 3 1 #" "
0 0 20 3 3 #"\"G\""
0 0 28 3 1 #" "
0 0 20 3 3 #"\"T\""
0 0 28 3 1 #" "
0 0 20 3 3 #"\"C\""
0 0 28 3 1 #" "
0 0 20 3 3 #"\"T\""
0 0 28 3 1 #" "
0 0 20 3 3 #"\"T\""
0 0 28 3 1 #" "
0 0 20 3 3 #"\"A\""
0 0 28 3 2 #"))"
0           0
