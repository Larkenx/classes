#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 6.2.1 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 32 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsi"
 #"s-snip-wxme.rkt\" \"drracket\" \"private\"))\0"
) 2 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 71 0 1 #"\0"
0 75 1 #"\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 12 #"Inconsolata\0"
0 14 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 191 191 191 49 51 55 -1 -1
2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 142 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 92 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 254 252 120 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 169 169 169 0 0 0 -1 -1 2
37 #"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 169 169 169 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 132 230 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 132 230 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 212 251 120 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 212 251 120 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 101 187 226 0 0 0 -1 -1 2
37 #"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 101 187 226 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 254 252 120 0 0 0 -1 -1 2
39 #"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 254 252 120 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 234 234 234 0 0 0 -1 -1 2
42 #"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 234 234 234 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 16
#"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 147 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 192 192 192 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 192 192 192 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 0 0 0 94 94 94 255 212 120 -1 -1
2 27 #"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 0 0 0 94 94 94 255 212 120 -1 -1
4 1 #"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
49 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
28 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
16 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
18 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
51 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
0 1 #"\0"
0 -1 1 #"\0"
0 13 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
0 13 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 65 105 225 0 0 0
-1 -1           0 374 0 4 3 85
(
 #";; The first three lines of this file were inserted by DrRacket. The"
 #"y record metadata"
) 0 0 4 29 1 #"\n"
0 0 4 3 85
(
 #";; about the language level of this file in a form that our tools ca"
 #"n easily process."
) 0 0 4 29 1 #"\n"
0 0 4 3 193
(
 #"#reader(lib \"htdp-intermediate-lambda-reader.ss\" \"lang\")((modnam"
 #"e assignment10) (read-case-sensitive #t) (teachpacks ()) (htdp-setti"
 #"ngs #(#t constructor repeating-decimal #f #t none #f () #f)))"
) 0 0 4 29 1 #"\n"
0 0 28 3 1 #"("
0 0 16 3 13 #"define-struct"
0 0 28 3 1 #" "
0 0 14 3 7 #"no-info"
0 0 28 3 4 #" [])"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 16 3 6 #"define"
0 0 28 3 1 #" "
0 0 14 3 4 #"NONE"
0 0 28 3 2 #" ("
0 0 14 3 12 #"make-no-info"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 16 3 13 #"define-struct"
0 0 28 3 1 #" "
0 0 14 3 4 #"node"
0 0 28 3 2 #" ["
0 0 14 3 3 #"ssn"
0 0 28 3 1 #" "
0 0 14 3 4 #"name"
0 0 28 3 1 #" "
0 0 14 3 4 #"left"
0 0 28 3 1 #" "
0 0 14 3 5 #"right"
0 0 28 3 2 #"])"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 18 3 37 #"; A BinaryTree (short: BT) is one of:"
0 0 28 29 1 #"\n"
0 0 18 3 10 #"; \342\200\223 NONE"
0 0 28 29 1 #"\n"
0 0 18 3 37 #"; \342\200\223 (make-node Number Symbol BT BT)"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 18 3 14 #"; Exercise 309"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 18 3 45 #"; search-bt: Number BT -> [Boolean or Symbol]"
0 0 28 29 1 #"\n"
0 0 18 3 67
#"; Given a number and a BT, return a name associated with the number"
0 0 28 29 1 #"\n"
0 0 18 3 53 #"; if one such number exists. Otherwise, return false."
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 18 3 11 #"; Template:"
0 0 28 29 1 #"\n"
0 0 18 3 11 #"; ---------"
0 0 28 29 1 #"\n"
0 7         367 61           0 0           0 60 0 28 3 1 #"("
0 0 16 3 6 #"define"
0 0 28 3 2 #" ("
0 0 14 3 9 #"search-bt"
0 0 28 3 1 #" "
0 0 14 3 1 #"n"
0 0 28 3 1 #" "
0 0 14 3 2 #"bt"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 16 3 4 #"cond"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"    [("
0 0 14 3 8 #"no-info?"
0 0 28 3 1 #" "
0 0 14 3 2 #"bt"
0 0 28 3 3 #") ("
0 0 14 3 3 #"..."
0 0 28 3 2 #")]"
0 0 28 29 1 #"\n"
0 0 28 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 28 3 2 #" ("
0 0 14 3 3 #"..."
0 0 28 3 2 #" ("
0 0 14 3 8 #"node-ssn"
0 0 28 3 1 #" "
0 0 14 3 2 #"bt"
0 0 28 3 2 #") "
0 0 14 3 3 #"..."
0 0 28 3 2 #" ("
0 0 14 3 9 #"node-name"
0 0 28 3 1 #" "
0 0 14 3 2 #"bt"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 16 #"               ("
0 0 14 3 3 #"..."
0 0 28 3 2 #" ("
0 0 14 3 9 #"search-bt"
0 0 28 3 1 #" "
0 0 14 3 1 #"n"
0 0 28 3 2 #" ("
0 0 14 3 9 #"node-left"
0 0 28 3 1 #" "
0 0 14 3 2 #"bt"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 3 16 #"               ("
0 0 14 3 3 #"..."
0 0 28 3 2 #" ("
0 0 14 3 9 #"search-bt"
0 0 28 3 1 #" "
0 0 14 3 1 #"n"
0 0 28 3 2 #" ("
0 0 14 3 10 #"node-right"
0 0 28 3 1 #" "
0 0 14 3 2 #"bt"
0 0 28 3 8 #")))))]))"
0           0 0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 16 3 6 #"define"
0 0 28 3 2 #" ("
0 0 14 3 9 #"search-bt"
0 0 28 3 1 #" "
0 0 14 3 1 #"n"
0 0 28 3 1 #" "
0 0 14 3 2 #"bt"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 16 3 4 #"cond"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"    [("
0 0 14 3 8 #"no-info?"
0 0 28 3 1 #" "
0 0 14 3 2 #"bt"
0 0 28 3 2 #") "
0 0 24 3 6 #"#false"
0 0 28 3 1 #"]"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"    [("
0 0 14 3 6 #"equal?"
0 0 28 3 2 #" ("
0 0 14 3 8 #"node-ssn"
0 0 28 3 1 #" "
0 0 14 3 2 #"bt"
0 0 28 3 2 #") "
0 0 14 3 1 #"n"
0 0 28 3 3 #") ("
0 0 14 3 9 #"node-name"
0 0 28 3 1 #" "
0 0 14 3 2 #"bt"
0 0 28 3 2 #")]"
0 0 28 29 1 #"\n"
0 0 28 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 28 3 2 #" ("
0 0 14 3 2 #"if"
0 0 28 3 2 #" ("
0 0 14 3 8 #"boolean?"
0 0 28 3 2 #" ("
0 0 14 3 9 #"search-bt"
0 0 28 3 1 #" "
0 0 14 3 1 #"n"
0 0 28 3 2 #" ("
0 0 14 3 9 #"node-left"
0 0 28 3 1 #" "
0 0 14 3 2 #"bt"
0 0 28 3 3 #")))"
0 0 28 29 1 #"\n"
0 0 28 3 15 #"              ("
0 0 14 3 9 #"search-bt"
0 0 28 3 1 #" "
0 0 14 3 1 #"n"
0 0 28 3 2 #" ("
0 0 14 3 10 #"node-right"
0 0 28 3 1 #" "
0 0 14 3 2 #"bt"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 3 15 #"              ("
0 0 14 3 9 #"search-bt"
0 0 28 3 1 #" "
0 0 14 3 1 #"n"
0 0 28 3 2 #" ("
0 0 14 3 9 #"node-left"
0 0 28 3 1 #" "
0 0 14 3 2 #"bt"
0 0 28 3 4 #")))]"
0 0 28 29 1 #"\n"
0 0 28 3 5 #"    )"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  )"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 16 3 6 #"define"
0 0 28 3 1 #" "
0 0 14 3 7 #"test-bt"
0 0 28 3 2 #" ("
0 0 14 3 9 #"make-node"
0 0 28 3 1 #" "
0 0 24 3 8 #"92017810"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 14 3 4 #"John"
0 0 28 3 1 #" "
0 0 14 3 4 #"NONE"
0 0 28 29 1 #"\n"
0 0 28 3 28 #"                           ("
0 0 14 3 9 #"make-node"
0 0 28 3 1 #" "
0 0 24 3 7 #"8675309"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 14 3 5 #"Stacy"
0 0 28 3 1 #" "
0 0 14 3 4 #"NONE"
0 0 28 3 1 #" "
0 0 14 3 4 #"NONE"
0 0 28 3 3 #")))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 28 3 2 #" ("
0 0 14 3 9 #"search-bt"
0 0 28 3 1 #" "
0 0 24 3 8 #"92017810"
0 0 28 3 1 #" "
0 0 14 3 7 #"test-bt"
0 0 28 3 2 #") "
0 0 24 3 1 #"'"
0 0 14 3 4 #"John"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 28 3 2 #" ("
0 0 14 3 9 #"search-bt"
0 0 28 3 1 #" "
0 0 24 3 7 #"8675309"
0 0 28 3 1 #" "
0 0 14 3 7 #"test-bt"
0 0 28 3 2 #") "
0 0 24 3 1 #"'"
0 0 14 3 5 #"Stacy"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 28 3 2 #" ("
0 0 14 3 9 #"search-bt"
0 0 28 3 1 #" "
0 0 24 3 8 #"01010101"
0 0 28 3 1 #" "
0 0 14 3 7 #"test-bt"
0 0 28 3 2 #") "
0 0 24 3 6 #"#false"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 18 3 14 #"; Exericse 310"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 18 3 32 #"; inorder: BT -> [Listof Number]"
0 0 28 29 1 #"\n"
0 0 18 3 72
(
 #"; Given a binary tree, produce a sequence of the SSNs from left to r"
 #"ight"
) 0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 18 3 11 #"; Template:"
0 0 28 29 1 #"\n"
0 0 18 3 11 #"; ---------"
0 0 28 29 1 #"\n"
0 7         271 61           0 0           0 44 0 28 3 1 #"("
0 0 16 3 6 #"define"
0 0 28 3 2 #" ("
0 0 14 3 7 #"inorder"
0 0 28 3 1 #" "
0 0 14 3 2 #"bt"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 16 3 4 #"cond"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"    [("
0 0 14 3 8 #"no-info?"
0 0 28 3 1 #" "
0 0 14 3 2 #"bt"
0 0 28 3 2 #") "
0 0 14 3 5 #"empty"
0 0 28 3 1 #"]"
0 0 28 29 1 #"\n"
0 0 28 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 28 3 2 #" ("
0 0 14 3 3 #"..."
0 0 28 3 2 #" ("
0 0 14 3 8 #"node-ssn"
0 0 28 3 1 #" "
0 0 14 3 2 #"bt"
0 0 28 3 3 #") ("
0 0 14 3 3 #"..."
0 0 28 3 2 #" ("
0 0 14 3 7 #"inorder"
0 0 28 3 2 #" ("
0 0 14 3 9 #"node-left"
0 0 28 3 1 #" "
0 0 14 3 2 #"bt"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 3 35 #"                                  ("
0 0 14 3 7 #"inorder"
0 0 28 3 2 #" ("
0 0 14 3 10 #"node-right"
0 0 28 3 1 #" "
0 0 14 3 2 #"bt"
0 0 28 3 7 #"))))]))"
0           0 0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 14 3 4 #"cons"
0 0 28 3 2 #" ("
0 0 14 3 9 #"node-left"
0 0 28 3 1 #" "
0 0 14 3 2 #"bt"
0 0 28 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 28 3 2 #" ("
0 0 14 3 8 #"node-ssn"
0 0 28 3 1 #" "
0 0 14 3 2 #"bt"
0 0 28 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 28 3 2 #" ("
0 0 14 3 9 #"node-left"
0 0 28 3 1 #" "
0 0 14 3 2 #"bt"
0 0 28 3 2 #") "
0 0 14 3 5 #"empty"
0 0 28 3 3 #")))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 16 3 6 #"define"
0 0 28 3 2 #" ("
0 0 14 3 7 #"inorder"
0 0 28 3 1 #" "
0 0 14 3 2 #"bt"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 14 3 4 #"cons"
0 0 28 3 2 #" ("
0 0 14 3 9 #"node-left"
0 0 28 3 1 #" "
0 0 14 3 2 #"bt"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 16 3 6 #"define"
0 0 28 3 1 #" "
0 0 14 3 10 #"test-tree2"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 14 3 9 #"make-node"
0 0 28 3 1 #" "
0 0 24 3 2 #"10"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 14 3 1 #"C"
0 0 28 29 1 #"\n"
0 0 28 3 14 #"             ("
0 0 14 3 9 #"make-node"
0 0 28 3 1 #" "
0 0 24 3 1 #"5"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 14 3 1 #"B"
0 0 28 29 1 #"\n"
0 0 28 3 25 #"                        ("
0 0 14 3 9 #"make-node"
0 0 28 3 1 #" "
0 0 24 3 1 #"4"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 14 3 2 #"B1"
0 0 28 3 1 #" "
0 0 14 3 4 #"NONE"
0 0 28 3 1 #" "
0 0 14 3 4 #"NONE"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 25 #"                        ("
0 0 14 3 9 #"make-node"
0 0 28 3 1 #" "
0 0 24 3 1 #"6"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 14 3 2 #"B2"
0 0 28 3 1 #" "
0 0 14 3 4 #"NONE"
0 0 28 29 1 #"\n"
0 0 28 3 36 #"                                   ("
0 0 14 3 9 #"make-node"
0 0 28 3 1 #" "
0 0 24 3 1 #"7"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 14 3 1 #"A"
0 0 28 3 1 #" "
0 0 14 3 4 #"NONE"
0 0 28 3 1 #" "
0 0 14 3 4 #"NONE"
0 0 28 3 3 #")))"
0 0 28 29 1 #"\n"
0 0 28 3 14 #"             ("
0 0 14 3 9 #"make-node"
0 0 28 3 1 #" "
0 0 24 3 2 #"12"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 14 3 1 #"D"
0 0 28 3 1 #" "
0 0 14 3 4 #"NONE"
0 0 28 3 1 #" "
0 0 14 3 4 #"NONE"
0 0 28 3 3 #")))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 28 3 2 #" ("
0 0 14 3 7 #"inorder"
0 0 28 3 1 #" "
0 0 14 3 10 #"test-tree2"
0 0 28 3 3 #") ("
0 0 14 3 4 #"list"
0 0 28 3 1 #" "
0 0 24 3 1 #"4"
0 0 28 3 1 #" "
0 0 24 3 1 #"5"
0 0 28 3 1 #" "
0 0 24 3 1 #"6"
0 0 28 3 1 #" "
0 0 24 3 1 #"7"
0 0 28 3 1 #" "
0 0 24 3 2 #"10"
0 0 28 3 1 #" "
0 0 24 3 2 #"12"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0           0
