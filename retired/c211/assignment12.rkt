#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 6.2.1 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 32 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsi"
 #"s-snip-wxme.rkt\" \"drracket\" \"private\"))\0"
) 2 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 73 0 1 #"\0"
0 75 1 #"\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 12 #"Inconsolata\0"
0 14 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 213 213 213 49 51 55 -1 -1
2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 142 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 92 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 254 252 120 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 213 213 213 0 0 0 -1 -1 2
37 #"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 213 213 213 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 132 230 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 132 230 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 212 251 120 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 212 251 120 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 101 187 226 0 0 0 -1 -1 2
37 #"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 101 187 226 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 254 252 120 0 0 0 -1 -1 2
39 #"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 254 252 120 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 92 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 145 146 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 92 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 145 146 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 16
#"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 147 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 192 192 192 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 192 192 192 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 0 0 0 94 94 94 255 212 120 -1 -1
2 27 #"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 0 0 0 94 94 94 255 212 120 -1 -1
4 1 #"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 0 1 #"\0"
0 75 12 #"Inconsolata\0"
0.0 14 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 213 213 213
49 51 55 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 142 0 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 93 -1 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 147 0 0
0 0 -1 -1 18 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 28 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 49 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 51 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 65 105 225 0
0 0 -1 -1           0 1209 0 4 3 85
(
 #";; The first three lines of this file were inserted by DrRacket. The"
 #"y record metadata"
) 0 0 4 29 1 #"\n"
0 0 4 3 85
(
 #";; about the language level of this file in a form that our tools ca"
 #"n easily process."
) 0 0 4 29 1 #"\n"
0 0 4 3 193
(
 #"#reader(lib \"htdp-intermediate-lambda-reader.ss\" \"lang\")((modnam"
 #"e assignment12) (read-case-sensitive #t) (teachpacks ()) (htdp-setti"
 #"ngs #(#t constructor repeating-decimal #f #t none #f () #f)))"
) 0 0 4 29 1 #"\n"
0 0 18 3 12 #"; Exercise 1"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 18 3 19 #"; Number [Listof X]"
0 0 28 29 1 #"\n"
0 0 18 3 63
#"; Takes a number n, then drops the first n elements of the list"
0 0 28 29 1 #"\n"
0 0 18 3 36 #"; and returns the rest of that list."
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 16 3 6 #"define"
0 0 28 3 2 #" ("
0 0 14 3 4 #"drop"
0 0 28 3 1 #" "
0 0 14 3 1 #"n"
0 0 28 3 1 #" "
0 0 14 3 4 #"list"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 16 3 4 #"cond"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"    [("
0 0 14 3 2 #"or"
0 0 28 3 2 #" ("
0 0 14 3 6 #"empty?"
0 0 28 3 1 #" "
0 0 14 3 4 #"list"
0 0 28 3 3 #") ("
0 0 14 3 5 #"zero?"
0 0 28 3 1 #" "
0 0 14 3 1 #"n"
0 0 28 3 3 #")) "
0 0 14 3 4 #"list"
0 0 28 3 1 #"]"
0 0 28 29 1 #"\n"
0 0 28 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 28 3 2 #" ("
0 0 14 3 4 #"drop"
0 0 28 3 2 #" ("
0 0 14 3 4 #"sub1"
0 0 28 3 1 #" "
0 0 14 3 1 #"n"
0 0 28 3 3 #") ("
0 0 14 3 4 #"rest"
0 0 28 3 1 #" "
0 0 14 3 4 #"list"
0 0 28 3 5 #"))]))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 18 3 34 #"; String [Listof String] -> Number"
0 0 28 29 1 #"\n"
0 0 18 3 69
(
 #"; Takes the first letter of a string, then counts how many occurence"
 #"s"
) 0 0 28 29 1 #"\n"
0 0 18 3 67
#"; of that string appear consecutively of the given [Listof String],"
0 0 28 29 1 #"\n"
0 0 18 3 25 #"; and returns the number."
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 16 3 6 #"define"
0 0 28 3 2 #" ("
0 0 14 3 19 #"same-letter-counter"
0 0 28 3 1 #" "
0 0 14 3 1 #"l"
0 0 28 3 1 #" "
0 0 14 3 1 #"s"
0 0 28 3 2 #") "
0 0 18 3 23 #"; s needs to be a list."
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 16 3 4 #"cond"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"    [("
0 0 14 3 2 #"or"
0 0 28 3 2 #" ("
0 0 14 3 6 #"empty?"
0 0 28 3 1 #" "
0 0 14 3 1 #"s"
0 0 28 3 3 #") ("
0 0 14 3 3 #"not"
0 0 28 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 28 3 2 #" ("
0 0 14 3 5 #"first"
0 0 28 3 1 #" "
0 0 14 3 1 #"s"
0 0 28 3 2 #") "
0 0 14 3 1 #"l"
0 0 28 3 4 #"))) "
0 0 24 3 1 #"0"
0 0 28 3 1 #"]"
0 0 28 29 1 #"\n"
0 0 28 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 28 3 2 #" ("
0 0 14 3 1 #"+"
0 0 28 3 1 #" "
0 0 24 3 1 #"1"
0 0 28 3 2 #" ("
0 0 14 3 19 #"same-letter-counter"
0 0 28 3 1 #" "
0 0 14 3 1 #"l"
0 0 28 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 28 3 1 #" "
0 0 14 3 1 #"s"
0 0 28 3 6 #")))]))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 28 3 2 #" ("
0 0 14 3 19 #"same-letter-counter"
0 0 28 3 1 #" "
0 0 20 3 3 #"\"a\""
0 0 28 3 2 #" ("
0 0 14 3 4 #"list"
0 0 28 3 1 #" "
0 0 20 3 3 #"\"a\""
0 0 28 3 1 #" "
0 0 20 3 3 #"\"a\""
0 0 28 3 1 #" "
0 0 20 3 3 #"\"a\""
0 0 28 3 1 #" "
0 0 20 3 3 #"\"a\""
0 0 28 3 3 #")) "
0 0 24 3 1 #"4"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 28 3 2 #" ("
0 0 14 3 19 #"same-letter-counter"
0 0 28 3 1 #" "
0 0 20 3 3 #"\"b\""
0 0 28 3 2 #" ("
0 0 14 3 4 #"list"
0 0 28 3 1 #" "
0 0 20 3 3 #"\"b\""
0 0 28 3 3 #")) "
0 0 24 3 1 #"1"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 18 3 36 #"; [Listof String] -> [Listof String]"
0 0 28 29 1 #"\n"
0 0 18 3 66
#"; This function inputs a list of strings which is the original DNA"
0 0 28 29 1 #"\n"
0 0 18 3 67
#"; strand split up into a list using (explode). It outputs a list of"
0 0 28 29 1 #"\n"
0 0 18 3 71
(
 #"; strings which are encoded strings in the form [Letter Count], such"
 #" as"
) 0 0 28 29 1 #"\n"
0 0 18 3 70
(
 #"; (list \"A9\" \"G2\" \"C3\"). This list will then be strung togethe"
 #"r by the"
) 0 0 28 29 1 #"\n"
0 0 18 3 26 #"; main rle-encode function"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 7         253 4           0 0           0 41 0 28 3 1 #"("
0 0 16 3 6 #"define"
0 0 28 3 2 #" ("
0 0 14 3 17 #"rle-encode-helper"
0 0 28 3 1 #" "
0 0 14 3 1 #"s"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 16 3 4 #"cond"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"    [("
0 0 14 3 6 #"empty?"
0 0 28 3 1 #" "
0 0 14 3 1 #"s"
0 0 28 3 2 #") "
0 0 24 3 1 #"'"
0 0 28 3 3 #"()]"
0 0 28 29 1 #"\n"
0 0 28 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 28 3 2 #" ("
0 0 14 3 3 #"..."
0 0 28 29 1 #"\n"
0 0 28 3 12 #"           ("
0 0 14 3 3 #"..."
0 0 28 3 2 #" ("
0 0 14 3 5 #"first"
0 0 28 3 1 #" "
0 0 14 3 1 #"s"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 3 12 #"           ("
0 0 14 3 3 #"..."
0 0 28 3 2 #" ("
0 0 14 3 10 #"rle-encode"
0 0 28 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 28 3 1 #" "
0 0 14 3 1 #"s"
0 0 28 3 7 #"))))]))"
0           0 0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 16 3 6 #"define"
0 0 28 3 2 #" ("
0 0 14 3 17 #"rle-encode-helper"
0 0 28 3 1 #" "
0 0 14 3 1 #"s"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 28 3 2 #" ("
0 0 14 3 6 #"empty?"
0 0 28 3 1 #" "
0 0 14 3 1 #"s"
0 0 28 3 2 #") "
0 0 24 3 1 #"'"
0 0 28 3 2 #"()"
0 0 28 29 1 #"\n"
0 0 28 3 7 #"      ("
0 0 16 3 5 #"local"
0 0 28 3 3 #" [("
0 0 16 3 6 #"define"
0 0 28 3 1 #" "
0 0 14 3 5 #"s-l-c"
0 0 28 3 2 #" ("
0 0 14 3 19 #"same-letter-counter"
0 0 28 3 2 #" ("
0 0 14 3 5 #"first"
0 0 28 3 1 #" "
0 0 14 3 1 #"s"
0 0 28 3 2 #") "
0 0 14 3 1 #"s"
0 0 28 3 3 #"))]"
0 0 28 29 1 #"\n"
0 0 28 3 9 #"        ("
0 0 14 3 4 #"cons"
0 0 28 29 1 #"\n"
0 0 28 3 10 #"         ("
0 0 14 3 13 #"string-append"
0 0 28 3 2 #" ("
0 0 14 3 5 #"first"
0 0 28 3 1 #" "
0 0 14 3 1 #"s"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 25 #"                        ("
0 0 14 3 14 #"number->string"
0 0 28 3 1 #" "
0 0 14 3 5 #"s-l-c"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 3 10 #"         ("
0 0 14 3 17 #"rle-encode-helper"
0 0 28 3 2 #" ("
0 0 14 3 4 #"drop"
0 0 28 3 1 #" "
0 0 14 3 5 #"s-l-c"
0 0 28 3 1 #" "
0 0 14 3 1 #"s"
0 0 28 3 6 #"))))))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 28 3 2 #" ("
0 0 14 3 17 #"rle-encode-helper"
0 0 28 3 2 #" ("
0 0 14 3 7 #"explode"
0 0 28 3 1 #" "
0 0 20 3 8 #"\"AAAGGC\""
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 3 15 #"              ("
0 0 14 3 4 #"list"
0 0 28 3 1 #" "
0 0 20 3 4 #"\"A3\""
0 0 28 3 1 #" "
0 0 20 3 4 #"\"G2\""
0 0 28 3 1 #" "
0 0 20 3 4 #"\"C1\""
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 18 3 18 #"; String -> String"
0 0 28 29 1 #"\n"
0 0 18 3 61
#"; Takes a string which is a strand of DNA then converts it to"
0 0 28 29 1 #"\n"
0 0 18 3 55 #"; an encoded version of the strand which compresses it."
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 7         109 4           0 0           0 17 0 28 3 1 #"("
0 0 16 3 6 #"define"
0 0 28 3 2 #" ("
0 0 14 3 10 #"rle-encode"
0 0 28 3 1 #" "
0 0 14 3 1 #"s"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 14 3 3 #"..."
0 0 28 3 2 #" ("
0 0 14 3 17 #"rle-encode-helper"
0 0 28 3 2 #" ("
0 0 14 3 3 #"..."
0 0 28 3 1 #" "
0 0 14 3 1 #"s"
0 0 28 3 4 #"))))"
0           0 0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 16 3 6 #"define"
0 0 28 3 2 #" ("
0 0 14 3 10 #"rle-encode"
0 0 28 3 1 #" "
0 0 14 3 1 #"s"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 14 3 5 #"foldr"
0 0 28 3 1 #" "
0 0 14 3 13 #"string-append"
0 0 28 3 1 #" "
0 0 20 3 2 #"\"\""
0 0 28 3 2 #" ("
0 0 14 3 17 #"rle-encode-helper"
0 0 28 3 2 #" ("
0 0 14 3 7 #"explode"
0 0 28 3 1 #" "
0 0 14 3 1 #"s"
0 0 28 3 4 #"))))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 28 3 2 #" ("
0 0 14 3 10 #"rle-encode"
0 0 28 3 1 #" "
0 0 20 3 11 #"\"AAAGGCAGG\""
0 0 28 3 2 #") "
0 0 20 3 12 #"\"A3G2C1A1G2\""
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 28 3 2 #" ("
0 0 14 3 10 #"rle-encode"
0 0 28 3 1 #" "
0 0 20 3 2 #"\"\""
0 0 28 3 2 #") "
0 0 20 3 2 #"\"\""
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 18 3 12 #"; Exercise 2"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 18 3 33 #"; Number [Listof X] -> [Listof X]"
0 0 28 29 1 #"\n"
0 0 18 3 66
#"; Takes a number n and extracts the first n elements of a list and"
0 0 28 29 1 #"\n"
0 0 18 3 51 #"; returns a list containing the extracted elements."
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 16 3 6 #"define"
0 0 28 3 2 #" ("
0 0 14 3 4 #"take"
0 0 28 3 1 #" "
0 0 14 3 1 #"n"
0 0 28 3 1 #" "
0 0 14 3 4 #"list"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 16 3 4 #"cond"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"    [("
0 0 14 3 2 #"or"
0 0 28 3 2 #" ("
0 0 14 3 5 #"zero?"
0 0 28 3 1 #" "
0 0 14 3 1 #"n"
0 0 28 3 3 #") ("
0 0 14 3 6 #"empty?"
0 0 28 3 1 #" "
0 0 14 3 4 #"list"
0 0 28 3 3 #")) "
0 0 24 3 1 #"'"
0 0 28 3 3 #"()]"
0 0 28 29 1 #"\n"
0 0 28 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 28 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 28 3 2 #" ("
0 0 14 3 5 #"first"
0 0 28 3 1 #" "
0 0 14 3 4 #"list"
0 0 28 3 3 #") ("
0 0 14 3 4 #"take"
0 0 28 3 2 #" ("
0 0 14 3 4 #"sub1"
0 0 28 3 1 #" "
0 0 14 3 1 #"n"
0 0 28 3 3 #") ("
0 0 14 3 4 #"rest"
0 0 28 3 1 #" "
0 0 14 3 4 #"list"
0 0 28 3 6 #")))]))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 28 3 2 #" ("
0 0 14 3 4 #"take"
0 0 28 3 1 #" "
0 0 24 3 1 #"2"
0 0 28 3 2 #" ("
0 0 14 3 4 #"list"
0 0 28 3 1 #" "
0 0 20 3 5 #"\"One\""
0 0 28 3 1 #" "
0 0 20 3 5 #"\"Two\""
0 0 28 3 1 #" "
0 0 20 3 7 #"\"Three\""
0 0 28 3 4 #")) ("
0 0 14 3 4 #"list"
0 0 28 3 1 #" "
0 0 20 3 5 #"\"One\""
0 0 28 3 1 #" "
0 0 20 3 5 #"\"Two\""
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 18 3 18 #"; String -> Number"
0 0 28 29 1 #"\n"
0 0 18 3 69
(
 #"; Takes a string and counts the number of numbers following the firs"
 #"t"
) 0 0 28 29 1 #"\n"
0 0 18 3 69
(
 #"; letter. This resolves the edge case for decode where we must decod"
 #"e"
) 0 0 28 29 1 #"\n"
0 0 18 3 72
(
 #"; substrings containing 2 or more subsequent numbers following a let"
 #"ter."
) 0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 16 3 6 #"define"
0 0 28 3 2 #" ("
0 0 14 3 12 #"grab-numbers"
0 0 28 3 1 #" "
0 0 14 3 1 #"s"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 16 3 4 #"cond"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"    [("
0 0 14 3 2 #"or"
0 0 28 3 2 #" ("
0 0 14 3 6 #"empty?"
0 0 28 3 1 #" "
0 0 14 3 1 #"s"
0 0 28 3 3 #") ("
0 0 14 3 3 #"not"
0 0 28 3 2 #" ("
0 0 14 3 7 #"number?"
0 0 28 3 2 #" ("
0 0 14 3 14 #"string->number"
0 0 28 3 2 #" ("
0 0 14 3 5 #"first"
0 0 28 3 1 #" "
0 0 14 3 1 #"s"
0 0 28 3 6 #"))))) "
0 0 24 3 1 #"0"
0 0 28 3 1 #"]"
0 0 28 29 1 #"\n"
0 0 28 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 28 3 2 #" ("
0 0 14 3 1 #"+"
0 0 28 3 1 #" "
0 0 24 3 1 #"1"
0 0 28 3 2 #" ("
0 0 14 3 12 #"grab-numbers"
0 0 28 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 28 3 1 #" "
0 0 14 3 1 #"s"
0 0 28 3 6 #")))]))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 18 3 36 #"; [Listof String] -> [Listof String]"
0 0 28 29 1 #"\n"
0 0 18 3 72
(
 #"; Inputs a list formed by (explode encoded-string) and outputs a lis"
 #"t of"
) 0 0 28 29 1 #"\n"
0 0 18 3 71
(
 #"; strings, each string being one consistent letter corresponding to "
 #"the"
) 0 0 28 29 1 #"\n"
0 0 18 3 41 #"; the number of letters in the substring."
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 7         229 4           0 0           0 37 0 28 3 1 #"("
0 0 16 3 6 #"define"
0 0 28 3 2 #" ("
0 0 14 3 17 #"rle-decode-helper"
0 0 28 3 1 #" "
0 0 14 3 1 #"s"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 16 3 4 #"cond"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"    [("
0 0 14 3 6 #"empty?"
0 0 28 3 1 #" "
0 0 14 3 1 #"s"
0 0 28 3 2 #") "
0 0 24 3 1 #"'"
0 0 28 3 3 #"()]"
0 0 28 29 1 #"\n"
0 0 28 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 28 3 2 #" ("
0 0 14 3 3 #"..."
0 0 28 29 1 #"\n"
0 0 28 3 12 #"           ("
0 0 14 3 3 #"..."
0 0 28 3 1 #" "
0 0 14 3 1 #"s"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 12 #"           ("
0 0 14 3 17 #"rle-decode-helper"
0 0 28 3 2 #" ("
0 0 14 3 3 #"..."
0 0 28 3 1 #" "
0 0 14 3 1 #"s"
0 0 28 3 6 #")))]))"
0           0 0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 16 3 6 #"define"
0 0 28 3 2 #" ("
0 0 14 3 17 #"rle-decode-helper"
0 0 28 3 1 #" "
0 0 14 3 1 #"s"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 16 3 4 #"cond"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"    [("
0 0 14 3 6 #"empty?"
0 0 28 3 1 #" "
0 0 14 3 1 #"s"
0 0 28 3 2 #") "
0 0 24 3 1 #"'"
0 0 28 3 3 #"()]"
0 0 28 29 1 #"\n"
0 0 28 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 28 3 2 #" ("
0 0 14 3 6 #"append"
0 0 28 29 1 #"\n"
0 0 28 3 12 #"           ("
0 0 14 3 9 #"make-list"
0 0 28 3 2 #" ("
0 0 14 3 14 #"string->number"
0 0 28 29 1 #"\n"
0 0 28 3 24 #"                       ("
0 0 14 3 5 #"foldr"
0 0 28 3 1 #" "
0 0 14 3 13 #"string-append"
0 0 28 3 1 #" "
0 0 20 3 2 #"\"\""
0 0 28 29 1 #"\n"
0 0 28 3 31 #"                              ("
0 0 14 3 4 #"take"
0 0 28 3 2 #" ("
0 0 14 3 12 #"grab-numbers"
0 0 28 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 28 3 1 #" "
0 0 14 3 1 #"s"
0 0 28 3 4 #")) ("
0 0 14 3 4 #"rest"
0 0 28 3 1 #" "
0 0 14 3 1 #"s"
0 0 28 3 5 #")))) "
0 0 28 29 1 #"\n"
0 0 28 3 23 #"                      ("
0 0 14 3 5 #"first"
0 0 28 3 1 #" "
0 0 14 3 1 #"s"
0 0 28 3 3 #")) "
0 0 28 29 1 #"\n"
0 0 28 3 12 #"           ("
0 0 14 3 17 #"rle-decode-helper"
0 0 28 29 1 #"\n"
0 0 28 3 13 #"            ("
0 0 14 3 4 #"drop"
0 0 28 3 2 #" ("
0 0 14 3 1 #"+"
0 0 28 3 1 #" "
0 0 24 3 1 #"1"
0 0 28 3 2 #" ("
0 0 14 3 12 #"grab-numbers"
0 0 28 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 28 3 1 #" "
0 0 14 3 1 #"s"
0 0 28 3 4 #"))) "
0 0 14 3 1 #"s"
0 0 28 3 6 #")))]))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 28 3 2 #" ("
0 0 14 3 17 #"rle-decode-helper"
0 0 28 29 1 #"\n"
0 0 28 3 16 #"               ("
0 0 14 3 4 #"list"
0 0 28 3 1 #" "
0 0 20 3 3 #"\"A\""
0 0 28 3 1 #" "
0 0 20 3 3 #"\"2\""
0 0 28 3 1 #" "
0 0 20 3 3 #"\"C\""
0 0 28 3 1 #" "
0 0 20 3 3 #"\"2\""
0 0 28 3 1 #" "
0 0 20 3 3 #"\"A\""
0 0 28 3 1 #" "
0 0 20 3 3 #"\"1\""
0 0 28 3 1 #" "
0 0 20 3 3 #"\"G\""
0 0 28 3 1 #" "
0 0 20 3 3 #"\"1\""
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 3 15 #"              ("
0 0 14 3 4 #"list"
0 0 28 3 1 #" "
0 0 20 3 3 #"\"A\""
0 0 28 3 1 #" "
0 0 20 3 3 #"\"A\""
0 0 28 3 1 #" "
0 0 20 3 3 #"\"C\""
0 0 28 3 1 #" "
0 0 20 3 3 #"\"C\""
0 0 28 3 1 #" "
0 0 20 3 3 #"\"A\""
0 0 28 3 1 #" "
0 0 20 3 3 #"\"G\""
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 18 3 18 #"; String -> String"
0 0 28 29 1 #"\n"
0 0 18 3 68
#"; Takes an encoded DNA strand and decodes it back into the original."
0 0 28 29 1 #"\n"
0 7         109 4           0 0           0 17 0 28 3 1 #"("
0 0 16 3 6 #"define"
0 0 28 3 2 #" ("
0 0 14 3 10 #"rle-decode"
0 0 28 3 1 #" "
0 0 14 3 1 #"s"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 14 3 3 #"..."
0 0 28 3 2 #" ("
0 0 14 3 17 #"rle-decode-helper"
0 0 28 3 2 #" ("
0 0 14 3 3 #"..."
0 0 28 3 1 #" "
0 0 14 3 1 #"s"
0 0 28 3 4 #"))))"
0           0 0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 16 3 6 #"define"
0 0 28 3 2 #" ("
0 0 14 3 10 #"rle-decode"
0 0 28 3 1 #" "
0 0 14 3 1 #"s"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 14 3 5 #"foldr"
0 0 28 3 1 #" "
0 0 14 3 13 #"string-append"
0 0 28 3 1 #" "
0 0 20 3 2 #"\"\""
0 0 28 3 2 #" ("
0 0 14 3 17 #"rle-decode-helper"
0 0 28 3 2 #" ("
0 0 14 3 7 #"explode"
0 0 28 3 1 #" "
0 0 14 3 1 #"s"
0 0 28 3 4 #"))))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 28 3 2 #" ("
0 0 14 3 10 #"rle-decode"
0 0 28 3 1 #" "
0 0 20 3 8 #"\"A2G3C5\""
0 0 28 3 2 #") "
0 0 20 3 12 #"\"AAGGGCCCCC\""
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 28 3 2 #" ("
0 0 14 3 10 #"rle-decode"
0 0 28 3 1 #" "
0 0 20 3 5 #"\"A10\""
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 15 #"              ("
0 0 14 3 11 #"make-string"
0 0 28 3 1 #" "
0 0 24 3 2 #"10"
0 0 28 3 1 #" "
0 0 24 3 3 #"#\\A"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 18 3 12 #"; Exercise 3"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 18 3 70
(
 #"; For DNA strands which contain more single-length nucleotides than "
 #"it"
) 0 0 28 29 1 #"\n"
0 0 18 3 69
(
 #"; it does multi-length substrings of nucleotides, the encoding cause"
 #"s"
) 0 0 28 29 1 #"\n"
0 0 18 3 71
(
 #"; the data to be inefficient. The most efficient data compression wo"
 #"uld"
) 0 0 28 29 1 #"\n"
0 0 18 3 70
(
 #"; exist where there were no single-length substrings of nucleotides "
 #"of"
) 0 0 28 29 1 #"\n"
0 0 18 3 69
(
 #"; the same type, and the least efficient would be one which containe"
 #"d"
) 0 0 28 29 1 #"\n"
0 0 18 3 64
#"; only single-length substrings of nucleotides of the same type."
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 18 3 48 #"; Here is an example of inefficient compression:"
0 0 28 29 1 #"\n"
0 0 18 3 22 #"; \"ACGA\" -> \"A1C1G1A1\""
0 0 28 29 1 #"\n"
0 0 18 3 46 #"; Here is an example of efficient compression:"
0 0 28 29 1 #"\n"
0 0 18 3 32 #"; \"AAGCCAAAAAAAAA\" -> \"A2G1C2A9\""
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 18 3 12 #"; Exercise 4"
0 0 28 29 1 #"\n"
0 0 18 3 68
#"; The following insert & sort> functions are borrowed from the book:"
0 0 28 29 1 #"\n"
0 0 18 3 36 #"; List-of-numbers -> List-of-numbers"
0 0 28 29 1 #"\n"
0 0 18 3 35 #"; produces a sorted version of alon"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 16 3 6 #"define"
0 0 28 3 2 #" ("
0 0 14 3 5 #"sort>"
0 0 28 3 1 #" "
0 0 14 3 4 #"alon"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 16 3 4 #"cond"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"    [("
0 0 14 3 6 #"empty?"
0 0 28 3 1 #" "
0 0 14 3 4 #"alon"
0 0 28 3 2 #") "
0 0 24 3 1 #"'"
0 0 28 3 3 #"()]"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"    [("
0 0 14 3 5 #"cons?"
0 0 28 3 1 #" "
0 0 14 3 4 #"alon"
0 0 28 3 3 #") ("
0 0 14 3 6 #"insert"
0 0 28 3 2 #" ("
0 0 14 3 5 #"first"
0 0 28 3 1 #" "
0 0 14 3 4 #"alon"
0 0 28 3 3 #") ("
0 0 14 3 5 #"sort>"
0 0 28 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 28 3 1 #" "
0 0 14 3 4 #"alon"
0 0 28 3 6 #")))]))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 18 3 43 #"; Number List-of-numbers -> List-of-numbers"
0 0 28 29 1 #"\n"
0 0 18 3 48 #"; inserts n into the sorted list of numbers alon"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 16 3 6 #"define"
0 0 28 3 2 #" ("
0 0 14 3 6 #"insert"
0 0 28 3 1 #" "
0 0 14 3 1 #"n"
0 0 28 3 1 #" "
0 0 14 3 4 #"alon"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 16 3 4 #"cond"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"    [("
0 0 14 3 6 #"empty?"
0 0 28 3 1 #" "
0 0 14 3 4 #"alon"
0 0 28 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 28 3 1 #" "
0 0 14 3 1 #"n"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 28 3 4 #"())]"
0 0 28 29 1 #"\n"
0 0 28 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 28 3 2 #" ("
0 0 14 3 2 #"if"
0 0 28 3 2 #" ("
0 0 14 3 2 #">="
0 0 28 3 1 #" "
0 0 14 3 1 #"n"
0 0 28 3 2 #" ("
0 0 14 3 5 #"first"
0 0 28 3 1 #" "
0 0 14 3 4 #"alon"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 3 15 #"              ("
0 0 14 3 4 #"cons"
0 0 28 3 1 #" "
0 0 14 3 1 #"n"
0 0 28 3 1 #" "
0 0 14 3 4 #"alon"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 15 #"              ("
0 0 14 3 4 #"cons"
0 0 28 3 2 #" ("
0 0 14 3 5 #"first"
0 0 28 3 1 #" "
0 0 14 3 4 #"alon"
0 0 28 3 3 #") ("
0 0 14 3 6 #"insert"
0 0 28 3 1 #" "
0 0 14 3 1 #"n"
0 0 28 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 28 3 1 #" "
0 0 14 3 4 #"alon"
0 0 28 3 7 #"))))]))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 18 3 66
#"; ------------- End of Book Functions ----------------------------"
0 0 28 29 1 #"\n"
0 0 18 3 57 #"; We now make a struct to store a list and how many times"
0 0 28 29 1 #"\n"
0 0 18 3 18 #"; sort was called."
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 16 3 13 #"define-struct"
0 0 28 3 1 #" "
0 0 14 3 4 #"pair"
0 0 28 3 2 #" ("
0 0 14 3 4 #"list"
0 0 28 3 1 #" "
0 0 14 3 1 #"n"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 18 3 64
#"; Number [Listof Numbers] -> (make-pair [Listof Numbers] Number)"
0 0 28 29 1 #"\n"
0 0 18 3 69
(
 #"; stores the sorted list of numbers alon with n inserted into it, an"
 #"d"
) 0 0 28 29 1 #"\n"
0 0 18 3 69
(
 #"; stores how many times the >= function is performed in a pair struc"
 #"t"
) 0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 7         235 4           0 0           0 38 0 28 3 1 #"("
0 0 16 3 6 #"define"
0 0 28 3 2 #" ("
0 0 14 3 8 #"insertct"
0 0 28 3 1 #" "
0 0 14 3 1 #"n"
0 0 28 3 1 #" "
0 0 14 3 4 #"alon"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 16 3 4 #"cond"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"    [("
0 0 14 3 6 #"empty?"
0 0 28 3 1 #" "
0 0 14 3 4 #"alon"
0 0 28 3 2 #") "
0 0 14 3 3 #"..."
0 0 28 3 1 #"]"
0 0 28 29 1 #"\n"
0 0 28 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 28 3 2 #" ("
0 0 14 3 3 #"..."
0 0 28 3 2 #" ("
0 0 14 3 8 #"insertct"
0 0 28 3 1 #" "
0 0 14 3 1 #"n"
0 0 28 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 28 3 1 #" "
0 0 14 3 4 #"alon"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 3 16 #"               ("
0 0 14 3 3 #"..."
0 0 28 3 5 #"))]))"
0           0 0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 16 3 6 #"define"
0 0 28 3 2 #" ("
0 0 14 3 8 #"insertct"
0 0 28 3 1 #" "
0 0 14 3 1 #"n"
0 0 28 3 1 #" "
0 0 14 3 4 #"alon"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 16 3 4 #"cond"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"    [("
0 0 14 3 6 #"empty?"
0 0 28 3 1 #" "
0 0 14 3 4 #"alon"
0 0 28 3 3 #") ("
0 0 14 3 9 #"make-pair"
0 0 28 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 28 3 1 #" "
0 0 14 3 1 #"n"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 28 3 4 #"()) "
0 0 24 3 1 #"0"
0 0 28 3 2 #")]"
0 0 28 29 1 #"\n"
0 0 28 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 28 3 2 #" ("
0 0 14 3 2 #"if"
0 0 28 3 2 #" ("
0 0 14 3 2 #">="
0 0 28 3 1 #" "
0 0 14 3 1 #"n"
0 0 28 3 2 #" ("
0 0 14 3 5 #"first"
0 0 28 3 1 #" "
0 0 14 3 4 #"alon"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 3 15 #"              ("
0 0 14 3 9 #"make-pair"
0 0 28 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 28 3 1 #" "
0 0 14 3 1 #"n"
0 0 28 3 1 #" "
0 0 14 3 4 #"alon"
0 0 28 3 2 #") "
0 0 24 3 1 #"1"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 15 #"              ("
0 0 16 3 5 #"local"
0 0 28 3 3 #" [("
0 0 16 3 6 #"define"
0 0 28 3 1 #" "
0 0 14 3 15 #"insertct-recurs"
0 0 28 3 2 #" ("
0 0 14 3 8 #"insertct"
0 0 28 3 1 #" "
0 0 14 3 1 #"n"
0 0 28 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 28 3 1 #" "
0 0 14 3 4 #"alon"
0 0 28 3 4 #")))]"
0 0 28 29 1 #"\n"
0 0 28 3 17 #"                ("
0 0 14 3 9 #"make-pair"
0 0 28 29 1 #"\n"
0 0 28 3 18 #"                 ("
0 0 14 3 4 #"cons"
0 0 28 3 2 #" ("
0 0 14 3 5 #"first"
0 0 28 3 1 #" "
0 0 14 3 4 #"alon"
0 0 28 3 3 #") ("
0 0 14 3 9 #"pair-list"
0 0 28 3 1 #" "
0 0 14 3 15 #"insertct-recurs"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 3 18 #"                 ("
0 0 14 3 1 #"+"
0 0 28 3 1 #" "
0 0 24 3 1 #"1"
0 0 28 3 2 #" ("
0 0 14 3 6 #"pair-n"
0 0 28 3 1 #" "
0 0 14 3 15 #"insertct-recurs"
0 0 28 3 8 #")))))]))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 28 3 2 #" ("
0 0 14 3 8 #"insertct"
0 0 28 3 1 #" "
0 0 24 3 2 #"10"
0 0 28 3 2 #" ("
0 0 14 3 4 #"list"
0 0 28 3 1 #" "
0 0 24 3 1 #"3"
0 0 28 3 1 #" "
0 0 24 3 1 #"2"
0 0 28 3 1 #" "
0 0 24 3 1 #"1"
0 0 28 3 4 #")) ("
0 0 14 3 9 #"make-pair"
0 0 28 3 2 #" ("
0 0 14 3 4 #"list"
0 0 28 3 1 #" "
0 0 24 3 2 #"10"
0 0 28 3 1 #" "
0 0 24 3 1 #"3"
0 0 28 3 1 #" "
0 0 24 3 1 #"2"
0 0 28 3 1 #" "
0 0 24 3 1 #"1"
0 0 28 3 2 #") "
0 0 24 3 1 #"1"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 18 3 57 #"; [Listof Numbers] -> (make-pair [Listof Numbers] Number)"
0 0 28 29 1 #"\n"
0 0 18 3 71
(
 #"; produces a sorted version of alon and how many times the >= is cal"
 #"led"
) 0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 7         277 4           0 0           0 45 0 28 3 1 #"("
0 0 16 3 6 #"define"
0 0 28 3 2 #" ("
0 0 14 3 7 #"sortct>"
0 0 28 3 1 #" "
0 0 14 3 4 #"alon"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 16 3 4 #"cond"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"    [("
0 0 14 3 6 #"empty?"
0 0 28 3 1 #" "
0 0 14 3 4 #"alon"
0 0 28 3 2 #") "
0 0 14 3 3 #"..."
0 0 28 3 1 #"]"
0 0 28 29 1 #"\n"
0 0 28 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 28 3 2 #" ("
0 0 14 3 3 #"..."
0 0 28 29 1 #"\n"
0 0 28 3 12 #"           ("
0 0 14 3 3 #"..."
0 0 28 3 2 #" ("
0 0 14 3 8 #"insertct"
0 0 28 3 2 #" ("
0 0 14 3 5 #"first"
0 0 28 3 2 #" ("
0 0 14 3 3 #"..."
0 0 28 3 1 #" "
0 0 14 3 4 #"alon"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 3 27 #"                          ("
0 0 14 3 3 #"..."
0 0 28 3 2 #" ("
0 0 14 3 7 #"sortct>"
0 0 28 3 2 #" ("
0 0 14 3 3 #"..."
0 0 28 3 1 #" "
0 0 14 3 4 #"alon"
0 0 28 3 9 #"))))))]))"
0           0 0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 16 3 6 #"define"
0 0 28 3 2 #" ("
0 0 14 3 7 #"sortct>"
0 0 28 3 1 #" "
0 0 14 3 4 #"alon"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 16 3 4 #"cond"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"    [("
0 0 14 3 6 #"empty?"
0 0 28 3 1 #" "
0 0 14 3 4 #"alon"
0 0 28 3 3 #") ("
0 0 14 3 9 #"make-pair"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 28 3 3 #"() "
0 0 24 3 1 #"0"
0 0 28 3 2 #")]"
0 0 28 29 1 #"\n"
0 0 28 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"     ("
0 0 16 3 5 #"local"
0 0 28 3 3 #" [("
0 0 16 3 6 #"define"
0 0 28 3 1 #" "
0 0 14 3 11 #"sort-recurs"
0 0 28 3 2 #" ("
0 0 14 3 7 #"sortct>"
0 0 28 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 28 3 1 #" "
0 0 14 3 4 #"alon"
0 0 28 3 3 #")))"
0 0 28 29 1 #"\n"
0 0 28 3 14 #"             ("
0 0 16 3 6 #"define"
0 0 28 3 1 #" "
0 0 14 3 10 #"ins-recurs"
0 0 28 29 1 #"\n"
0 0 28 3 16 #"               ("
0 0 14 3 8 #"insertct"
0 0 28 3 2 #" ("
0 0 14 3 5 #"first"
0 0 28 3 1 #" "
0 0 14 3 4 #"alon"
0 0 28 3 3 #") ("
0 0 14 3 9 #"pair-list"
0 0 28 3 1 #" "
0 0 14 3 11 #"sort-recurs"
0 0 28 3 4 #")))]"
0 0 28 29 1 #"\n"
0 0 28 3 8 #"       ("
0 0 14 3 9 #"make-pair"
0 0 28 3 2 #" ("
0 0 14 3 9 #"pair-list"
0 0 28 3 1 #" "
0 0 14 3 10 #"ins-recurs"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 19 #"                  ("
0 0 14 3 1 #"+"
0 0 28 3 2 #" ("
0 0 14 3 6 #"pair-n"
0 0 28 3 1 #" "
0 0 14 3 10 #"ins-recurs"
0 0 28 3 3 #") ("
0 0 14 3 6 #"pair-n"
0 0 28 3 1 #" "
0 0 14 3 11 #"sort-recurs"
0 0 28 3 7 #"))))]))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 28 3 2 #" ("
0 0 14 3 7 #"sortct>"
0 0 28 3 2 #" ("
0 0 14 3 4 #"list"
0 0 28 3 1 #" "
0 0 24 3 1 #"4"
0 0 28 3 1 #" "
0 0 24 3 1 #"3"
0 0 28 3 1 #" "
0 0 24 3 1 #"2"
0 0 28 3 1 #" "
0 0 24 3 1 #"1"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 3 15 #"              ("
0 0 14 3 9 #"make-pair"
0 0 28 3 2 #" ("
0 0 14 3 4 #"list"
0 0 28 3 1 #" "
0 0 24 3 1 #"4"
0 0 28 3 1 #" "
0 0 24 3 1 #"3"
0 0 28 3 1 #" "
0 0 24 3 1 #"2"
0 0 28 3 1 #" "
0 0 24 3 1 #"1"
0 0 28 3 2 #") "
0 0 24 3 1 #"3"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 28 3 2 #" ("
0 0 14 3 7 #"sortct>"
0 0 28 3 2 #" ("
0 0 14 3 4 #"list"
0 0 28 3 1 #" "
0 0 24 3 1 #"1"
0 0 28 3 1 #" "
0 0 24 3 1 #"2"
0 0 28 3 1 #" "
0 0 24 3 1 #"3"
0 0 28 3 1 #" "
0 0 24 3 1 #"4"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 3 15 #"              ("
0 0 14 3 9 #"make-pair"
0 0 28 3 2 #" ("
0 0 14 3 4 #"list"
0 0 28 3 1 #" "
0 0 24 3 1 #"4"
0 0 28 3 1 #" "
0 0 24 3 1 #"3"
0 0 28 3 1 #" "
0 0 24 3 1 #"2"
0 0 28 3 1 #" "
0 0 24 3 1 #"1"
0 0 28 3 2 #") "
0 0 24 3 1 #"6"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 18 3 48 #"; The following two functions are from the book:"
0 0 28 29 1 #"\n"
0 0 18 3 15 #"; Posn -> Posn "
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 16 3 6 #"define"
0 0 28 3 2 #" ("
0 0 14 3 11 #"food-create"
0 0 28 3 1 #" "
0 0 14 3 1 #"p"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 14 3 17 #"food-check-create"
0 0 28 3 1 #" "
0 0 14 3 1 #"p"
0 0 28 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 28 3 2 #" ("
0 0 14 3 6 #"random"
0 0 28 3 1 #" "
0 0 24 3 3 #"100"
0 0 28 3 3 #") ("
0 0 14 3 6 #"random"
0 0 28 3 1 #" "
0 0 24 3 3 #"100"
0 0 28 3 4 #"))))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 18 3 20 #"; Posn Posn -> Posn "
0 0 28 29 1 #"\n"
0 0 18 3 23 #"; generative recursion "
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 16 3 6 #"define"
0 0 28 3 2 #" ("
0 0 14 3 17 #"food-check-create"
0 0 28 3 1 #" "
0 0 14 3 1 #"p"
0 0 28 3 1 #" "
0 0 14 3 9 #"candidate"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 28 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 28 3 1 #" "
0 0 14 3 1 #"p"
0 0 28 3 1 #" "
0 0 14 3 9 #"candidate"
0 0 28 3 3 #") ("
0 0 14 3 11 #"food-create"
0 0 28 3 1 #" "
0 0 14 3 1 #"p"
0 0 28 3 2 #") "
0 0 14 3 9 #"candidate"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 18 3 14 #"; Exericse 407"
0 0 28 29 1 #"\n"
0 0 18 3 68
#"; The design of food-create using two functions is necessary because"
0 0 28 29 1 #"\n"
0 0 18 3 71
(
 #"; one function creates a new food, and the other checks if there exi"
 #"sts"
) 0 0 28 29 1 #"\n"
0 0 18 3 30 #"; a food in the same position."
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 18 3 14 #"; Posn -> Posn"
0 0 28 29 1 #"\n"
0 0 18 3 69
(
 #"; This function creates a unique food at some posn. The assumption i"
 #"s"
) 0 0 28 29 1 #"\n"
0 0 18 3 60
#"; that the big-bang display is limited to a 100x100 display."
0 0 28 29 1 #"\n"
0 0 18 3 28 #"; ----- Exercise 411 -------"
0 0 28 29 1 #"\n"
0 0 18 3 72
(
 #"; termination: If the range of the random functions are 1, and the i"
 #"nput"
) 0 0 28 29 1 #"\n"
0 0 18 3 68
#"; function is (make-posn 1 1), this function will be stuck in a loop"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 16 3 6 #"define"
0 0 28 3 2 #" ("
0 0 14 3 17 #"short-food-create"
0 0 28 3 1 #" "
0 0 14 3 1 #"p"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 16 3 5 #"local"
0 0 28 3 3 #" [("
0 0 16 3 6 #"define"
0 0 28 3 1 #" "
0 0 14 3 9 #"candidate"
0 0 28 3 3 #"  ("
0 0 14 3 9 #"make-posn"
0 0 28 3 2 #" ("
0 0 14 3 6 #"random"
0 0 28 3 1 #" "
0 0 24 3 3 #"100"
0 0 28 3 3 #") ("
0 0 14 3 6 #"random"
0 0 28 3 1 #" "
0 0 24 3 3 #"100"
0 0 28 3 4 #")))]"
0 0 28 29 1 #"\n"
0 0 28 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 28 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 28 3 1 #" "
0 0 14 3 1 #"p"
0 0 28 3 1 #" "
0 0 14 3 9 #"candidate"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 9 #"        ("
0 0 14 3 17 #"short-food-create"
0 0 28 3 1 #" "
0 0 14 3 1 #"p"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 8 #"        "
0 0 14 3 9 #"candidate"
0 0 28 3 3 #")))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0           0
