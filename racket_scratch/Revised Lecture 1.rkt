#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 6.8 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 33 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsi"
 #"s-snip-wxme.rkt\" \"drracket\" \"private\"))\0"
) 2 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 55
#"((lib \"snip.rkt\" \"pict\") (lib \"snip-wxme.rkt\" \"pict\"))\0"
1 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 164 0 1 #"\0"
0 75 1 #"\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 6 #"Menlo\0"
0 13 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 192 46 214 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 57 89 216 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 102 153 214 0 0 0 -1 -1 2
37 #"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 102 153 214 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 102 148 104 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 102 148 104 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 249 148 40 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 249 148 40 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 51 174 51 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 51 174 51 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 51 174 51 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 60 194 57 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 60 194 57 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 151 69 43 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 151 69 43 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 151 69 43 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
36 #"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
16 #"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 163 255 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 163 255 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
28 #"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
37 #"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
36 #"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 166 0 255 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 166 0 255 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 205 50 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 205 50 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 240 230 140 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 240 230 140 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
38 #"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 0 1
#"\0"
0 75 6 #"Menlo\0"
0.0 13 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 255 255
0 0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 192 46 214 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 57 89 216 0
0 0 -1 -1 0 1 #"\0"
0 75 7 #"Monaco\0"
0.0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 150 0 150 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 175 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 38 38 128 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 194 116 31 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 41 128 38 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 132 60 36 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 81 112 203 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 178 34 34 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 68 0 203 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 116 0 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 139 142 28 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 255 165 0 0
0 0 -1 -1 0 1 #"\0"
0 75 7 #"Monaco\0"
0.0 15 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 255 0 0
0 -1 -1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 255 0 0
0 -1 -1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 100 0 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 26 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 16 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 14 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 46 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 48 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 18 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 0 1 #"\0"
0 75 7 #"Monaco\0"
0.0 17 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 150 0 150 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 93 -1 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 175 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 38 38 128 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 194 116 31 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 41 128 38 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 132 60 36 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 81 112 203 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 178 34 34 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 68 0 203 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 116 0 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 139 142 28 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 93 -1 -1 0 1 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 255 165 0 0
0 0 -1 -1 0 1 #"\0"
0 -1 1 #"\0"
0.0 13 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
0.0 13 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 0 1 #"\0"
0 75 6 #"Menlo\0"
0.0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 65 105 225 0
0 0 -1 -1 0 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
0 -1 23 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 200 0 0 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 0 -1 -1 20 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 2 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 100 0 0 0
0 -1 -1 0 1 #"\0"
0 75 1 #"\0"
0.0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 0 1 #"\0"
0 75 12 #"Courier New\0"
0.0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 2 1 #"\0"
0 70 1 #"\0"
0.0 0 90 90 90 90 0 0 0 0 0 0 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 0 0 0 0
0 0 1 #"\0"
0 70 1 #"\0"
0.0 0 90 90 90 90 0 0 0 0 0 0 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 0 0 0 0
0 0 1 #"\0"
0 75 7 #"Monaco\0"
0.0 18 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 0 1 #"\0"
0 75 7 #"Monaco\0"
0.0 19 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 0 1 #"\0"
0 75 7 #"Monaco\0"
0.0 23 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 0 1 #"\0"
0 75 7 #"Monaco\0"
0.0 11 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 0 1 #"\0"
0 75 12 #"Courier New\0"
0.0 16 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 2 1 #"\0"
0 70 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 148 0 211 0
0 0 -1 -1 2 1 #"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 255 0 0
0 -1 -1 0 1 #"\0"
0 -1 1 #"\0"
0.0 12 -1 -1 -1 -1 -1 -1 0 0 1 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
0.0 12 -1 -1 -1 -1 -1 -1 0 0 1 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 0 1 #"\0"
0 75 12 #"Courier New\0"
0.0 13 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 0 1 #"\0"
0 75 12 #"Inconsolata\0"
0.0 14 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 213 213 213
49 51 55 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 142 0 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 254 252 120
0 0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 213 213 213
0 0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 132 230 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 212 251 120
0 0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 101 187 226
0 0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 145 146 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 147 0 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 192 192 192
0 0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 0.0 0.0 0.0 94 94 94 255
212 120 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 255 255 255
0 0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 34 119 34 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 204 204
0 0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 144 179 255
0 0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 204 221 170
0 0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 119 34 119 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 50 163 255 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 166 0 255 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 192 203
0 0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 50 205 50 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 255 255
0 0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 240 230 140
0 0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 93 -1 -1 0 1 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 205 92 92 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 102 102 255
0 0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 249 148 40 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 51 174 51 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 60 194 57 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 151 69 43 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 192 46 214 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 57 89 216 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 191 191 191
49 51 55 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 169 169 169
0 0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 234 234 234
0 0 0 -1 -1           0 1479 0 4 3 85
(
 #";; The first three lines of this file were inserted by DrRacket. The"
 #"y record metadata"
) 0 0 4 29 1 #"\n"
0 0 4 3 85
(
 #";; about the language level of this file in a form that our tools ca"
 #"n easily process."
) 0 0 4 29 1 #"\n"
0 0 4 3 200
(
 #"#reader(lib \"htdp-intermediate-lambda-reader.ss\" \"lang\")((modnam"
 #"e |Revised Lecture 1|) (read-case-sensitive #t) (teachpacks ()) (htd"
 #"p-settings #(#t constructor repeating-decimal #f #t none #f () #f)))"
) 0 0 4 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 4 #"take"
0 0 26 3 1 #" "
0 0 14 3 1 #"n"
0 0 26 3 1 #" "
0 0 14 3 3 #"lox"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 4 #"cond"
0 0 26 29 1 #"\n"
0 0 26 3 6 #"    [("
0 0 14 3 6 #"empty?"
0 0 26 3 1 #" "
0 0 14 3 3 #"lox"
0 0 26 3 2 #") "
0 0 14 3 5 #"empty"
0 0 26 3 1 #"]"
0 0 26 29 1 #"\n"
0 0 26 3 6 #"    [("
0 0 14 3 5 #"zero?"
0 0 26 3 1 #" "
0 0 14 3 1 #"n"
0 0 26 3 2 #") "
0 0 14 3 5 #"empty"
0 0 26 3 1 #"]"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 26 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 26 3 2 #" ("
0 0 14 3 5 #"first"
0 0 26 3 1 #" "
0 0 14 3 3 #"lox"
0 0 26 3 3 #") ("
0 0 14 3 4 #"take"
0 0 26 3 2 #" ("
0 0 14 3 4 #"sub1"
0 0 26 3 1 #" "
0 0 14 3 1 #"n"
0 0 26 3 3 #") ("
0 0 14 3 4 #"rest"
0 0 26 3 1 #" "
0 0 14 3 3 #"lox"
0 0 26 3 6 #")))]))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 4 #"drop"
0 0 26 3 1 #" "
0 0 14 3 1 #"n"
0 0 26 3 1 #" "
0 0 14 3 3 #"lst"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 4 #"cond"
0 0 26 29 1 #"\n"
0 0 26 3 6 #"    [("
0 0 14 3 6 #"empty?"
0 0 26 3 1 #" "
0 0 14 3 3 #"lst"
0 0 26 3 2 #") "
0 0 14 3 5 #"empty"
0 0 26 3 1 #"]"
0 0 26 29 1 #"\n"
0 0 26 3 6 #"    [("
0 0 14 3 5 #"zero?"
0 0 26 3 1 #" "
0 0 14 3 1 #"n"
0 0 26 3 2 #") "
0 0 14 3 3 #"lst"
0 0 26 3 1 #"]"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 26 3 2 #" ("
0 0 14 3 4 #"drop"
0 0 26 3 2 #" ("
0 0 14 3 4 #"sub1"
0 0 26 3 1 #" "
0 0 14 3 1 #"n"
0 0 26 3 3 #") ("
0 0 14 3 4 #"rest"
0 0 26 3 1 #" "
0 0 14 3 3 #"lst"
0 0 26 3 5 #"))]))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 11 #"list-chunks"
0 0 26 3 1 #" "
0 0 14 3 1 #"l"
0 0 26 3 1 #" "
0 0 14 3 1 #"n"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 4 #"cond"
0 0 26 29 1 #"\n"
0 0 26 3 6 #"    [("
0 0 14 3 6 #"empty?"
0 0 26 3 1 #" "
0 0 14 3 1 #"l"
0 0 26 3 2 #") "
0 0 14 3 5 #"empty"
0 0 26 3 1 #"]"
0 0 26 29 1 #"\n"
0 0 26 3 6 #"    [("
0 0 14 3 1 #"<"
0 0 26 3 2 #" ("
0 0 14 3 6 #"length"
0 0 26 3 1 #" "
0 0 14 3 1 #"l"
0 0 26 3 2 #") "
0 0 14 3 1 #"n"
0 0 26 3 3 #") ("
0 0 14 3 4 #"list"
0 0 26 3 1 #" "
0 0 14 3 1 #"l"
0 0 26 3 2 #")]"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 26 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 26 3 2 #" ("
0 0 14 3 4 #"take"
0 0 26 3 1 #" "
0 0 14 3 1 #"n"
0 0 26 3 1 #" "
0 0 14 3 1 #"l"
0 0 26 3 3 #") ("
0 0 14 3 11 #"list-chunks"
0 0 26 3 2 #" ("
0 0 14 3 4 #"drop"
0 0 26 3 1 #" "
0 0 14 3 1 #"n"
0 0 26 3 1 #" "
0 0 14 3 1 #"l"
0 0 26 3 2 #") "
0 0 14 3 1 #"n"
0 0 26 3 5 #"))]))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 35 #"; Prefix Trees and Mutual Recursion"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 7 #"require"
0 0 26 3 1 #" "
0 0 14 3 11 #"racket/base"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 9          56 23           0 0           0 1 2          47 23 1 #"\0"
2 -1.0 -1.0 0.0 0.0 0          18 500
(
 #"\211PNG\r\n\32\n\0\0\0\rIHDR\0\0\2\b\0\0\2:\b"
 #"\6\0\0\0BN\260\305\0\0 \0IDATx\234\355\335\351\262\2438\266"
 #"\6P|#\337\377\225}\177TSE2\231A\303\226\264VDGW\346\311\203"
 #"\261\330\222>\0046\237\357\367\373\235\0"
 #"\0\26\376\257\366\16\0\0\361\b\b\0"
 #"\300\206\200\0\0l\b\b\0\300\306\237"
 #"\332;\0000\272\317\347s\3703\367\221"
 #"S\213\200\0P\330:\20\234\205\200\275"
 #"\360 4P\202\200\0P\310<\331\337"
 #"\231\340\367\376\355\347\363\21\22\310N@"
 #"\0( \345\244\376\375~\37\205\r\270C@\0\310(\327D>o\317j\2\271"
 #"\b\b\0\231\224\230\274\255&\220\213\2179\2dP\362\314^0 \a\1\1\240"
 #"\3\313\225\4HA@\0H\254\326}\1B\2)\t\b\0\t\271i\220^\b"
 #"\b\0\211D\b\aV\21HE@\0\350\214\220@\n\2\2@\2\21V\17 "
 #"%\1\1\0\330\20\20\0:\3442\3o\t\b\0\300\206\200\0\0l\b\b\0"
 #"/\271A\221\36\t\b\0\300\206\200\0\320)7*\362\206\200\0\0l\b\b\0"
 #"\235ro\4o\b\b\0\300\206\200\0\360\222k\375\364H@\0\0006\4\4\0"
 #"`C@\0\350\220\e\24yK@\0H\300}\b\364F@\0\350\214\325\3R"
 #"\20\20\0\22\261\212@O\232\v\b\237"
 #"\317G\a\4\302\252\35\22\254\36\220Js\1\1\200}\302\1)5\27\20\276\337"
 #"\257\16\0\204V{\25\1R\b\25\20t(\240\27\245C\202\325\3R\373|\203"
 #"T\324\272#\315\235k\331\311\326\377\275"
 #"\367\273{\177\37\344-\2\3\312=q"
 #"\e\347\310%\314\n\302\\\334\353K\b"
 #"\353\316\265\356\4\363\317\347\277\267"
 #"\n\1D2\237\330\344\30\233\326\343\37\244\364\247\366"
 #"\16\374\262\f\16ks\207;\352x:\rP\322\321j"
) 500
(
 #"\301\362\4&\305\270\264^U5\326\221"
 #"C\370\200p\205\316\1\324ve\242^\337\227pg\354:\372=!\201\\\272\b"
 #"\b\0005\335\231\240\217\356\237Z\376\374"
 #"\350\357\317\266)$\220Z\323\1aymoo\t\317\315;@no&\346\243"
 #"K\247O\266'$\220Z\230\233\24g\353\233y\366\376|\366{:\aPJ\216"
 #"1\347\315\366|\377\2)\205\371\230#@K\"\237\220D\3367\332\21n\5\1"
 #" \272\350\23\260\225\4R\20\20\0n\210\36\16fB\2o\t\b\0\27\265\22"
 #"\16fB\2o\b\b\0\27\264\26\16fB\2O\t\b\0?\264\32\16fB"
 #"\2O\b\b\0'Z\17\a3!\201\273\4\4\200\3\275\204\203\231\220\300\35\2"
 #"\2\300\216\336\302\301LH\340*\1\1`\245\327p0\23\22\270B@\0X\350"
 #"=\34\314\204\4~\21\20\0\376g\224p0\23\228# \0L\343\205\203\231"
 #"\220\300\21\1\1\30\336\250\341`&$\260G@\0\2066z8\230\t\t\254\t"
 #"\b\300\260\204\203\277\t\t,\t\b\300\220\204\203}B\0023\1\1\30\216pp"
 #"NH`\232\4\4`0\302\3015B\2\2\0020\f\341\340\36!al\2\2"
 #"0\4\341\340\31!a\\\2\2\320=\341\340\35!aL\2\2\3205\341 \r"
 #"!a<\2\2\320-\341 \255\24!A\310h\207\200\0tI8\310\303J\302"
 #"8\4\4\240;\302A^B\302\30\376"
 #"\324\336\1\200\224R\204\203\345\344'h"
 #"\354\233C\302\223\366Y\207\vm\34\223"
 #"\25\4\240\e\251\302\301\367\3735i]\360f%a\331\306V#b\22\20\200."
 #"\244\272\254 \30\334\363$$,\333X{\307% \0\315K}\317\2013\332{"
 #"\334\223\320'\1\1hZ\216p\340\254\366>!\241?\2\2\320"
 #",+\a\261<\t\t\332<\256\317WT\6\32\224\353L\377h"
) 500
(
 #"\3022T^wvl\366\332W\333\306$ \0\315q\31 >\307\250}.1"
 #"\0M1\361\264\301=\t\355\23\20\200f\b\am\21\22\332& \0M\20\16"
 #"\332$$\264K@\0\302\23\16\332&$\264I@\0B\23\16\372 $\264G"
 #"@\0\302\22\16\372\"$\264E@\0B\22\16\372$$\264C@\0\302\21\16"
 #"\372&$\264A@\0B\21\16\306 $\304' \0a\b\ac\21\22b\23"
 #"\20\200\20\204\2031\t\tq\t\b\300"
 #"m\237\317\347\337\377\275\335\316\374\377\302"
 #"\301\270\226!!E]\355IU\263#\371S{\a\200\330~=}\357\351\323\371"
 #"\204\3\226R\256$\344\252\331\321x\232"
 #"#\260k\36D\237\f\21\277~\327\0"
 #"\315\332\333\232X\376~\216\232\35\221\25"
 #"\4\340/)\6\312\371w\r\272\224\220"
 #"b\25jY\263\352\365\37V\20\200\177"
 #"\345\32\34\227\333\265z\300\221\273\265\221"
 #"+\200\n\266\377\20\20\200\"\3\242`"
 #"\300U\353Z\331\253\223\22g\372\243\257"
 #"&\370\24\3\fn\36\4s\17\204\353\355\217<\360r\356Wm\224\232\270\347\e"
 #"'G\375\344\203\200\0\3+y\206\364\366&2\306\262\f\255\313\332)}V?"
 #"r\255\272I\21(b\3751\263\221\a^\256\213P'\363JB\204})\311\n"
 #"\2\f\252\346\200\347\333\363xB\315\226% \300\200F<\e\242mj\266<\1"
 #"\1\250b\30432\236\211\22\16F\253Y\1\1\6\23e\260\235\246\361\6\\\332"
 #"7R\315\n\b\0\300\206\200\0@X\221V\274F# \300@\f\266\300U\2"
 #"\2P\325H\327t\241%\2\2\0\3340J\250\25\20\0\200\r\1\1\200\220\334"
 #"3S\227\200\0\0l\b\b\0\2044\312\265\376\250\4\4\0`C@\0\200\e"
 #"F\2717B@\0\252\32e\260\205\326\b\b0"
 #"\20\327t\201\253\4\4\0\302\22j\353\21\20\0"
) 500
(
 #"\200\r\1\1\6\23\351\214\314\375\a\264"
 #"f\244\232\25\20\0\b-J\250\35)\34L\223\200\0C\2120\340\2166\330\362"
 #"N\204\232\35\215\200\0\35\373|>\207\203j\315\1W8\2405#\326\254\200\0"
 #"\235\232\a\264\321\0065\372U+\324\216"
 #"\30\16\246I@\200\356\314\253\6W\6"
 #"\264\32\3\356\250\203-i\270\324P\316\347\253\247B7\236N\276%&\355yP"
 #"7\344\220\202\232\315O@\200\16\244\30\310r\16\206V\r\310A\315\346% @"
 #"\343R\16d\251\a\334\345R\260\241\206"
 #"\\\"\367\201\226\375\251\275\3\30039"
 #"&\363y[\251V$\226\277\357\214\214"
 #"\\\226\367%\244\254\331\321\t\b\320\240"
 #"\334\3\331:(\354\375l\275?\277\376"
 #"\335<\210\e\200\311!G\315\216\316%\6hH\256\345\317;\23\367\333\201UH"
 #"\2404a\340\31\1\1\32\221kb\2551a\v\t\20\237\357A\200\6\3646\241"
 #"\372,;\304' @`w\276\364\350\351\366Sn\373\316\244/$\20\201\32<"
 #"& @P\271\277*9G\360\270;\351\v\t\324\246\6\217\t\b\20L\356U"
 #"\203h\f\320\20\223\200\0\201\224z\300R\264\0\"$P\223\372\333' @\0"
 #"\243\255\32\3541HC,\2\2TV\372\261\314\221\203\210\220\0q\b\bPI"
 #"\215U\203\310\341`&$P\203\272\333"
 #"\22\20\240\202\322\253\6%\245\30h\r"
 #"\326P\237\200\0\5\325\274\327\240\205\325"
 #"\203%!\1\352\22\20\240\220\232\253\6"
 #"\255\205\203\231\220@I\352\355o\2\2"
 #"d\346\23\n\357\30\264\241\16\1\0012"
 #"\212p\257A\17\341DH\240\24\265\366\37\1\0012\210\262j\20a\37R1p"
 #"CY\2\2$\26a\325\240\266\\\223\271\220\0\345\b\b\220P\2443\366H\373"
 #"\222\222\220@nj\354\37\2\2$\20\345\222\302,"
 #"\322\276\344`\0\207\374\4\4x\311%\205:\204\4"
) 500
(
 #"rR_\2\2\r\233\317\332k\277~\264`\20q\237r1\210C>\2\2\315"
 #"\212\360\321\301Q&\342\310\204\4\310C"
 #"@\200\e\242\256\32\314\"\355[\311\211"
 #"[H \207\321\353J@\200\213\242\257\32D\n\a5\214>\230Cj\2\2\374"
 #"\20}\325\200\377\b\t\220\216\200\0'"
 #"\242\257\32\314\4\230\377\b\t\2444r"
 #"=\t\b\260\243\245U\203V\366\263\244\221\auHE@\200\225VV\r8'"
 #"$\220\312\250\265$ \300\377DY5"
 #"\230\a\242y\177\316\6\246\222\373\273\336"
 #"\257+j\17\254\265_\237\261\\\351\263"
 #"-\21\20hV\312N\30m\325\340\312\376\324\b3\21\2\324]B\2%\254\373"
 #"l\0175\367\247\366\16\300S)&\252"
 #"\271\23G\233\364\242\355\317l\336\257\250"
 #"\373wd\16\t\255\3557q\234\325\320ru\255'\2\2\303jy\302hy\337"
 #"k\21\22\310\255\267\332r\211\201!\265"
 #"<Q\264\274\357\265\275\275\334\320\333\31\"\367\214v\271J@`(QnD\244"
 #"\236\247\203\374\223\2334\31\303\336}\a"
 #"=\324\210\200\3000\242\335\210xf="
 #"\270,'\247\332\17\251\272;\360E<"
 #"\353z\262O\313\373/Z\250!\352\350\351$\304=\bt/\352\215\210G\326\373"
 #"\31e\277\243\354G*\356I\340\211\243"
 #"\272\351\261\216\254 \320\265\226V\r~"
 #"1\231\245\27qu\3\242\20\20\350RO\313|\323$\34\344$$\300>\1\201"
 #"\356\364\264j@\31B\2w\214R/\2\2\335\350m\325`\326\343{\212\350\352"
 #"\240\357S\f\214\342\3635\362\320\201^"
 #"'\321\236\336W+\357\245\225\375\244\276"
 #"\336k\305\n\2M\353u\325\200zFY>\206_\4\4\232\325\373\275\6\202O"
 #"=B\2\b\b4h\204U\203\336\337_\v\204\4~\351\275F\4\4\232"
 #"\322\373\252\1\261\364>\1\300\31\1\201&\214\260j0\e\345}\266BH"
) 500
(
 #"\340L\317\365! \20\336H\253\6="
 #"\207\203\226\a\322\226\367\35\236\22\20\b"
 #"\255\347\t\223\266\b\t\214F@ \244\221.)\314F{\277-\22\22\330\323k"
 #"]\b\b\2043\322%\5\332\323\353d\0k\2\2a\214\270j0\e\365}\267"
 #"JH`\4\2\2!\214\274j \34\264IH`\251\307z\20\20\250j\344U"
 #"\203\21\3656\210\366\366~`I@\240\232\221W\rf\302Q\373\204\4f\275\325"
 #"\202\200@qV\r\376\241\r\372\321\333\304\0\323$ P\230U\3z%$\320"
 #"\e\1\201\"\254\32\374m\364\266\230\353"
 #"\2417B\2=\325\300\237\332;@\377F\237\f\327Fm\217^\6\315_\346\t"
 #"b\304cL_\254 \220\215U\3\226"
 #"F\252\203\236\316\"\271\257\227\343/ "
 #"\220\205{\r\366\tL\343\350e\222`\\\2\2IY58\246]\306ZE\230"
 #"&!\201\266\t\b$c\325\0\266\204\2041\365p\334\5\4\222pv|N\373"
 #"\214\255\207\311\202gZ\376\304\216O1"
 #"\360\312\\\370&\277\255V\a\205\334F"
 #"\235,}\272a\34\275\324\267\25\4\36sI\1\356\0315\34\215foLl\361"
 #"\270\v\b\\\262,n7\"\376\2667\30\2648@\3442r\355\b\t\264\342\363"
 #"\35\271\247r\311z0S2\277\355M\0\332\215%!\273\177w\306\316_\241\261"
 #"F\255\270\a\201S\316t\3220\21\260"
 #"\346\236\204\376\235\255\26\335=\361\252q\322! pH8x\306\212\vW\t\t"
 #"\375[\207\204\2477v\237\335\327\220\253"
 #"~\4\204\216-\213\362n\1\35\205\3"
 #"\3\331\365v\325V\367\214\32\254\326!!G`x3\26\220N\352c\233\263f"
 #"\246I@\350\306\257\345\247;\313S\243"
 #"\16\324{\236\264\353\372\337\260u\245\36G\272\217#\345\215\213)\307"
 #"\2\322\312\325\316\313\372I\371\32n"
 #"Rl\330\333\263\202\275\202r\246\361"
) 500
(
 #"\2177\235\315wC\34{\3336=\267\355\333`\256fc*}\t)\345\353\t"
 #"\b\215JZ\4\256\201\376+\345@i\320\375\233\232=\366f%J\315\306T\263"
 #"-S\275\266\200\320\230\\Eg`\310"
 #"7\351\3646\231\335\245f\257y\262\364\257fc\212\320~)\366A@hH\211"
 #"\242\213P\330\245\225\230hz\233\314\256"
 #"R\263\367]\271\324\240fc\213R\223o\367C@hD\311\202\ei`h\371"
 #"\372`t\245k\266\267v=\352\207j6\266h\355\365f\177|\325r\3J\27"
 #"\\\244\342\356\315(_\263[\243f{"
 #"k\327\345G\330f\321&\37\376\26\361\370\274\351\e\2\2\273z\34p\327\"v"
 #"\346\36\324j\327\36k\366\e\340ah"
 #"=\266+\327\b\b\301\325\234\304z\36\30\264+\255Q\263\261E>\341xz\374"
 #"\4\204\300\"\27\34\357\364:\340\326\256Y\355J\r-\34\237'}C@\b*"
 #"J\301\3658\340Fi\333\336Di\327\36k6\2\355:\36\1\201\237z\32\30"
 #"\242Lb\323\324W\273\222\217\232\245\26\1\1x-\322$6M&2\312\211V"
 #"\373)\t\b\1\365\\p\0\324q78\v\bP\2213]\3168Y\240&\1"
 #"\201a\30l\341=\241v\34\2\2\227\30\24\0\306\" \0\257D]\231\21j"
 #"\311-j\355\247\" \4\323{\301\1P\317\235\340, \0\0\e\2B0\226"
 #"E\1\210@@\0^\211\32j]\256\203\255;\375B@\340\22\203-\300\337\242"
 #"\206\343T\4\4\206\321{g\206\22\234,\214C@\200\212\f\266\234\21j\251I"
 #"@\b\310\240\0@m\2\2\360Z\264Pke\6\266\356\366\v\1\201\237z\32"
 #"l#Md=\265+\371\250\331\330\""
 #"\35\237\324\4\204\240\242\24\235\1\201\253\324,\364E@\b,\312"
 #"\200\333\233\b\355j\22\343\0165\e[\204\343\363\313\223\343' "
) 500
(
 #"p\250\347\1\241f\207\326\256\371h\333<zn\327\21<=~\2Bp\265\6"
 #"\5\3\2O\251YFT;\34\347  4\240\307\302\213\240F\273\2162\211\225"
 #"n[\355\232\317(m\233B\304\261\372"
 #"\315\361\23\20\32Q\252\360>\237\317P"
 #"\3\302\334\256\245\332v\224v\235\225j"
 #"\327\221\30\vb\213\24\22\336\36\277?"
 #"\t\367\205\314\226\205\227\243\323\216:\30"
 #"\314\3579\327\373\317y\314\"\313\335\256"
 #"\271\267\35\231\261\200\22>_U\20\326Y'M\331\201G\235\300\366\244n\vm"
 #"\373\17\355\232O\216\261`\232\264\355["
 #"\265CV\212\327\27\20\202\272rpS"
 #"\f\222\265\2138\252\267\355\262>6\332\371\37I\6-m\271\221z,\320\306i"
 #"\324\b\262)_S@\b\350n\347\334"
 #"\273\336\265\367\373W\377\35\377H\335\256"
 #"\6\335\177\334\251C5{O\312\232U"
 #"\257\351\224j\313\324\257# \4\223\352\0\eX\363x\333\256\6\335}G7u"
 #"i\253\367\236\326\254ZM+\367=#9\266- \4\242C\216\301q\246\5\352"
 #"4\217\344g\3719o\2\26\20b\320\31\307\342x\323\2u\232\307zU\347j"
 #"\e\227^\31\3661\307\0JwB\235\376\275\267m8\177L\315q\270F[\321"
 #"\223\275\373=\236\374^n\2Be\6\276q\t\t\327i\253:\264{\31Q\333"
 #"\3277)V\342[\312\230\246X\337\272\6\260$ T0\a\203Z\341\300\244\24"
 #"\213\343q\215v\202\262\4\204\302\254\32\260\307\344GTjs\\\2BA\302\1"
 #"g\f\304\300,\302X  \24\"\34p\205\220pN\373\324\241\335\307$ \24"
 #" \34p\207\301\30\210@@\310L8\340\t!\341\230\266\2012\4\204\214\204\3"
 #"\3360\21\22\211z\34\217\200\220\211p@\nw\a\345Q\6p\223"
 #"\25\3447l@\230\277\250(\327\266\205\3R\271:\31\252;r\23\314"
) 500
(
 #"\3062l@\310\365\310\315V\6i\35"
 #"\275-\277\216W+u\227\222\32\206\274\206\r\b\251\325\376vD\372w4!\216"
 #"\30\16\200\374\4\204\4\f\320\224\262\16"
 #"\tj\217\322\254\334\214C@x\311\0"
 #"Mi\363\0\255\366LV\220\223\200\360"
 #"\202\1\232\232\256\326\236\t\224\324\4\263"
 #"1\b\b\17\t\a\324r\247\366F\250S\223\25\344! <0\302\240KL\302"
 #"\1P\212\200p\223A\227Z\204\203cV\21\312\323\346\375\373S{\ajyR"
 #"\330\243\f\272\353\266\31\341=G'\34"
 #"\244\263\254o\355T\207c\320\206\317\327"
 #"\321\271\244\327Aw\375\276\346\216;\377"
 #"\335\372\317\374#j=D\335\257R~\275\377\345\317\325v\32wkn\344c\220"
 #"s\305%G\e\16\273\202p\325h\5<M\177\277W\313\210\355\30=\34\3742"
 #"\327\261z\256g\364c\320Z\377\24\20N\30pi\205Z\275N;\325\347\30\264"
 #"\301M\212\a\f\270\343j\355\354F\255"
 #"\376\307\212Wy\332\274_\2\302\216\321"
 #"\a\334\365W\371\216d\271\4\332\302{\37\275V\357X_\367^\3777\3719\6"
 #"mq\211ae\364\1w\3715\276\313\277\e\305\374\376[x\317W\367s\264\373"
 #"h\256\34\303\321\332$\267'\375\3061"
 #"\370\307\335\200T\262\275\4\204\205V&"
 #"\206\334\264A\e\256\36'\307\363?\332"
 #"\242>\307\340o\221\333\303%\206\377\21"
 #"\16\240\37\256\213\303{\2\302$\34\0"
 #"\274%\224\365g\370\2000z8\320\251"
 #"\351\225\332\206w\206\16\b\243\207\3\216"
 #"\265\362)\6\210D(\353\313\2207)\272{\2263W\356~_\376\267:\2R"
 #"\213p\2;\334\n\302\334\350\265\e\36\310\317\31-\255\2120G\r\25\20\"$"
 #"2\200\236\te\375\30& \b\a\244\260\256!5\25\237\t\v\236\31\""
 #" \b\a\0\345\be}\350> \b\a\347\326\317\36\320\251\351\321r\302"
) 500
(
 #"R\343ei\357vu\35\20\204\203s{\35W{\3213\223UY\332\273m\335"
 #"\6\4\341\3407\355\363\314\334n\332\257\r{+c&\256\274\264w\37\272\t\b"
 #"\313A@8\0f\306\2x\246\213\200\260\376\362\32\3\2\271\251\261\2668^e"
 #"i\357>t\21\20\326,g]\247#3\n\265^\226\366n_\363\1\301\215v"
 #"\0\220^\323\1A8HC\2331\n\265^\226\366n[\225\2075]\271\4\360"
 #"\253\260\326\333P\210\357\35\265a\212\343"
 #"\325:m\320\217\371;\21\236\334\257\244"
 #"\16\356\273\362\245I\3325\246b\1aY\0W\16\364\325\0\240h\362\310u\274"
 #"Z\361\344\375\364\326\6=\273\372M\177"
 #"o\353@\r\374cn\357\271=\364\2576|\276\231[9\325#q}:\241\f"
 #"\307+\335\276\267\334\6\2449~\36\t\276\245\177\265#k@H}\0u\266\274"
 #"F?^9\366\267\2656 _\35\214^\3\372W{\262\4\204\334\aMgK"
 #"\313\361\312\277\217-\264\1y\217\323\310"
 #"\223\231\376\325\246\344\1\241\324\201\32\271"
 #"\263\245\344x\225m\203\210\357\237\262\365"
 #"9Z\35\350_\355J\32\20j\34 "
 #"E\361\234\343U~\177\242\275\177\364\203"
 #"\234\364\257\266%\373\36\4\a\246-\216"
 #"W\2356\270z\367<}\e\241\16\364\257\3665\375EI\323\244 Z\343xi"
 #"\203H\4\345\376\350_\351$\t\b\265"
 #";\231\202\270\307\361\252\337\6\324W\273"
 #"\6\"\364\203\\j\267-i\274\16\b\n\241-\216W\2146\350yr\340\272\36"
 #"\353@\377\352G\363\227\30f\n\242-\265\216W\204\301k\246f\353\211T\a="
 #"\211\324\256\372\327{\257\2B\244b\340"
 #"7\307\v\3421\221\21U7+\b\323\244\243\265\306\361\242\6A\31\256\351* "
 #"@k\204$\310G\377zG@`\30\316\34!"
 #"\37\375\253?\217\3\202bh\213\343\5q9\323%"
) 500
(
 #"\"+\b\0\300Fw\1A\22o\213\343EIV\322\340\272\356\2\2\264FH"
 #"\202|\364\257\347\4\4\250\314Y-\344\243\177=\327]@P\fmq\274(\311"
 #"\331$\\\327]@\0\0\336{\34\20$\361\2668^\20\227\2254\"\262\202\300"
 #"0\204$\310G\377\352\217\200\0\259"
 #"s\204|\364\257w\272\n\b\212\241-\216\02758\323\205k^\5\4\35\255-"
 #"\216\27\304#(\23U7+\b:Y[j\35\257H!I\315\326\23\251\16z"
 #"\22\251]\365\257\367^\a\204H\5\301o\216W\21460x1M}\326\201\376"
 #"\325\217$+\b\265\vB1\334\343x\325o\3\352\253]\3\21\372A.\265\333"
 #"\2264\232\277\304\320s'\353\221\343\245"
 #"\r\"1\221\365G\377J'Y@\320\321\332\342x\325i\3\203\27\3234F\35"
 #"\350_\355\373|\23\267f\251\0034\27\236bx\307\361*\333\6\21\337?e\353"
 #"s\264:\320\277\332\225< LS\376\316\246\20\322r\274\362\357c\vm@\336"
 #"\343\249$\347\246\177\265)K@\370"
 #"w\343\211\17\332\310\35\254\204\321\217W"
 #"\216\375m\255\r\310W\a\243\327\200\376"
 #"\325\236\254\1a\232\322\35\300_\35L"
 #"\aL\243\324\361\212,\325\276\267\334\6"
 #"\2449~&\260-\375\253\35\331\3\302"
 #"\277/\264\270Y\345\312K\256on\271"
 #"\372;\n&\215\22\307+\262\247\365w"
 #"\367w\210\355m\35\250\201}\372W\e\212\5\204\277^\364\302\235\255OwKH"
 #"H/\347\361j\2056`\232\324A.\3325\246*\1!7!\1\0\336i\376"
 #"\213\222\366\370\214?\0\274\23\" \344"
 #"\230\314\205\204\362Fj\357\221\336+\307"
 #"\324A\36\3325\206\20\1!\27!\1\0\236\351: L\223\220\0\0Ot\37"
 #"\20\246IH\0\200\273\206\b\b\323$$\224\240"
 #"\215\1\3721L@\230&\23\30\0\\5T@\230"
) 500
(
 #"&!\1\0\256\30. L\223\220\0\0\277\f\31\20\246IH\310E\273\2\364"
 #"a\330\2000M&3\082t@\230&!\1\0\366\f\37\20\246IH\0"
 #"\2005\1\341\177\204\4\0\370\217\200\260"
 #" $\244\241\35\1\332' \254\230\334\0@@\330%$\0000:\1\341\300\335"
 #"\220 P\0\320\23\1\341\304\325\220\360"
 #"\371|\246\357\367[`\217\332a\25\6\240m\2\302\17\277&:\341\0\200\36\t"
 #"\b\27\34\205\4\341\0\200^\375\251\275"
 #"\3W\254'\347\32\223\362\34\22\346\327"
 #"\26\16\0\350Y\370\2000\207\203\345\304"
 #"\\kr^\256$\b\a\375\271{\317"
 #"\304\235\177\257^\332\221\253\16F\257\1"
 #"\375\253=\341\3\3024\375}\360#\334"
 #"\374\266.F\253\t\373\326\253.\321\265"
 #"\262\237\344\245\16\362\320\256\355q\17\302\r{\223]K\23 \0\\% \\$"
 #"\34\0000\222&\2\302\362\222B\215\313\v\302A>\363=%\265/\e\1\360\267"
 #"\360\1a}s\342\362\357J\20\16\3369\273gdn\307\3451\6 \206\346n"
 #"R\214\360\332\302\301{s\30h!\24"
 #"\270\233\232\273u\252\16\256\323\277\342j\" \320\257\26:|\v\373H^j "
 #"\37m\eW\370K\f\0@y\2\2U\354\335w\320\302\345\6\200Q\b\bd"
 #"w\345\201Wn\374\4\210\245\352=\b{g\217&\211q\264|\254\5\32\214Y"
 #"\371\350_1\270I\21\0360x\241\6\362\321\2661T\275\304\240\b\0 &\367"
 #" PD\204\207l\1p\235\200\0\0l\204\n\b.9\214\301J\2@|\325"
 #"\3\202P\320\277\345s4\204\3\2006T\17\b\0@<\2\2\331Y%\2h"
 #"O\230\200`\22\1\2008B\4\4\341\240\177\2161@[B\4\4\0 \26\1"
 #"\201b\254\"\0\264#\314\303\232f&\21\0\250"
 #"\257X@\270\32\6\204\206\276\371\312e\2006|"
) 500
(
 #"\276\5f\337\267\217\356\364X\3251x\304+@\34YW\20RM\354\363\357\233"
 #"@\372q\264Rd\5\t \206l+\b\271&s\253\tm{r\374\34s\200"
 #"\362\222\a\204R\203\271\325\204\266\244\250"
 #"\vA\1\240\234\244\1\241\364\244-$\264!\365qr\334\1\362k\372{\20\334"
 #"\21\37\333\374\24\307\324\223\271\343\16\220"
 #"_\262\200P\353\254\316d\21\323\\\17\271j\302q\a\310+I@\260\344K\r"
 #"B\2@>M_b\230\231(b)\31\30\35{\200<^\a\204(\253\a&"
 #"\212\30\242\324\3\0\357\274\n\b&\3"
 #"\"\20\16\1\322\353\342\22\0031\324\f\214B\2@Z]\5\4\223\4\0\244\321"
 #"U@\0\0\322\20\20\0\200\215\307\1"
 #"\301\r\212,\251\a\200\276XA\240\e"
 #"\356A\1H\247\273\200`\222\0\200\367"
 #"\272\v\b\0\300{\335\5\4\327\302\1"
 #"\340\275\356\2\2\343\22\16\1\322y\34\20\\\353gI=\0\364\305\n\2\0\260"
 #"! \0\0\e]\5\4\327\240\1 \215\256\2\2u\325\274\17A8\4H\353"
 #"U@pc\32\21\b\a\0\351\275^A\210\22\22L\0221D\251\a\0\336\351"
 #"\342\22\203p\20K\311\220\340\330\3\344"
 #"\221$ \270\366\314Z\211\232p\354\1\362I\266\202`i\231=\271jB8\0"
 #"\310+\371%\206\222!\301$\21\333\367"
 #"\373M\36\34?\237\217\343\16P\300\347"
 #"\233a\244-1\200\233$\3322\207\2047\307\3141\a('K@\230\2464\23"
 #"B\311\355R\306r5\341\3121\274\373\357\1H#[@\370\367\5\22\236\365\235"
 #"m\313\331e{\256\\zpL\1\352"
 #"\370\223\373\5\226\327\240\237\f\366\316 "
 #"\373\265>\236B\36@\34\331\3\3024\3757\21\354\2351.'\204_?\377\365"
 #"\32&\30\0H\243H@\230\355M\336)W\b\204\4\0H\243h@\330c2\a\200xB|\325"
) 500
(
 #"r\312\317\311\373\302&\0x/D@HMH\0\200w\272\f\b\0\300;\335"
 #"\6\4\253\b\0\360\\\267\1a\232\204\4\0x\252\353\200\0\0<\323}@\260"
 #"\212\0\0\367u\37\20\246IH\0\342\230\37Y~\364\347h\333e\\C\4\4"
 #"\200(\326_\16\227\352\313\342rm\227q\r\23\20\254\"\0O\2150v\214\360"
 #"\36\271\247\372W-\227\344Y\r\320\216"
 #"\243\347\264\314}\370\351s\\\356nw"
 #"\376\363\335\247\322\346|\22\355\233m\257"
 #"\203\300\233\367H\337\206YA\0\3321"
 #"O\326G\23\325\257\237\247\334\356\374\337"
 #"w^\357\351\376\345\336\3662\0,\237"
 #"\262\373\344=\322\277\341\2\202K\r\20"
 #"\337\257I\352\351$\226k\273\271\266\223"
 #"c\333{\341\a\366\f\27\20\246IH"
 #"\200\26\344\352\243\245\372~\316\3271~"
 #"Q\302\220\1\1\210-\327\275B\245\356"
 #"A\312\371:\356\243\242\224a\3\202U"
 #"\4\210\351M\277<\373\354\177\312\376\236"
 #"\363ur\277\207\365w%<\331\17\3060l@\230&!\1\"Z\336<\267\274"
 #"\273\376lb\273\322\217\337n\367\352\204"
 #"\371\353u\236\354\373\225m_\331\356\336"
 #"\357\257?\311aLd\366\371\6X\253\252\271df\271.\16\307\202\24\\F\350"
 #"o?\250c\350\25\204i\262\212\0=\21\16\372\333\17\352\31> L\223\220\0"
 #"\275(5\241E\376\30c*Q\366\203z\4\4\0`C@\370\37\253\b\0\360"
 #"\237\241\236\305\360\213g5\244w7t"
 #"=\271\243\e\200\364\4\4\2622\211\3\264\311%\206\25\227\32\0@@\330%$"
 #"@\\{_n\24\241\277F\331\217\226h\257\330\4\4\240)\353\313VQ.c"
 #"E\331\17H\305=\b\a\334\260\230\317\335\263\6\307\0\3420.\216C@8!"
 #"$\344\241=\271b\31$\357\326\314:\204.\237A"
 #"p\364wW_\343\316~\35\355\307\335\355\\\331\207y"
) 500
(
 #"\254Z\277\237\224\257\263~\236D\352\327"
 #"X\377\376\233\355\362\236K\f@8\363d\367dRXN^WC\300\235pp"
 #"u\277\316\366c\275\235;\253jg\373"
 #"\260>\241I\375:\363\177\257\267\371\364"
 #"5\226\333M\331F\244! \374\340\206"
 #"E(\357\355\331\342\336\244\226b\333w\177wo?\216\236$\231b\37\226\23x"
 #"\316\327\231\275}\215\365\353\244j#\322"
 #"p\211\341\2\227\32\240\274\334}\356\351"
 #"\366S\355\327\233m\334\331\207\22\257\223"
 #"\3538\31s\353\262\202@\30\316\24\230"
 #"\345\16\a\353\345\361\253\"\234(\364\360\304J\332  \\\344RC~\6#\246"
 #")MP\\\177O\302\235\337;\372\367O\366ko?\366\256\251_\375^\207'"
 #"_E\236\363u\336\274\306\331\353\376\332"
 #".e|\276\1F\345\226\222jK\373\n\255:\232\f\316\356\322?\272\373}\375"
 #"\263\365\277\331\373\275\243>~g\277\316"
 #"\366\343\312\235\373w\367\241\326\353\244~"
 #"\215+\373N\31\2\302M-\355+p\354\250/G\350\343=]F\210\320\236<"
 #"\343\22\303M.5@\277\"Lf\302\1QXAx\250\305}\206\321\371\342\35"
 #"\270\316\307\34\201a\b\5p\235K\f\17\271\324\0@\317\4\204\27\204\4\0z"
 #"\25> \230\200\1\240\274\320\1\241\205"
 #"\357\343~\262\2120\277\2377_(\2\09\205\16\b{O\16\213\350nHx"
 #"\373D9\0\310-t@\350\2310\0@d\2B\"OoXtY\1\200\210"
 #"\4\204\204\236^j\360\245K\0D# \0\0\eM\4\204\226\356\360\367\335\b"
 #"\0\364 \374W-\267\270\364>\207\204\253\373\336\342{\4\240oM\254 \0\0"
 #"e\205_Ah\325\331*\202'\312\1\20\235\200\220\321QH\20\n\0\210\316%"
 #"\6\0`\343\363\255x:\273w\267\177\217g\327"
 #"\276\347\0\200\326XA(\300G\37\1hM\325\200"
) 500
(
 #"\340\254\32\0b\262\202P\210U\4\0Z\" \24$$\0\320\212P\1\301%"
 #"\a\0\210\241z@\30-\24XE\0\240\5\325\3\302\210\204\4\0\242\23\20\0"
 #"\200\2150\1\301\245\6\0\210#D@\30-\34\314\204\4\0\242\n\21\20\0\200"
 #"X\4\204\312\226\253\b\237\317\307\212\2\0!T}\334\363(\17k\272\"u0"
 #"\320\266\0\274Q, \\\235\260F\233\330R\4\3m\v@jE\36\367\374\366"
 #"q\307\363\304\326\353d\366t\342N\321"
 #".\36E\r\300\236\254\1!\365\304\336"
 #"\363d\266\16\t\277\336g\312\266\350=\200\1p_\266\200\220k2\357y2["
 #"\206\204\243\367\227\363\375\367\34\300\0\270"
 #"'y@(5\201\367:\231\235\205\204\22\357\271\347\0\6\300uI?\3468O"
 #"`%&\227^\277d\350l\345\240T"
 #"\273\366\332\266\0\\\327\364\367 \364:"
 #"\221\325X9\0\200\245d\1\241\326$\326{H\320\256\0\324\220$ 8\303\355"
 #"\223\220\0000\256\246/1\314z\235\310\4/\0jy\35\20\242Lb\275\205\4"
 #"\355\n@M\257\2B\224I\214\274\204"
 #"\4\200\361tq\211\1\0H\253\253\200"
 #"\320\313\231\256\225\31\0j\353* \0\0i\b\b\0\300\306\343\200`\31|,"
 #"\275\\\276\1\340\32+\b\0\300Fw\1\241\3653]+3\0D\320]@\0"
 #"\0\336\353. \264~\6\336\372\n\b\0}\350. \0\0\357=\16\b\316t"
 #"\307\322\372\312\f\0\367XA\0\0006"
 #"\4\4\0`\243\253\200\320\3132\270\3137\0\324\326U@\0\0\322x\25\20\234"
 #"\351\216\241\227\225\31\0\256{\275\202\20"
 #"%$\3646\211iW\0j\352\342\22C\257\223X\224\220\0\243\371|>\372\36"
 #"\303K\22\20jNd\275\206\203\231\266eD\363\4\375\246\366\317~"
 #"w\275m\201\0\266\222\255 8\333\355\213p@\4Ok\360\327X"
) 500
(
 #"\264\336\356\336\237\325?\243K~\211\241dH\30e\22+\35\276\4=z\241\226"
 #"\341\271?)76O\326%&\356Q\302\301l\16\t\332\25\316\315\241\340M\260"
 #"^n\343\327\337\257_c\375\263\365~"
 #"\350_\264\"\313M\212s\207\310\221\336"
 #"\347\355\216\330\311\264+\\s6\201\337"
 #"\375\375\345v\346K\17\3636\227\201ay\202t\364{\320\222l\237bXw\244"
 #"\24t4\355\n5\355\255 \34\375\367"
 #"\331\337A\v\222^b\330\263\234\314\236t\24Ks\373R,[\2769.\20\321"
 #"\372\314~\371\367o\353|\271\202\247\317"
 #"0\202\354\1a\232\246\303\245\267\345\317"
 #"\256\374\234\277\335i;mK/~M\320G\367\r\244 $0\222\"\1av"
 #"t]\357\354\347\\\243m\31\315z\222"
 #"\316\375\211\205\275{\20\326\373\341S\23"
 #"\364\244h@\330c\342\312G\333\322\272\36\262\241\230\0\0\2QIDAT_"
 #"\23\356\2353\371\263\211\374\327\237\327\177"
 #"?og\357\306\341\275\25\214\275O6@t\237o\200J\325a\362\321\266\0<"
 #"\321\305\263\30\0\200\264\4\4\0`C@\0\0006\4\4\0`C@\0\0006"
 #"\4\4\0`C@\0\0006\4\4\200\216\344z\342+\343\251\376M\212\0G\216"
 #"&\272\21\276\374\313\363S\250M@\0B:z\332\350\b\17K\332{\177WW"
 #"\5zn\27\312r\211\1\b\347\354Q\344Q'@\313\372\364\306\n\2\20\312Y"
 #"8\230\235=\305q\357\301H\353\207)"
 #"\355=\\\351\350\337\356\355\323\321\237\217"
 #"\376\376\354u\216\336\347\336\203\241\216\376"
 #"\315\331\276\375\372\267G\357\371\354\367\256"
 #"\374\214\366YA\0\232\265\234\f\317\236"
 #"\324\270\376\371\321\277?\372\331z\362;"
 #"\372\363\335\3279r\3451\326W\367\365\356{~\372{VP\372c\5"
 #"\1h\332rb[\237\r\377\372\371"
 #"\331\331\363\336\266\256Z\257(\34\355\363"
) 354
(
 #"\225\220\260\374T\302:|\354\355\367\323"
 #"}\331\373\275\243\327\370\265M\372  "
 #"\0d\222b\331}\31T\336\334\234\231"
 #"\343\22\200\313\n}s\211\1\b\305\222"
 #"\365\371}\25P\212\200\0\204\265\27\22"
 #"\366\35618\373\367o^\373\355\331z\256}\233\267we\373o\366\345\3505J"
 #"\274?\352\373|\3D\323\336?\323\\"
 #"\223\266\245eW\276,\350\327\247\30\226"
 #"\177\177\364\347\243\373\r\256\334,x\364"
 #"\211\205\243\375\272r\347\377\225\373\5~"
 #"m\377\311\277=\v\0W\267I?\4\204\316i[\270F_\201\277\271\304\0\0"
 #"l\b\b\0\300F\266K\f9oX\31}\0310W\333\216\336\256\214\3137\2"
 #"\302V\210{\20\310\307uU\0\236p\211\1\0\330\20\20\0\200\r\1\1\0\330"
 #"(\376,\206\2737\330\271~~\315Y\273^\371\262\31\0Xr\223\"\0\260\341"
 #"\22\3\0\260! \0\0\e\2\2\0\260\21\" \254\37)J\32\332\25\200\247"
 #"\334\244\b\0l\204XA\0\0b\21\20\0\200\r\1\1\0\330\20\20\0\200\r"
 #"\1\1\0\330\20\20\0\200\r\1\1\0\330\20\20\0\200\r\1\1\0\330\20\20\0"
 #"\200\r\1\1\0\330\20\20\0\200\r\1\1\0\330\20\20\0\200\r\1\1\0"
 #"\330\370\177\30\267\224Z\217D\225M\0\0\0\0IEND\256B`\202"
) 0           0 0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 84
(
 #"; A prefix tree is a convenient way of storing words. Imagine we had"
 #" a dictionary of"
) 0 0 26 29 1 #"\n"
0 0 18 3 81
(
 #"; thousands of words, and we want to find out whether or not some wo"
 #"rd is in that"
) 0 0 26 29 1 #"\n"
0 0 18 3 87
(
 #"; dictionary. If we just had a list of all of the words, then we wou"
 #"ld have to possibly"
) 0 0 26 29 1 #"\n"
0 0 18 3 76
(
 #"; traverse the entire dictionary (some thousands of words) just to f"
 #"ind out."
) 0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 91
(
 #"; Consider an example where we try to find out if the word \"zoo\" e"
 #"xists a large dictionary."
) 0 0 26 29 1 #"\n"
0 0 18 3 89
(
 #"; If the dictionary is in lexicographical order and contains 100,000"
 #" words from a-y, then"
) 0 0 26 29 1 #"\n"
0 0 18 3 75
(
 #"; we'll have to search through at least 100,000 entries before we fi"
 #"nd zoo."
) 0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 88
(
 #"; Alternatively, if we use a prefix tree, we have to search at most "
 #"through ~50 entries!"
) 0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 24 #"; A PrefixTree (PT) is a"
0 0 26 29 1 #"\n"
0 0 18 3 14 #"; | (make-end)"
0 0 26 29 1 #"\n"
0 0 18 3 34 #"; | (make-node Character ListOfPT)"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 22 #"; A ListOfPt is one of"
0 0 26 29 1 #"\n"
0 0 18 3 9 #"; | empty"
0 0 26 29 1 #"\n"
0 0 18 3 22 #"; | (cons PT ListOfPT)"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 75
(
 #"; We say that a word is in a prefix tree if all of the characters in"
 #" a word"
) 0 0 26 29 1 #"\n"
0 0 18 3 90
(
 #"; are in a prefix tree or its children, AND there is an 'end' marker"
 #" in the child of a PT."
) 0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 13 #"define-struct"
0 0 26 3 1 #" "
0 0 14 3 4 #"node"
0 0 26 3 2 #" ["
0 0 14 3 4 #"char"
0 0 26 3 1 #" "
0 0 14 3 4 #"kids"
0 0 26 3 2 #"] "
0 0 25 3 13 #"#:transparent"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 13 #"define-struct"
0 0 26 3 1 #" "
0 0 14 3 3 #"end"
0 0 26 3 4 #" [])"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 51 #"; match? is a function that searches a prefix tree,"
0 0 26 29 1 #"\n"
0 0 18 3 61
#"; and determines whether or not a given word is in that tree."
0 0 26 29 1 #"\n"
0 0 18 3 50 #"; match?: [Listof Character] PrefixTree => Boolean"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 6 #"match?"
0 0 26 3 1 #" "
0 0 14 3 4 #"word"
0 0 26 3 1 #" "
0 0 14 3 2 #"pt"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 4 #"cond"
0 0 26 29 1 #"\n"
0 0 26 3 6 #"    [("
0 0 14 3 6 #"empty?"
0 0 26 3 1 #" "
0 0 14 3 4 #"word"
0 0 26 3 3 #") ("
0 0 14 3 4 #"end?"
0 0 26 3 1 #" "
0 0 14 3 2 #"pt"
0 0 26 3 2 #")]"
0 0 26 29 1 #"\n"
0 0 26 3 6 #"    [("
0 0 14 3 4 #"end?"
0 0 26 3 1 #" "
0 0 14 3 2 #"pt"
0 0 26 3 2 #") "
0 0 23 3 2 #"#f"
0 0 26 3 1 #"]"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 26 29 1 #"\n"
0 0 26 3 6 #"     ("
0 0 14 3 3 #"and"
0 0 26 29 1 #"\n"
0 0 26 3 7 #"      ("
0 0 14 3 8 #"string=?"
0 0 26 3 2 #" ("
0 0 14 3 5 #"first"
0 0 26 3 1 #" "
0 0 14 3 4 #"word"
0 0 26 3 3 #") ("
0 0 14 3 9 #"node-char"
0 0 26 3 1 #" "
0 0 14 3 2 #"pt"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 7 #"      ("
0 0 14 3 11 #"match-lopt?"
0 0 26 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 26 3 1 #" "
0 0 14 3 4 #"word"
0 0 26 3 3 #") ("
0 0 14 3 9 #"node-kids"
0 0 26 3 1 #" "
0 0 14 3 2 #"pt"
0 0 26 3 6 #")))]))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 83
(
 #"; match-lopt? is a helper/mutual function for match? that determines"
 #" whether or not"
) 0 0 26 29 1 #"\n"
0 0 18 3 41 #"; a word exists in a list of prefix trees"
0 0 26 29 1 #"\n"
0 0 18 3 64
#"; match-lopt?: [Listof Character] [Listof PrefixTree] => Boolean"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 11 #"match-lopt?"
0 0 26 3 1 #" "
0 0 14 3 4 #"word"
0 0 26 3 1 #" "
0 0 14 3 4 #"lopt"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 4 #"cond"
0 0 26 29 1 #"\n"
0 0 26 3 6 #"    [("
0 0 14 3 6 #"empty?"
0 0 26 3 1 #" "
0 0 14 3 4 #"lopt"
0 0 26 3 2 #") "
0 0 23 3 2 #"#f"
0 0 26 3 1 #"]"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 26 3 2 #" ("
0 0 14 3 2 #"or"
0 0 26 3 2 #" ("
0 0 14 3 6 #"match?"
0 0 26 3 1 #" "
0 0 14 3 4 #"word"
0 0 26 3 2 #" ("
0 0 14 3 5 #"first"
0 0 26 3 1 #" "
0 0 14 3 4 #"lopt"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 15 #"              ("
0 0 14 3 11 #"match-lopt?"
0 0 26 3 1 #" "
0 0 14 3 4 #"word"
0 0 26 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 26 3 1 #" "
0 0 14 3 4 #"lopt"
0 0 26 3 6 #")))]))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 66
#"; So, as a recap, match? works on a PrefixTree structure, where as"
0 0 26 29 1 #"\n"
0 0 18 3 74
(
 #"; the match-lopt? works over a list of prefix tree structures. You c"
 #"an see"
) 0 0 26 29 1 #"\n"
0 0 18 3 90
(
 #"; the design recipe/template in action, because match? follows the t"
 #"emplate for processing"
) 0 0 26 29 1 #"\n"
0 0 18 3 83
(
 #"; a node/end structure, and match-lopt? follows the template for pro"
 #"cessing a list!"
) 0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 3 #"pt1"
0 0 26 3 2 #" ("
0 0 14 3 9 #"make-node"
0 0 26 3 1 #" "
0 0 20 3 3 #"\"o\""
0 0 26 3 1 #" "
0 0 26 29 1 #"\n"
0 0 26 3 24 #"                       ("
0 0 14 3 4 #"list"
0 0 26 3 1 #" "
0 0 26 29 1 #"\n"
0 0 26 3 25 #"                        ("
0 0 14 3 9 #"make-node"
0 0 26 3 1 #" "
0 0 20 3 3 #"\"n\""
0 0 26 3 2 #" ("
0 0 14 3 4 #"list"
0 0 26 3 1 #" "
0 0 26 29 1 #"\n"
0 0 26 3 41 #"                                        ("
0 0 14 3 8 #"make-end"
0 0 26 3 2 #") "
0 0 26 29 1 #"\n"
0 0 26 3 41 #"                                        ("
0 0 14 3 9 #"make-node"
0 0 26 3 1 #" "
0 0 20 3 3 #"\"e\""
0 0 26 3 2 #" ("
0 0 14 3 4 #"list"
0 0 26 3 1 #" "
0 0 26 29 1 #"\n"
0 0 26 3 57 #"                                                        ("
0 0 14 3 8 #"make-end"
0 0 26 3 5 #")))))"
0 0 26 29 1 #"\n"
0 0 26 3 25 #"                        ("
0 0 14 3 9 #"make-node"
0 0 26 3 1 #" "
0 0 20 3 3 #"\"f\""
0 0 26 3 2 #" ("
0 0 14 3 4 #"list"
0 0 26 3 1 #" "
0 0 26 29 1 #"\n"
0 0 26 3 41 #"                                        ("
0 0 14 3 9 #"make-node"
0 0 26 3 1 #" "
0 0 20 3 3 #"\"f\""
0 0 26 3 2 #" ("
0 0 14 3 4 #"list"
0 0 26 3 1 #" "
0 0 26 29 1 #"\n"
0 0 26 3 57 #"                                                        ("
0 0 14 3 8 #"make-end"
0 0 26 3 4 #"))) "
0 0 26 29 1 #"\n"
0 0 26 3 41 #"                                        ("
0 0 14 3 9 #"make-node"
0 0 26 3 1 #" "
0 0 20 3 3 #"\"t\""
0 0 26 3 2 #" ("
0 0 14 3 4 #"list"
0 0 26 3 2 #" ("
0 0 14 3 8 #"make-end"
0 0 26 3 8 #"))))))))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 3 #"pt2"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 14 3 9 #"make-node"
0 0 26 3 1 #" "
0 0 20 3 3 #"\"o\""
0 0 26 29 1 #"\n"
0 0 26 3 14 #"             ("
0 0 14 3 4 #"list"
0 0 26 29 1 #"\n"
0 0 26 3 15 #"              ("
0 0 14 3 9 #"make-node"
0 0 26 3 1 #" "
0 0 20 3 3 #"\"f\""
0 0 26 3 2 #" ("
0 0 14 3 4 #"list"
0 0 26 3 2 #" ("
0 0 14 3 9 #"make-node"
0 0 26 3 1 #" "
0 0 20 3 3 #"\"s\""
0 0 26 3 2 #" ("
0 0 14 3 4 #"list"
0 0 26 3 2 #" ("
0 0 14 3 8 #"make-end"
0 0 26 3 5 #")))))"
0 0 26 29 1 #"\n"
0 0 26 3 15 #"              ("
0 0 14 3 8 #"make-end"
0 0 26 3 4 #"))))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 88
(
 #";(check-expect (match? (explode \"of\") pt2) #f) ; the 'f' node does"
 #"n't have an end marker"
) 0 0 26 29 1 #"\n"
0 0 18 3 70
(
 #";(check-expect (match? (explode \"o\") pt2) #t) ; but the 'o' node d"
 #"oes!"
) 0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 3 #"pt3"
0 0 26 3 2 #" ("
0 0 14 3 9 #"make-node"
0 0 26 3 1 #" "
0 0 20 3 3 #"\"a\""
0 0 26 3 1 #" "
0 0 26 29 1 #"\n"
0 0 26 3 24 #"                       ("
0 0 14 3 4 #"list"
0 0 26 3 1 #" "
0 0 26 29 1 #"\n"
0 0 26 3 25 #"                        ("
0 0 14 3 9 #"make-node"
0 0 26 3 1 #" "
0 0 20 3 3 #"\"r\""
0 0 26 3 2 #" ("
0 0 14 3 4 #"list"
0 0 26 3 1 #" "
0 0 26 29 1 #"\n"
0 0 26 3 41 #"                                        ("
0 0 14 3 8 #"make-end"
0 0 26 3 2 #") "
0 0 26 29 1 #"\n"
0 0 26 3 41 #"                                        ("
0 0 14 3 9 #"make-node"
0 0 26 3 1 #" "
0 0 20 3 3 #"\"e\""
0 0 26 3 2 #" ("
0 0 14 3 4 #"list"
0 0 26 3 1 #" "
0 0 26 29 1 #"\n"
0 0 26 3 57 #"                                                        ("
0 0 14 3 8 #"make-end"
0 0 26 3 5 #")))))"
0 0 26 29 1 #"\n"
0 0 26 3 25 #"                        ("
0 0 14 3 9 #"make-node"
0 0 26 3 1 #" "
0 0 20 3 3 #"\"l\""
0 0 26 3 2 #" ("
0 0 14 3 4 #"list"
0 0 26 3 1 #" "
0 0 26 29 1 #"\n"
0 0 26 3 41 #"                                        ("
0 0 14 3 9 #"make-node"
0 0 26 3 1 #" "
0 0 20 3 3 #"\"e\""
0 0 26 3 2 #" ("
0 0 14 3 4 #"list"
0 0 26 3 1 #" "
0 0 26 29 1 #"\n"
0 0 26 3 57 #"                                                        ("
0 0 14 3 8 #"make-end"
0 0 26 3 4 #"))) "
0 0 26 29 1 #"\n"
0 0 26 3 41 #"                                        ("
0 0 14 3 9 #"make-node"
0 0 26 3 1 #" "
0 0 20 3 3 #"\"t\""
0 0 26 3 2 #" ("
0 0 14 3 4 #"list"
0 0 26 3 2 #" ("
0 0 14 3 8 #"make-end"
0 0 26 3 8 #"))))))))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 9         733 23           0 0           0 121 0 26 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 26 3 2 #" ("
0 0 14 3 6 #"match?"
0 0 26 3 2 #" ("
0 0 14 3 7 #"explode"
0 0 26 3 1 #" "
0 0 20 3 5 #"\"off\""
0 0 26 3 2 #") "
0 0 14 3 3 #"pt1"
0 0 26 3 2 #") "
0 0 14 3 4 #"true"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 26 3 2 #" ("
0 0 14 3 6 #"match?"
0 0 26 3 2 #" ("
0 0 14 3 7 #"explode"
0 0 26 3 1 #" "
0 0 20 3 4 #"\"on\""
0 0 26 3 2 #") "
0 0 14 3 3 #"pt1"
0 0 26 3 2 #") "
0 0 14 3 4 #"true"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 26 3 2 #" ("
0 0 14 3 6 #"match?"
0 0 26 3 2 #" ("
0 0 14 3 7 #"explode"
0 0 26 3 1 #" "
0 0 20 3 3 #"\"o\""
0 0 26 3 2 #") "
0 0 14 3 3 #"pt1"
0 0 26 3 2 #") "
0 0 14 3 5 #"false"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 26 3 2 #" ("
0 0 14 3 6 #"match?"
0 0 26 3 2 #" ("
0 0 14 3 7 #"explode"
0 0 26 3 1 #" "
0 0 20 3 7 #"\"often\""
0 0 26 3 2 #") "
0 0 14 3 3 #"pt1"
0 0 26 3 2 #") "
0 0 14 3 5 #"false"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 26 3 2 #" ("
0 0 14 3 6 #"match?"
0 0 26 3 2 #" ("
0 0 14 3 7 #"explode"
0 0 26 3 1 #" "
0 0 20 3 5 #"\"two\""
0 0 26 3 2 #") "
0 0 14 3 3 #"pt1"
0 0 26 3 2 #") "
0 0 14 3 5 #"false"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 26 3 2 #" ("
0 0 14 3 6 #"match?"
0 0 26 3 2 #" ("
0 0 14 3 7 #"explode"
0 0 26 3 1 #" "
0 0 20 3 5 #"\"oft\""
0 0 26 3 2 #") "
0 0 14 3 3 #"pt1"
0 0 26 3 2 #") "
0 0 14 3 4 #"true"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 26 3 2 #" ("
0 0 14 3 6 #"match?"
0 0 26 3 1 #" "
0 0 14 3 5 #"empty"
0 0 26 3 1 #" "
0 0 14 3 3 #"pt1"
0 0 26 3 2 #") "
0 0 14 3 5 #"false"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 26 3 2 #" ("
0 0 14 3 6 #"match?"
0 0 26 3 1 #" "
0 0 14 3 5 #"empty"
0 0 26 3 2 #" ("
0 0 14 3 8 #"make-end"
0 0 26 3 3 #")) "
0 0 14 3 4 #"true"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 26 3 2 #" ("
0 0 14 3 6 #"match?"
0 0 26 3 2 #" ("
0 0 14 3 7 #"explode"
0 0 26 3 1 #" "
0 0 20 3 5 #"\"one\""
0 0 26 3 3 #") ("
0 0 14 3 8 #"make-end"
0 0 26 3 3 #")) "
0 0 14 3 5 #"false"
0 0 26 3 1 #")"
0           0 0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 114
(
 #"; We know that match? works for a list of characters (or an exploded"
 #" string) and a prefix tree. In the real world,"
) 0 0 26 29 1 #"\n"
0 0 18 3 118
(
 #"; like a dictionary, or perhaps search engine filter, we won't just "
 #"have prefix trees of the same initial letters. The"
) 0 0 26 29 1 #"\n"
0 0 18 3 97
(
 #"; prefix trees we've been working on above consist intially of all t"
 #"he same initial letter words."
) 0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 67
#"; How might we represent a dictionary in our prefix tree structure?"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 32 #"; We use a list of prefix trees!"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 9         265 23           0 0           0 43 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 10 #"dictionary"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 14 3 4 #"list"
0 0 26 29 1 #"\n"
0 0 26 3 4 #"   ("
0 0 14 3 9 #"make-node"
0 0 26 3 1 #" "
0 0 20 3 3 #"\"a\""
0 0 26 3 3 #" (("
0 0 14 3 8 #"make-end"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 3 4 #"   ("
0 0 14 3 9 #"make-node"
0 0 26 3 1 #" "
0 0 20 3 3 #"\"b\""
0 0 26 3 2 #" ("
0 0 14 3 3 #"..."
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 4 #"   ("
0 0 14 3 3 #"..."
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 4 #"   ("
0 0 14 3 9 #"make-node"
0 0 26 3 1 #" "
0 0 20 3 3 #"\"y\""
0 0 26 3 2 #" ("
0 0 14 3 3 #"..."
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 4 #"   ("
0 0 14 3 9 #"make-node"
0 0 26 3 1 #" "
0 0 20 3 3 #"\"z\""
0 0 26 3 2 #" ("
0 0 14 3 3 #"..."
0 0 26 3 4 #"))))"
0           0 0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 71
(
 #"; Here's an example of a small dictionary from the 3 example pt's ab"
 #"ove"
) 0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 2 #"d1"
0 0 26 3 2 #" ("
0 0 14 3 4 #"list"
0 0 26 3 1 #" "
0 0 14 3 3 #"pt1"
0 0 26 3 1 #" "
0 0 14 3 3 #"pt2"
0 0 26 3 1 #" "
0 0 14 3 3 #"pt3"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 18 3 51 #";(check-expect (match-lopt? (explode \"are\") d1) #t)"
0 0 26 29 1 #"\n"
0 0 18 3 51 #";(check-expect (match-lopt? (explode \"oft\") d1) #t)"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 70
(
 #"; Let's create a function to add a new word to a list of prefix tree"
 #"s."
) 0 0 26 29 1 #"\n"
0 0 18 3 73
(
 #"; lopt-add: [Listof Character] [Listof PrefixTree] => [Listof Prefix"
 #"Tree]"
) 0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 8 #"lopt-add"
0 0 26 3 1 #" "
0 0 14 3 4 #"word"
0 0 26 3 1 #" "
0 0 14 3 4 #"lopt"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 4 #"cond"
0 0 26 29 1 #"\n"
0 0 26 3 6 #"    [("
0 0 14 3 6 #"empty?"
0 0 26 3 1 #" "
0 0 14 3 4 #"lopt"
0 0 26 3 2 #") "
0 0 18 3 29 #"; reached the end of the list"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"     "
0 0 18 3 38 #"; either our word is empty or it's not"
0 0 26 29 1 #"\n"
0 0 26 3 6 #"     ("
0 0 14 3 2 #"if"
0 0 26 3 2 #" ("
0 0 14 3 6 #"empty?"
0 0 26 3 1 #" "
0 0 14 3 4 #"word"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 10 #"         ("
0 0 14 3 4 #"list"
0 0 26 3 2 #" ("
0 0 14 3 8 #"make-end"
0 0 26 3 3 #")) "
0 0 18 3 60
#"; if it's empty, we're done and we can just add a (make-end)"
0 0 26 29 1 #"\n"
0 0 26 3 10 #"         ("
0 0 14 3 4 #"list"
0 0 26 3 2 #" ("
0 0 14 3 9 #"make-node"
0 0 26 3 2 #" ("
0 0 14 3 5 #"first"
0 0 26 3 1 #" "
0 0 14 3 4 #"word"
0 0 26 3 3 #") ("
0 0 14 3 8 #"lopt-add"
0 0 26 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 26 3 1 #" "
0 0 14 3 4 #"word"
0 0 26 3 2 #") "
0 0 14 3 5 #"empty"
0 0 26 3 6 #"))))] "
0 0 18 3 26 #"; if not, gotta keep going"
0 0 26 29 1 #"\n"
0 0 26 3 6 #"    [("
0 0 14 3 6 #"empty?"
0 0 26 3 1 #" "
0 0 14 3 4 #"word"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 6 #"     ("
0 0 14 3 2 #"if"
0 0 26 3 2 #" ("
0 0 14 3 4 #"end?"
0 0 26 3 2 #" ("
0 0 14 3 5 #"first"
0 0 26 3 1 #" "
0 0 14 3 4 #"lopt"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 9 #"         "
0 0 14 3 4 #"lopt"
0 0 26 3 1 #" "
0 0 18 3 81
(
 #"; if the current thing we are at is already a (make-end), we can jus"
 #"t return here"
) 0 0 26 29 1 #"\n"
0 0 26 3 10 #"         ("
0 0 14 3 4 #"cons"
0 0 26 3 2 #" ("
0 0 14 3 5 #"first"
0 0 26 3 1 #" "
0 0 14 3 4 #"lopt"
0 0 26 3 3 #") ("
0 0 14 3 8 #"lopt-add"
0 0 26 3 1 #" "
0 0 14 3 4 #"word"
0 0 26 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 26 3 1 #" "
0 0 14 3 4 #"lopt"
0 0 26 3 6 #"))))] "
0 0 18 3 34 #"; otherwise, we need to keep going"
0 0 26 29 1 #"\n"
0 0 26 3 6 #"    [("
0 0 14 3 3 #"and"
0 0 26 3 2 #" ("
0 0 14 3 5 #"node?"
0 0 26 3 2 #" ("
0 0 14 3 5 #"first"
0 0 26 3 1 #" "
0 0 14 3 4 #"lopt"
0 0 26 3 3 #")) "
0 0 18 3 61
#"; at this point, we know neither the string nor list is empty"
0 0 26 29 1 #"\n"
0 0 26 3 11 #"          ("
0 0 14 3 8 #"string=?"
0 0 26 3 2 #" ("
0 0 14 3 5 #"first"
0 0 26 3 1 #" "
0 0 14 3 4 #"word"
0 0 26 3 3 #") ("
0 0 14 3 9 #"node-char"
0 0 26 3 2 #" ("
0 0 14 3 5 #"first"
0 0 26 3 1 #" "
0 0 14 3 4 #"lopt"
0 0 26 3 4 #"))))"
0 0 26 29 1 #"\n"
0 0 26 3 6 #"     ("
0 0 14 3 4 #"cons"
0 0 26 3 1 #" "
0 0 18 3 73
(
 #"; if this matches our word, then we preserve the preexisting prefix "
 #"tree,"
) 0 0 26 29 1 #"\n"
0 0 26 3 7 #"      ("
0 0 14 3 9 #"make-node"
0 0 26 3 2 #" ("
0 0 14 3 5 #"first"
0 0 26 3 1 #" "
0 0 14 3 4 #"word"
0 0 26 3 2 #") "
0 0 18 3 52 #"; and continue adding the new word onto the children"
0 0 26 29 1 #"\n"
0 0 26 3 18 #"                 ("
0 0 14 3 8 #"lopt-add"
0 0 26 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 26 3 1 #" "
0 0 14 3 4 #"word"
0 0 26 3 3 #") ("
0 0 14 3 9 #"node-kids"
0 0 26 3 2 #" ("
0 0 14 3 5 #"first"
0 0 26 3 1 #" "
0 0 14 3 4 #"lopt"
0 0 26 3 4 #"))))"
0 0 26 29 1 #"\n"
0 0 26 3 7 #"      ("
0 0 14 3 4 #"rest"
0 0 26 3 1 #" "
0 0 14 3 4 #"lopt"
0 0 26 3 4 #"))] "
0 0 18 3 42 #"; can't forget the 'rest' of the list, too"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 26 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 26 3 2 #" ("
0 0 14 3 5 #"first"
0 0 26 3 1 #" "
0 0 14 3 4 #"lopt"
0 0 26 3 3 #") ("
0 0 14 3 8 #"lopt-add"
0 0 26 3 1 #" "
0 0 14 3 4 #"word"
0 0 26 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 26 3 1 #" "
0 0 14 3 4 #"lopt"
0 0 26 3 7 #")))])) "
0 0 18 3 51 #"; if we got here, we need to go further in the list"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 65
#"; We can test this out by inserting new words into a 'dictionary'"
0 0 26 29 1 #"\n"
0 0 18 3 92
(
 #";(check-expect  (match-lopt? (explode \"elephant\") (lopt-add (explo"
 #"de \"elephant\") d1)) #true)"
) 0 0 26 29 1 #"\n"
0 0 18 3 90
(
 #";(check-expect  (match-lopt? (explode \"giraffe\") (lopt-add (explod"
 #"e \"giraffe\") d1)) #true)"
) 0 0 26 29 1 #"\n"
0 0 18 3 38 #";(lopt-add (explode \"elephant\") empty)"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 7 #"require"
0 0 26 3 1 #" "
0 0 14 3 14 #"2htdp/batch-io"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 7 #"require"
0 0 26 3 1 #" "
0 0 14 3 11 #"2htdp/image"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 7 #"require"
0 0 26 3 1 #" "
0 0 14 3 14 #"2htdp/universe"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 58
#"; determines whether or not a word is in a list of strings"
0 0 26 29 1 #"\n"
0 0 18 3 47 #"; bad-search: String [Listof String] => Boolean"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 10 #"bad-search"
0 0 26 3 1 #" "
0 0 14 3 1 #"w"
0 0 26 3 1 #" "
0 0 14 3 2 #"ls"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 4 #"cond"
0 0 26 29 1 #"\n"
0 0 26 3 6 #"    [("
0 0 14 3 6 #"empty?"
0 0 26 3 1 #" "
0 0 14 3 2 #"ls"
0 0 26 3 2 #") "
0 0 23 3 2 #"#f"
0 0 26 3 1 #"]"
0 0 26 29 1 #"\n"
0 0 26 3 6 #"    [("
0 0 14 3 8 #"string=?"
0 0 26 3 2 #" ("
0 0 14 3 5 #"first"
0 0 26 3 1 #" "
0 0 14 3 2 #"ls"
0 0 26 3 2 #") "
0 0 14 3 1 #"w"
0 0 26 3 2 #") "
0 0 23 3 2 #"#t"
0 0 26 3 1 #"]"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 26 3 2 #" ("
0 0 14 3 10 #"bad-search"
0 0 26 3 1 #" "
0 0 14 3 1 #"w"
0 0 26 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 26 3 1 #" "
0 0 14 3 2 #"ls"
0 0 26 3 5 #"))]))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 49 #";(define all-words (read-words \"dictionary.txt\"))"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 10 #"dictionary"
0 0 26 3 2 #" ("
0 0 14 3 5 #"foldl"
0 0 26 3 2 #" ("
0 0 16 3 2 #"\316\273"
0 0 26 3 2 #" ("
0 0 14 3 1 #"c"
0 0 26 3 1 #" "
0 0 14 3 1 #"p"
0 0 26 3 3 #") ("
0 0 14 3 8 #"lopt-add"
0 0 26 3 2 #" ("
0 0 14 3 7 #"explode"
0 0 26 3 1 #" "
0 0 14 3 1 #"c"
0 0 26 3 2 #") "
0 0 14 3 1 #"p"
0 0 26 3 3 #")) "
0 0 23 3 1 #"'"
0 0 26 3 4 #"() ("
0 0 14 3 10 #"read-words"
0 0 26 3 1 #" "
0 0 20 3 16 #"\"dictionary.txt\""
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 22 #";\"Prefix Tree search:\""
0 0 26 29 1 #"\n"
0 0 18 3 48 #";(time (match-lopt? (explode \"zoo\") dictionary))"
0 0 26 29 1 #"\n"
0 0 18 3 26 #";\"List of strings search:\""
0 0 26 29 1 #"\n"
0 0 18 3 36 #";(time (bad-search \"zoo\" all-words))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 46 #"; Now let's show a quick application that will"
0 0 26 29 1 #"\n"
0 0 18 3 40 #"; show recommendations to a user as they"
0 0 26 29 1 #"\n"
0 0 18 3 43 #"; type out words on the screen, pulling the"
0 0 26 29 1 #"\n"
0 0 18 3 49 #"; recommendations from our dictionary prefix tree"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 31 #"; A world state is a structure:"
0 0 26 29 1 #"\n"
0 0 18 3 46 #"; (make-world String [Listof [Listof String]])"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 13 #"define-struct"
0 0 26 3 1 #" "
0 0 14 3 5 #"world"
0 0 26 3 2 #" ("
0 0 14 3 1 #"c"
0 0 26 3 1 #" "
0 0 14 3 15 #"recommendations"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 18 3 44 #"; where c is the current string being typed,"
0 0 26 29 1 #"\n"
0 0 18 3 69
(
 #"; and the recommendations are the list of possible words it could be"
 #"."
) 0 0 26 29 1 #"\n"
0 0 18 3 76
(
 #"; the recommendations are split up into chunks so they can be neatly"
 #" aligned"
) 0 0 26 29 1 #"\n"
0 0 18 3 15 #"; into columns."
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 53 #"; draws the text that has been typed up to this point"
0 0 26 29 1 #"\n"
0 0 18 3 37 #"; draw-current-text: World Img => Img"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 17 #"draw-current-text"
0 0 26 3 1 #" "
0 0 14 3 2 #"ws"
0 0 26 3 1 #" "
0 0 14 3 3 #"img"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 14 3 11 #"above/align"
0 0 26 3 1 #" "
0 0 20 3 6 #"\"left\""
0 0 26 29 1 #"\n"
0 0 26 3 4 #"   ("
0 0 14 3 4 #"text"
0 0 26 3 2 #" ("
0 0 14 3 7 #"world-c"
0 0 26 3 1 #" "
0 0 14 3 2 #"ws"
0 0 26 3 2 #") "
0 0 23 3 2 #"15"
0 0 26 3 1 #" "
0 0 20 3 7 #"\"black\""
0 0 26 3 2 #") "
0 0 26 29 1 #"\n"
0 0 26 3 3 #"   "
0 0 14 3 3 #"img"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 51 #"; draws the recommendations for a particular string"
0 0 26 29 1 #"\n"
0 0 18 3 44 #"; draw-recommendations: World Image => Image"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 20 #"draw-recommendations"
0 0 26 3 1 #" "
0 0 14 3 2 #"ws"
0 0 26 3 1 #" "
0 0 14 3 3 #"img"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 14 3 5 #"foldr"
0 0 26 3 2 #" ("
0 0 16 3 2 #"\316\273"
0 0 26 3 2 #" ("
0 0 14 3 1 #"c"
0 0 26 3 1 #" "
0 0 14 3 1 #"p"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 12 #"           ("
0 0 14 3 12 #"beside/align"
0 0 26 3 1 #" "
0 0 20 3 5 #"\"top\""
0 0 26 29 1 #"\n"
0 0 26 3 13 #"            ("
0 0 14 3 5 #"foldr"
0 0 26 3 2 #" ("
0 0 16 3 2 #"\316\273"
0 0 26 3 2 #" ("
0 0 14 3 3 #"str"
0 0 26 3 1 #" "
0 0 14 3 4 #"last"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 19 #"                  ("
0 0 14 3 10 #"overlay/xy"
0 0 26 29 1 #"\n"
0 0 26 3 20 #"                   ("
0 0 14 3 4 #"text"
0 0 26 3 1 #" "
0 0 14 3 3 #"str"
0 0 26 3 1 #" "
0 0 23 3 2 #"12"
0 0 26 3 1 #" "
0 0 20 3 6 #"\"blue\""
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 19 #"                   "
0 0 23 3 1 #"0"
0 0 26 3 1 #" "
0 0 23 3 2 #"14"
0 0 26 3 1 #" "
0 0 14 3 4 #"last"
0 0 26 3 4 #")) ("
0 0 14 3 9 #"rectangle"
0 0 26 3 1 #" "
0 0 23 3 1 #"1"
0 0 26 3 1 #" "
0 0 23 3 1 #"1"
0 0 26 3 1 #" "
0 0 20 3 7 #"\"solid\""
0 0 26 3 1 #" "
0 0 20 3 7 #"\"white\""
0 0 26 3 2 #") "
0 0 14 3 1 #"c"
0 0 26 3 2 #") "
0 0 14 3 1 #"p"
0 0 26 3 3 #")) "
0 0 14 3 3 #"img"
0 0 26 3 2 #" ("
0 0 14 3 21 #"world-recommendations"
0 0 26 3 1 #" "
0 0 14 3 2 #"ws"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 30 #"; draws the entire application"
0 0 26 29 1 #"\n"
0 0 18 3 28 #"; draw-world: World => Image"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 10 #"draw-world"
0 0 26 3 1 #" "
0 0 14 3 2 #"ws"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 14 3 17 #"draw-current-text"
0 0 26 3 1 #" "
0 0 14 3 2 #"ws"
0 0 26 29 1 #"\n"
0 0 26 3 22 #"                     ("
0 0 14 3 20 #"draw-recommendations"
0 0 26 3 1 #" "
0 0 14 3 2 #"ws"
0 0 26 3 2 #" ("
0 0 14 3 9 #"rectangle"
0 0 26 3 1 #" "
0 0 23 3 4 #"1400"
0 0 26 3 1 #" "
0 0 23 3 4 #"1000"
0 0 26 3 1 #" "
0 0 20 3 7 #"\"solid\""
0 0 26 3 1 #" "
0 0 20 3 7 #"\"white\""
0 0 26 3 4 #"))))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 54 #"; generates all of the words under a given prefix tree"
0 0 26 29 1 #"\n"
0 0 18 3 59
#"; gen-recommendations: PrefixTree String => [Listof String]"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 19 #"gen-recommendations"
0 0 26 3 1 #" "
0 0 14 3 2 #"pt"
0 0 26 3 1 #" "
0 0 14 3 3 #"str"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 14 3 7 #"gen-all"
0 0 26 3 2 #" ("
0 0 14 3 9 #"node-kids"
0 0 26 3 1 #" "
0 0 14 3 2 #"pt"
0 0 26 3 3 #") ("
0 0 14 3 13 #"string-append"
0 0 26 3 1 #" "
0 0 14 3 3 #"str"
0 0 26 3 2 #" ("
0 0 14 3 9 #"node-char"
0 0 26 3 1 #" "
0 0 14 3 2 #"pt"
0 0 26 3 4 #"))))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 55 #"; generates all of the words for a list of prefix trees"
0 0 26 29 1 #"\n"
0 0 18 3 56 #"; gen-all: [Listof PrefixTree] String => [Listof String]"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 7 #"gen-all"
0 0 26 3 1 #" "
0 0 14 3 4 #"lopt"
0 0 26 3 1 #" "
0 0 14 3 3 #"str"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 4 #"cond"
0 0 26 29 1 #"\n"
0 0 26 3 6 #"    [("
0 0 14 3 6 #"empty?"
0 0 26 3 1 #" "
0 0 14 3 4 #"lopt"
0 0 26 3 2 #") "
0 0 14 3 5 #"empty"
0 0 26 3 1 #"]"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 26 29 1 #"\n"
0 0 26 3 6 #"     ("
0 0 14 3 2 #"if"
0 0 26 3 2 #" ("
0 0 14 3 4 #"end?"
0 0 26 3 2 #" ("
0 0 14 3 5 #"first"
0 0 26 3 1 #" "
0 0 14 3 4 #"lopt"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 10 #"         ("
0 0 14 3 4 #"cons"
0 0 26 3 1 #" "
0 0 14 3 3 #"str"
0 0 26 3 2 #" ("
0 0 14 3 7 #"gen-all"
0 0 26 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 26 3 1 #" "
0 0 14 3 4 #"lopt"
0 0 26 3 2 #") "
0 0 14 3 3 #"str"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 10 #"         ("
0 0 14 3 6 #"append"
0 0 26 29 1 #"\n"
0 0 26 3 11 #"          ("
0 0 14 3 19 #"gen-recommendations"
0 0 26 3 2 #" ("
0 0 14 3 5 #"first"
0 0 26 3 1 #" "
0 0 14 3 4 #"lopt"
0 0 26 3 2 #") "
0 0 14 3 3 #"str"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 11 #"          ("
0 0 14 3 7 #"gen-all"
0 0 26 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 26 3 1 #" "
0 0 14 3 4 #"lopt"
0 0 26 3 2 #") "
0 0 14 3 3 #"str"
0 0 26 3 6 #")))]))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 54 #"; returns a list of prefix trees where some word ends "
0 0 26 29 1 #"\n"
0 0 18 3 61
#"; find-all: String [Listof PrefixTree] => [Listof PrefixTree]"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 8 #"find-all"
0 0 26 3 1 #" "
0 0 14 3 4 #"word"
0 0 26 3 1 #" "
0 0 14 3 4 #"lopt"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 5 #"local"
0 0 26 29 1 #"\n"
0 0 26 3 4 #"    "
0 0 18 3 18 #"; helper function "
0 0 26 29 1 #"\n"
0 0 26 3 6 #"    [("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 4 #"find"
0 0 26 3 1 #" "
0 0 14 3 4 #"word"
0 0 26 3 1 #" "
0 0 14 3 2 #"pt"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"       ("
0 0 14 3 8 #"find-all"
0 0 26 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 26 3 1 #" "
0 0 14 3 4 #"word"
0 0 26 3 3 #") ("
0 0 14 3 9 #"node-kids"
0 0 26 3 1 #" "
0 0 14 3 2 #"pt"
0 0 26 3 4 #")))]"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 16 3 4 #"cond"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      [("
0 0 14 3 6 #"empty?"
0 0 26 3 1 #" "
0 0 14 3 4 #"word"
0 0 26 3 2 #") "
0 0 14 3 4 #"lopt"
0 0 26 3 1 #"]"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      [("
0 0 14 3 6 #"empty?"
0 0 26 3 1 #" "
0 0 14 3 4 #"lopt"
0 0 26 3 3 #") ("
0 0 14 3 4 #"list"
0 0 26 3 2 #" ("
0 0 14 3 8 #"make-end"
0 0 26 3 3 #"))]"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      [("
0 0 14 3 6 #"match?"
0 0 26 3 1 #" "
0 0 14 3 4 #"word"
0 0 26 3 2 #" ("
0 0 14 3 5 #"first"
0 0 26 3 1 #" "
0 0 14 3 4 #"lopt"
0 0 26 3 4 #")) ("
0 0 14 3 4 #"find"
0 0 26 3 1 #" "
0 0 14 3 4 #"word"
0 0 26 3 2 #" ("
0 0 14 3 5 #"first"
0 0 26 3 1 #" "
0 0 14 3 4 #"lopt"
0 0 26 3 3 #"))]"
0 0 26 29 1 #"\n"
0 0 26 3 7 #"      ["
0 0 14 3 4 #"else"
0 0 26 3 2 #" ("
0 0 14 3 8 #"find-all"
0 0 26 3 1 #" "
0 0 14 3 4 #"word"
0 0 26 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 26 3 1 #" "
0 0 14 3 4 #"lopt"
0 0 26 3 6 #"))])))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 41 #"; key handler that updates the game state"
0 0 26 29 1 #"\n"
0 0 18 3 81
(
 #"; generates recommendations and stores them in the ws based on the c"
 #"urrent string"
) 0 0 26 29 1 #"\n"
0 0 18 3 80
(
 #"; recommendations are split up into 'chunks' so they can be displaye"
 #"d as columns"
) 0 0 26 29 1 #"\n"
0 0 18 3 36 #"; key-handler: World String => World"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 11 #"key-handler"
0 0 26 3 1 #" "
0 0 14 3 2 #"ws"
0 0 26 3 1 #" "
0 0 14 3 1 #"k"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 3 #"let"
0 0 26 3 3 #" [("
0 0 14 3 1 #"c"
0 0 26 3 2 #" ("
0 0 14 3 7 #"world-c"
0 0 26 3 1 #" "
0 0 14 3 2 #"ws"
0 0 26 3 3 #"))]"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 16 3 4 #"cond"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      [("
0 0 14 3 8 #"string=?"
0 0 26 3 1 #" "
0 0 20 3 4 #"\"\\b\""
0 0 26 3 1 #" "
0 0 14 3 1 #"k"
0 0 26 3 2 #") "
0 0 18 3 20 #"; user hit backspace"
0 0 26 29 1 #"\n"
0 0 26 3 9 #"        ("
0 0 14 3 2 #"if"
0 0 26 3 2 #" ("
0 0 14 3 2 #"or"
0 0 26 3 2 #" ("
0 0 14 3 8 #"string=?"
0 0 26 3 1 #" "
0 0 20 3 2 #"\"\""
0 0 26 3 1 #" "
0 0 14 3 1 #"c"
0 0 26 3 3 #") ("
0 0 14 3 1 #"="
0 0 26 3 2 #" ("
0 0 14 3 13 #"string-length"
0 0 26 3 1 #" "
0 0 14 3 1 #"c"
0 0 26 3 2 #") "
0 0 23 3 1 #"1"
0 0 26 3 3 #")) "
0 0 18 3 34 #"; if the word is empty or length 1"
0 0 26 29 1 #"\n"
0 0 26 3 13 #"            ("
0 0 14 3 10 #"make-world"
0 0 26 3 1 #" "
0 0 20 3 2 #"\"\""
0 0 26 3 2 #" ("
0 0 14 3 4 #"list"
0 0 26 3 1 #" "
0 0 14 3 5 #"empty"
0 0 26 3 3 #")) "
0 0 18 3 53 #"; just return the empty string and no recommendations"
0 0 26 29 1 #"\n"
0 0 26 3 13 #"            ("
0 0 14 3 10 #"make-world"
0 0 26 3 2 #" ("
0 0 14 3 9 #"substring"
0 0 26 3 1 #" "
0 0 14 3 1 #"c"
0 0 26 3 1 #" "
0 0 23 3 1 #"0"
0 0 26 3 2 #" ("
0 0 14 3 4 #"sub1"
0 0 26 3 2 #" ("
0 0 14 3 13 #"string-length"
0 0 26 3 1 #" "
0 0 14 3 1 #"c"
0 0 26 3 4 #"))) "
0 0 18 3 69
(
 #"; otherwise, show the recommendations for the c string minus one cha"
 #"r"
) 0 0 26 29 1 #"\n"
0 0 26 3 25 #"                        ("
0 0 14 3 11 #"list-chunks"
0 0 26 29 1 #"\n"
0 0 26 3 26 #"                         ("
0 0 14 3 7 #"gen-all"
0 0 26 3 2 #" ("
0 0 14 3 8 #"find-all"
0 0 26 3 2 #" ("
0 0 14 3 7 #"explode"
0 0 26 3 2 #" ("
0 0 14 3 9 #"substring"
0 0 26 3 1 #" "
0 0 14 3 1 #"c"
0 0 26 3 1 #" "
0 0 23 3 1 #"0"
0 0 26 3 2 #" ("
0 0 14 3 4 #"sub1"
0 0 26 3 2 #" ("
0 0 14 3 13 #"string-length"
0 0 26 3 1 #" "
0 0 14 3 1 #"c"
0 0 26 3 5 #")))) "
0 0 14 3 10 #"dictionary"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 35 #"                                  ("
0 0 14 3 9 #"substring"
0 0 26 3 1 #" "
0 0 14 3 1 #"c"
0 0 26 3 1 #" "
0 0 23 3 1 #"0"
0 0 26 3 2 #" ("
0 0 14 3 4 #"sub1"
0 0 26 3 2 #" ("
0 0 14 3 13 #"string-length"
0 0 26 3 1 #" "
0 0 14 3 1 #"c"
0 0 26 3 5 #")))) "
0 0 23 3 2 #"75"
0 0 26 3 4 #")))]"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      [("
0 0 14 3 8 #"string=?"
0 0 26 3 1 #" "
0 0 20 3 7 #"\"shift\""
0 0 26 3 1 #" "
0 0 14 3 1 #"k"
0 0 26 3 2 #") "
0 0 14 3 2 #"ws"
0 0 26 3 2 #"] "
0 0 18 3 62
#"; user hit shift, ignore it so they can type uppercase letters"
0 0 26 29 1 #"\n"
0 0 26 3 7 #"      ["
0 0 14 3 4 #"else"
0 0 26 3 1 #" "
0 0 18 3 35 #"; user just hit a letter, append it"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"       ("
0 0 14 3 10 #"make-world"
0 0 26 3 2 #" ("
0 0 14 3 13 #"string-append"
0 0 26 3 1 #" "
0 0 14 3 1 #"c"
0 0 26 3 1 #" "
0 0 14 3 1 #"k"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 20 #"                   ("
0 0 14 3 11 #"list-chunks"
0 0 26 29 1 #"\n"
0 0 26 3 21 #"                    ("
0 0 14 3 7 #"gen-all"
0 0 26 3 2 #" ("
0 0 14 3 8 #"find-all"
0 0 26 3 2 #" ("
0 0 14 3 7 #"explode"
0 0 26 3 2 #" ("
0 0 14 3 13 #"string-append"
0 0 26 3 1 #" "
0 0 14 3 1 #"c"
0 0 26 3 1 #" "
0 0 14 3 1 #"k"
0 0 26 3 3 #")) "
0 0 14 3 10 #"dictionary"
0 0 26 3 3 #") ("
0 0 14 3 13 #"string-append"
0 0 26 3 1 #" "
0 0 14 3 1 #"c"
0 0 26 3 1 #" "
0 0 14 3 1 #"k"
0 0 26 3 3 #")) "
0 0 23 3 2 #"75"
0 0 26 3 6 #"))])))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 58
#"; initial state is an empty string with no recommendations"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 14 3 8 #"big-bang"
0 0 26 3 2 #" ("
0 0 14 3 10 #"make-world"
0 0 26 3 1 #" "
0 0 20 3 2 #"\"\""
0 0 26 3 2 #" ("
0 0 14 3 4 #"list"
0 0 26 3 1 #" "
0 0 14 3 5 #"empty"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 11 #"          ("
0 0 14 3 7 #"to-draw"
0 0 26 3 1 #" "
0 0 14 3 10 #"draw-world"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 11 #"          ("
0 0 14 3 6 #"on-key"
0 0 26 3 1 #" "
0 0 14 3 11 #"key-handler"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 10 #"          "
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0           0
